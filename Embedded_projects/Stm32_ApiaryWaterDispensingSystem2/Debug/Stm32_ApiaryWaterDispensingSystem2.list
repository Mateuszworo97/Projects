
Stm32_ApiaryWaterDispensingSystem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011234  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  080113d8  080113d8  000213d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f1c  08011f1c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011f1c  08011f1c  00021f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f24  08011f24  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f24  08011f24  00021f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f28  08011f28  00021f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011f2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094fc  200001dc  08012108  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200096d8  08012108  000396d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024724  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057b6  00000000  00000000  00054973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  0005a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016db  00000000  00000000  0005beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d569  00000000  00000000  0005d593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026613  00000000  00000000  0007aafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5cf7  00000000  00000000  000a110f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ae0  00000000  00000000  00146e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0014f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080113bc 	.word	0x080113bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080113bc 	.word	0x080113bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9bb 	b.w	8000f90 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <GFX_SetFont+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200001f8 	.word	0x200001f8

08000fb4 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8000fce:	f200 80a3 	bhi.w	8001118 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
 8000fd6:	e096      	b.n	8001106 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000fd8:	4b51      	ldr	r3, [pc, #324]	; (8001120 <GFX_DrawChar+0x16c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b20      	subs	r3, #32
 8000fe0:	494f      	ldr	r1, [pc, #316]	; (8001120 <GFX_DrawChar+0x16c>)
 8000fe2:	6809      	ldr	r1, [r1, #0]
 8000fe4:	3101      	adds	r1, #1
 8000fe6:	7809      	ldrb	r1, [r1, #0]
 8000fe8:	fb03 f101 	mul.w	r1, r3, r1
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	440b      	add	r3, r1
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	757b      	strb	r3, [r7, #21]
 8000ffc:	e078      	b.n	80010f0 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000ffe:	7dbb      	ldrb	r3, [r7, #22]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d032      	beq.n	800106e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <GFX_DrawChar+0x170>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d113      	bne.n	8001038 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b218      	sxth	r0, r3
 800101e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001022:	b29a      	uxth	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21b      	sxth	r3, r3
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	4619      	mov	r1, r3
 8001032:	f000 f9d1 	bl	80013d8 <SSD1306_DrawPixel>
 8001036:	e052      	b.n	80010de <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <GFX_DrawChar+0x170>)
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	fb03 f202 	mul.w	r2, r3, r2
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	18d0      	adds	r0, r2, r3
 8001046:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800104a:	4a36      	ldr	r2, [pc, #216]	; (8001124 <GFX_DrawChar+0x170>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	fb03 f202 	mul.w	r2, r3, r2
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	18d1      	adds	r1, r2, r3
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <GFX_DrawChar+0x170>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <GFX_DrawChar+0x170>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29c      	uxth	r4, r3
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	f000 f960 	bl	800132c <GFX_DrawFillRectangle>
 800106c:	e037      	b.n	80010de <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800106e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001072:	2b00      	cmp	r3, #0
 8001074:	d133      	bne.n	80010de <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <GFX_DrawChar+0x170>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d114      	bne.n	80010a8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	b29a      	uxth	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	b218      	sxth	r0, r3
 800108c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001090:	b29a      	uxth	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	b21b      	sxth	r3, r3
 800109c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010a0:	4619      	mov	r1, r3
 80010a2:	f000 f999 	bl	80013d8 <SSD1306_DrawPixel>
 80010a6:	e01a      	b.n	80010de <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <GFX_DrawChar+0x170>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	fb03 f202 	mul.w	r2, r3, r2
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	18d0      	adds	r0, r2, r3
 80010b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <GFX_DrawChar+0x170>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	fb03 f202 	mul.w	r2, r3, r2
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	18d1      	adds	r1, r2, r3
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <GFX_DrawChar+0x170>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <GFX_DrawChar+0x170>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b29c      	uxth	r4, r3
 80010d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4623      	mov	r3, r4
 80010da:	f000 f927 	bl	800132c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7dbb      	ldrb	r3, [r7, #22]
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	75bb      	strb	r3, [r7, #22]
 80010f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <GFX_DrawChar+0x16c>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f6ff af7f 	blt.w	8000ffe <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <GFX_DrawChar+0x16c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	429a      	cmp	r2, r3
 8001112:	f4ff af61 	bcc.w	8000fd8 <GFX_DrawChar+0x24>
 8001116:	e000      	b.n	800111a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001118:	bf00      	nop
            }
        }
    }
}
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	200001f8 	.word	0x200001f8
 8001124:	20000000 	.word	0x20000000

08001128 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001140:	e03e      	b.n	80011c0 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001142:	78f9      	ldrb	r1, [r7, #3]
 8001144:	7cfa      	ldrb	r2, [r7, #19]
 8001146:	f897 3020 	ldrb.w	r3, [r7, #32]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f7ff ff2f 	bl	8000fb4 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <GFX_DrawString+0xb0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <GFX_DrawString+0xb4>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	3301      	adds	r3, #1
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d120      	bne.n	80011ba <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001178:	2300      	movs	r3, #0
 800117a:	74bb      	strb	r3, [r7, #18]
 800117c:	e012      	b.n	80011a4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	b218      	sxth	r0, r3
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	b29a      	uxth	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	b21b      	sxth	r3, r3
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	f000 f91d 	bl	80013d8 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800119e:	7cbb      	ldrb	r3, [r7, #18]
 80011a0:	3301      	adds	r3, #1
 80011a2:	74bb      	strb	r3, [r7, #18]
 80011a4:	7cba      	ldrb	r2, [r7, #18]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <GFX_DrawString+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <GFX_DrawString+0xb4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbe1      	blt.n	800117e <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ba      	bne.n	8001142 <GFX_DrawString+0x1a>
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001f8 	.word	0x200001f8
 80011dc:	20000000 	.word	0x20000000

080011e0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1acb      	subs	r3, r1, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	429a      	cmp	r2, r3
 800120a:	bfcc      	ite	gt
 800120c:	2301      	movgt	r3, #1
 800120e:	2300      	movle	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001214:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dd0b      	ble.n	8001254 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	b29b      	uxth	r3, r3
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfb8      	it	lt
 800126c:	425b      	neglt	r3, r3
 800126e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001274:	0fda      	lsrs	r2, r3, #31
 8001276:	4413      	add	r3, r2
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	da02      	bge.n	800128a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001288:	e030      	b.n	80012ec <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001290:	e02c      	b.n	80012ec <GFX_WriteLine+0x10c>
	        if (steep) {
 8001292:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	b21b      	sxth	r3, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	b211      	sxth	r1, r2
 80012a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f896 	bl	80013d8 <SSD1306_DrawPixel>
 80012ac:	e008      	b.n	80012c0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	b211      	sxth	r1, r2
 80012b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f88c 	bl	80013d8 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80012c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012c2:	8abb      	ldrh	r3, [r7, #20]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80012ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da09      	bge.n	80012e6 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80012d2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80012dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012de:	8afb      	ldrh	r3, [r7, #22]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	ddce      	ble.n	8001292 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af02      	add	r7, sp, #8
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff5e 	bl	80011e0 <GFX_WriteLine>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4613      	mov	r3, r2
 8001340:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	f7ff ffd4 	bl	80012fe <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbef      	blt.n	8001348 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af04      	add	r7, sp, #16
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <SSD1306_Command+0x2c>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	2200      	movs	r2, #0
 8001392:	2178      	movs	r1, #120	; 0x78
 8001394:	f005 fa12 	bl	80067bc <HAL_I2C_Mem_Write>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001fc 	.word	0x200001fc

080013a4 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <SSD1306_Data+0x30>)
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	2364      	movs	r3, #100	; 0x64
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2178      	movs	r1, #120	; 0x78
 80013c6:	f005 f9f9 	bl	80067bc <HAL_I2C_Mem_Write>
#endif
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001fc 	.word	0x200001fc

080013d8 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db79      	blt.n	80014e6 <SSD1306_DrawPixel+0x10e>
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	2b7f      	cmp	r3, #127	; 0x7f
 80013f8:	dc75      	bgt.n	80014e6 <SSD1306_DrawPixel+0x10e>
 80013fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db71      	blt.n	80014e6 <SSD1306_DrawPixel+0x10e>
 8001402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001406:	2b3f      	cmp	r3, #63	; 0x3f
 8001408:	dc6d      	bgt.n	80014e6 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d049      	beq.n	80014a4 <SSD1306_DrawPixel+0xcc>
 8001410:	2b02      	cmp	r3, #2
 8001412:	dc69      	bgt.n	80014e8 <SSD1306_DrawPixel+0x110>
 8001414:	2b00      	cmp	r3, #0
 8001416:	d022      	beq.n	800145e <SSD1306_DrawPixel+0x86>
 8001418:	2b01      	cmp	r3, #1
 800141a:	d165      	bne.n	80014e8 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800141c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <SSD1306_DrawPixel+0x52>
 8001428:	3307      	adds	r3, #7
 800142a:	10db      	asrs	r3, r3, #3
 800142c:	b218      	sxth	r0, r3
 800142e:	4603      	mov	r3, r0
 8001430:	01db      	lsls	r3, r3, #7
 8001432:	4413      	add	r3, r2
 8001434:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	b25a      	sxtb	r2, r3
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	b25b      	sxtb	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b259      	sxtb	r1, r3
 800144c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001450:	4603      	mov	r3, r0
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4413      	add	r3, r2
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 800145a:	54d1      	strb	r1, [r2, r3]
      break;
 800145c:	e044      	b.n	80014e8 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800145e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001462:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da00      	bge.n	800146c <SSD1306_DrawPixel+0x94>
 800146a:	3307      	adds	r3, #7
 800146c:	10db      	asrs	r3, r3, #3
 800146e:	b218      	sxth	r0, r3
 8001470:	4603      	mov	r3, r0
 8001472:	01db      	lsls	r3, r3, #7
 8001474:	4413      	add	r3, r2
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	b25a      	sxtb	r2, r3
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	b25b      	sxtb	r3, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	b25b      	sxtb	r3, r3
 800148e:	4013      	ands	r3, r2
 8001490:	b259      	sxtb	r1, r3
 8001492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	01db      	lsls	r3, r3, #7
 800149a:	4413      	add	r3, r2
 800149c:	b2c9      	uxtb	r1, r1
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 80014a0:	54d1      	strb	r1, [r2, r3]
      break;
 80014a2:	e021      	b.n	80014e8 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80014a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da00      	bge.n	80014b2 <SSD1306_DrawPixel+0xda>
 80014b0:	3307      	adds	r3, #7
 80014b2:	10db      	asrs	r3, r3, #3
 80014b4:	b218      	sxth	r0, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	4413      	add	r3, r2
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4053      	eors	r3, r2
 80014d2:	b259      	sxtb	r1, r3
 80014d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014d8:	4603      	mov	r3, r0
 80014da:	01db      	lsls	r3, r3, #7
 80014dc:	4413      	add	r3, r2
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 80014e2:	54d1      	strb	r1, [r2, r3]
      break;
 80014e4:	e000      	b.n	80014e8 <SSD1306_DrawPixel+0x110>
	  return;
 80014e6:	bf00      	nop
    }
}
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000200 	.word	0x20000200

080014f8 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <SSD1306_Clear+0x22>
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10d      	bne.n	8001528 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001510:	21ff      	movs	r1, #255	; 0xff
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <SSD1306_Clear+0x38>)
 8001514:	f00d ffab 	bl	800f46e <memset>
		break;
 8001518:	e006      	b.n	8001528 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	2100      	movs	r1, #0
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <SSD1306_Clear+0x38>)
 8001522:	f00d ffa4 	bl	800f46e <memset>
		break;
 8001526:	bf00      	nop
	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000200 	.word	0x20000200

08001534 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
//	SSD1306_Command(SSD1306_COLUMNADDR);
//	SSD1306_Command(0); // Column start address
//	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
//
//	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
	for (uint8_t i = 0; i < 8 ; i++)
 800153a:	2300      	movs	r3, #0
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e02d      	b.n	800159c <SSD1306_Display+0x68>
		{
			osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <SSD1306_Display+0x78>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	4618      	mov	r0, r3
 800154a:	f009 fa88 	bl	800aa5e <osMutexAcquire>
//	//		printf("TASK OLED I2C MUTEX is taken \n\r");
		    SSD1306_Command(SSD1306_PAGEADDR);
 800154e:	2022      	movs	r0, #34	; 0x22
 8001550:	f7ff ff10 	bl	8001374 <SSD1306_Command>
		    SSD1306_Command(i);                      // Page start address
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff0c 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(i);                   // Page end (not really, but works here)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff08 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(SSD1306_COLUMNADDR);
 8001564:	2021      	movs	r0, #33	; 0x21
 8001566:	f7ff ff05 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(0); // Column start address
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff ff02 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001570:	207f      	movs	r0, #127	; 0x7f
 8001572:	f7ff feff 	bl	8001374 <SSD1306_Command>

			SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	01db      	lsls	r3, r3, #7
 800157a:	461a      	mov	r2, r3
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <SSD1306_Display+0x7c>)
 800157e:	4413      	add	r3, r2
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff0e 	bl	80013a4 <SSD1306_Data>
			osMutexRelease(MutexI2C2Handle);
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <SSD1306_Display+0x78>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f009 fab1 	bl	800aaf4 <osMutexRelease>
	//		printf("TASK OLED I2C MUTEX is released \n\r");
			osThreadYield();
 8001592:	f008 ff85 	bl	800a4a0 <osThreadYield>
	for (uint8_t i = 0; i < 8 ; i++)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	3301      	adds	r3, #1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d9ce      	bls.n	8001540 <SSD1306_Display+0xc>
		}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200006f4 	.word	0x200006f4
 80015b0:	20000200 	.word	0x20000200

080015b4 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <SSD1306_Init+0xac>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80015c2:	20ae      	movs	r0, #174	; 0xae
 80015c4:	f7ff fed6 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80015c8:	20d5      	movs	r0, #213	; 0xd5
 80015ca:	f7ff fed3 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x80);
 80015ce:	2080      	movs	r0, #128	; 0x80
 80015d0:	f7ff fed0 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80015d4:	203f      	movs	r0, #63	; 0x3f
 80015d6:	f7ff fecd 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80015da:	20d3      	movs	r0, #211	; 0xd3
 80015dc:	f7ff feca 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fec7 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80015e6:	2040      	movs	r0, #64	; 0x40
 80015e8:	f7ff fec4 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80015ec:	208d      	movs	r0, #141	; 0x8d
 80015ee:	f7ff fec1 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x14);
 80015f2:	2014      	movs	r0, #20
 80015f4:	f7ff febe 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80015f8:	2020      	movs	r0, #32
 80015fa:	f7ff febb 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff feb8 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001604:	20a1      	movs	r0, #161	; 0xa1
 8001606:	f7ff feb5 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800160a:	20c8      	movs	r0, #200	; 0xc8
 800160c:	f7ff feb2 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001610:	20da      	movs	r0, #218	; 0xda
 8001612:	f7ff feaf 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001616:	2012      	movs	r0, #18
 8001618:	f7ff feac 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800161c:	2081      	movs	r0, #129	; 0x81
 800161e:	f7ff fea9 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001622:	20ff      	movs	r0, #255	; 0xff
 8001624:	f7ff fea6 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001628:	20d9      	movs	r0, #217	; 0xd9
 800162a:	f7ff fea3 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800162e:	20f1      	movs	r0, #241	; 0xf1
 8001630:	f7ff fea0 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001634:	20db      	movs	r0, #219	; 0xdb
 8001636:	f7ff fe9d 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x40);
 800163a:	2040      	movs	r0, #64	; 0x40
 800163c:	f7ff fe9a 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001640:	20a4      	movs	r0, #164	; 0xa4
 8001642:	f7ff fe97 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001646:	20a6      	movs	r0, #166	; 0xa6
 8001648:	f7ff fe94 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800164c:	202e      	movs	r0, #46	; 0x2e
 800164e:	f7ff fe91 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001652:	20af      	movs	r0, #175	; 0xaf
 8001654:	f7ff fe8e 	bl	8001374 <SSD1306_Command>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001fc 	.word	0x200001fc

08001664 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <BH1750_Init+0x34>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001672:	f000 f813 	bl	800169c <BH1750_Reset>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 800167c:	2045      	movs	r0, #69	; 0x45
 800167e:	f000 f859 	bl	8001734 <BH1750_SetMtreg>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <BH1750_Init+0x28>
			return BH1750_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000600 	.word	0x20000600

0800169c <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 80016a2:	2307      	movs	r3, #7
 80016a4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <BH1750_Reset+0x30>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	1dfa      	adds	r2, r7, #7
 80016ac:	230a      	movs	r3, #10
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	2146      	movs	r1, #70	; 0x46
 80016b4:	f004 fd5e 	bl	8006174 <HAL_I2C_Master_Transmit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <BH1750_Reset+0x26>
		return BH1750_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000600 	.word	0x20000600

080016d0 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d106      	bne.n	80016f2 <BH1750_SetMode+0x22>
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <BH1750_SetMode+0x22>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e018      	b.n	8001724 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <BH1750_SetMode+0x30>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e011      	b.n	8001724 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <BH1750_SetMode+0x5c>)
 8001704:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <BH1750_SetMode+0x60>)
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	230a      	movs	r3, #10
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	2146      	movs	r1, #70	; 0x46
 8001714:	f004 fd2e 	bl	8006174 <HAL_I2C_Master_Transmit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <BH1750_SetMode+0x52>
		return BH1750_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000604 	.word	0x20000604
 8001730:	20000600 	.word	0x20000600

08001734 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b1e      	cmp	r3, #30
 8001742:	d902      	bls.n	800174a <BH1750_SetMtreg+0x16>
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d101      	bne.n	800174e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e037      	b.n	80017be <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <BH1750_SetMtreg+0x94>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175e:	b2db      	uxtb	r3, r3
 8001760:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <BH1750_SetMtreg+0x98>)
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f107 020c 	add.w	r2, r7, #12
 800177e:	230a      	movs	r3, #10
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	2146      	movs	r1, #70	; 0x46
 8001786:	f004 fcf5 	bl	8006174 <HAL_I2C_Master_Transmit>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e012      	b.n	80017be <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <BH1750_SetMtreg+0x98>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	230a      	movs	r3, #10
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	2146      	movs	r1, #70	; 0x46
 80017aa:	f004 fce3 	bl	8006174 <HAL_I2C_Master_Transmit>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e000      	b.n	80017be <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000605 	.word	0x20000605
 80017cc:	20000600 	.word	0x20000600

080017d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <BH1750_ReadLight+0xa0>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f107 0208 	add.w	r2, r7, #8
 80017e0:	230a      	movs	r3, #10
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2302      	movs	r3, #2
 80017e6:	2146      	movs	r1, #70	; 0x46
 80017e8:	f004 fdc2 	bl	8006370 <HAL_I2C_Master_Receive>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d138      	bne.n	8001864 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80017f2:	7a3b      	ldrb	r3, [r7, #8]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	7a7a      	ldrb	r2, [r7, #9]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001802:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <BH1750_ReadLight+0xa4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b45      	cmp	r3, #69	; 0x45
 800180c:	d00f      	beq.n	800182e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <BH1750_ReadLight+0xa4>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001878 <BH1750_ReadLight+0xa8>
 800181e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001822:	ed97 7a03 	vldr	s14, [r7, #12]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <BH1750_ReadLight+0xac>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b21      	cmp	r3, #33	; 0x21
 8001834:	d003      	beq.n	800183e <BH1750_ReadLight+0x6e>
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <BH1750_ReadLight+0xac>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b11      	cmp	r3, #17
 800183c:	d107      	bne.n	800184e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800183e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001842:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001880 <BH1750_ReadLight+0xb0>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000600 	.word	0x20000600
 8001874:	20000605 	.word	0x20000605
 8001878:	428a0000 	.word	0x428a0000
 800187c:	20000604 	.word	0x20000604
 8001880:	3f99999a 	.word	0x3f99999a

08001884 <BME280_Read8>:
int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9, h2, h4, h5;
uint16_t t1, p1;
int32_t t_fine;

uint8_t BME280_Read8(uint8_t addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af04      	add	r7, sp, #16
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <BME280_Read8+0x38>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b29a      	uxth	r2, r3
 800189a:	230a      	movs	r3, #10
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2301      	movs	r3, #1
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f107 030f 	add.w	r3, r7, #15
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	21ec      	movs	r1, #236	; 0xec
 80018ac:	f005 f880 	bl	80069b0 <HAL_I2C_Mem_Read>
	return tmp;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000608 	.word	0x20000608

080018c0 <BME280_Read16>:

uint16_t BME280_Read16(uint8_t addr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <BME280_Read16+0x40>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	230a      	movs	r3, #10
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2302      	movs	r3, #2
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	21ec      	movs	r1, #236	; 0xec
 80018e4:	f005 f864 	bl	80069b0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	7b7b      	ldrb	r3, [r7, #13]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	b29b      	uxth	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000608 	.word	0x20000608

08001904 <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffd5 	bl	80018c0 <BME280_Read16>
 8001916:	4603      	mov	r3, r0
 8001918:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	b21a      	sxth	r2, r3
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	b29b      	uxth	r3, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <BME280_Write8>:

void BME280_Write8(uint8_t address, uint8_t data)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	4613      	mov	r3, r2
 8001946:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <BME280_Write8+0x34>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b29a      	uxth	r2, r3
 8001950:	230a      	movs	r3, #10
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	21ec      	movs	r1, #236	; 0xec
 8001960:	f004 ff2c 	bl	80067bc <HAL_I2C_Mem_Write>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000608 	.word	0x20000608

08001970 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af04      	add	r7, sp, #16
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <BME280_Read24+0x40>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	b29a      	uxth	r2, r3
 8001982:	230a      	movs	r3, #10
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2303      	movs	r3, #3
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	21ec      	movs	r1, #236	; 0xec
 8001994:	f005 f80c 	bl	80069b0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001998:	7b3b      	ldrb	r3, [r7, #12]
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	7b7b      	ldrb	r3, [r7, #13]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	4313      	orrs	r3, r2
 80019a2:	7bba      	ldrb	r2, [r7, #14]
 80019a4:	4313      	orrs	r3, r2
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000608 	.word	0x20000608

080019b4 <BME280_IsReadingCalibration>:
uint8_t BME280_IsReadingCalibration(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	uint8_t Status = BME280_Read8(BME280_STATUS);
 80019ba:	20f3      	movs	r0, #243	; 0xf3
 80019bc:	f7ff ff62 	bl	8001884 <BME280_Read8>
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]

	return ((Status & 1) != 0);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f003 031c 	and.w	r3, r3, #28
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	20f5      	movs	r0, #245	; 0xf5
 8001a0e:	f7ff ff93 	bl	8001938 <BME280_Write8>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <BME280_Init>:


void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	4608      	mov	r0, r1
 8001a26:	4611      	mov	r1, r2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	70fb      	strb	r3, [r7, #3]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70bb      	strb	r3, [r7, #2]
 8001a32:	4613      	mov	r3, r2
 8001a34:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001a36:	4a8f      	ldr	r2, [pc, #572]	; (8001c74 <BME280_Init+0x258>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6013      	str	r3, [r2, #0]
	uint8_t HumReg, i;

		if (mode > BME280_NORMALMODE)
 8001a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d902      	bls.n	8001a4a <BME280_Init+0x2e>
		    mode = BME280_NORMALMODE;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f887 3020 	strb.w	r3, [r7, #32]
		_mode = mode;
 8001a4a:	4a8b      	ldr	r2, [pc, #556]	; (8001c78 <BME280_Init+0x25c>)
 8001a4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a50:	7013      	strb	r3, [r2, #0]
		if(mode == BME280_FORCEDMODE)
 8001a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <BME280_Init+0x44>
			mode = BME280_SLEEPMODE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3020 	strb.w	r3, [r7, #32]

		if (temperature_resolution > BME280_TEMPERATURE_20BIT)
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d901      	bls.n	8001a6a <BME280_Init+0x4e>
			temperature_resolution = BME280_TEMPERATURE_20BIT;
 8001a66:	2305      	movs	r3, #5
 8001a68:	70fb      	strb	r3, [r7, #3]
		_temperature_res = temperature_resolution;
 8001a6a:	4a84      	ldr	r2, [pc, #528]	; (8001c7c <BME280_Init+0x260>)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	7013      	strb	r3, [r2, #0]

		if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
 8001a70:	78bb      	ldrb	r3, [r7, #2]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d901      	bls.n	8001a7a <BME280_Init+0x5e>
			pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
 8001a76:	2305      	movs	r3, #5
 8001a78:	70bb      	strb	r3, [r7, #2]
		_pressure_oversampling = pressure_oversampling;
 8001a7a:	4a81      	ldr	r2, [pc, #516]	; (8001c80 <BME280_Init+0x264>)
 8001a7c:	78bb      	ldrb	r3, [r7, #2]
 8001a7e:	7013      	strb	r3, [r2, #0]

		if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d901      	bls.n	8001a8a <BME280_Init+0x6e>
			huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
 8001a86:	2305      	movs	r3, #5
 8001a88:	707b      	strb	r3, [r7, #1]
		_huminidity_oversampling = huminidity_oversampling;
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	; (8001c84 <BME280_Init+0x268>)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	7013      	strb	r3, [r2, #0]

		while(BME280_Read8(BME280_CHIPID) != 0x60);
 8001a90:	bf00      	nop
 8001a92:	20d0      	movs	r0, #208	; 0xd0
 8001a94:	f7ff fef6 	bl	8001884 <BME280_Read8>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b60      	cmp	r3, #96	; 0x60
 8001a9c:	d1f9      	bne.n	8001a92 <BME280_Init+0x76>

		BME280_Write8(BME280_SOFTRESET, 0xB6);
 8001a9e:	21b6      	movs	r1, #182	; 0xb6
 8001aa0:	20e0      	movs	r0, #224	; 0xe0
 8001aa2:	f7ff ff49 	bl	8001938 <BME280_Write8>

		for(i = 0; i<30; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e005      	b.n	8001ab8 <BME280_Init+0x9c>
			HAL_Delay(10); // Wait  300 msfor wake up
 8001aac:	200a      	movs	r0, #10
 8001aae:	f003 fe01 	bl	80056b4 <HAL_Delay>
		for(i = 0; i<30; i++)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b1d      	cmp	r3, #29
 8001abc:	d9f6      	bls.n	8001aac <BME280_Init+0x90>

		while(BME280_IsReadingCalibration())
 8001abe:	e00b      	b.n	8001ad8 <BME280_Init+0xbc>
			for(i = 0; i<10; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e005      	b.n	8001ad2 <BME280_Init+0xb6>
				HAL_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f003 fdf4 	bl	80056b4 <HAL_Delay>
			for(i = 0; i<10; i++)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d9f6      	bls.n	8001ac6 <BME280_Init+0xaa>
		while(BME280_IsReadingCalibration())
 8001ad8:	f7ff ff6c 	bl	80019b4 <BME280_IsReadingCalibration>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ee      	bne.n	8001ac0 <BME280_Init+0xa4>

		/* read calibration data */
		t1 = BME280_Read16LE(BME280_DIG_T1);
 8001ae2:	2088      	movs	r0, #136	; 0x88
 8001ae4:	f7ff ff0e 	bl	8001904 <BME280_Read16LE>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <BME280_Init+0x26c>)
 8001aee:	801a      	strh	r2, [r3, #0]
		t2 = BME280_Read16LE(BME280_DIG_T2);
 8001af0:	208a      	movs	r0, #138	; 0x8a
 8001af2:	f7ff ff07 	bl	8001904 <BME280_Read16LE>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <BME280_Init+0x270>)
 8001afc:	801a      	strh	r2, [r3, #0]
		t3 = BME280_Read16LE(BME280_DIG_T3);
 8001afe:	208c      	movs	r0, #140	; 0x8c
 8001b00:	f7ff ff00 	bl	8001904 <BME280_Read16LE>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <BME280_Init+0x274>)
 8001b0a:	801a      	strh	r2, [r3, #0]

		p1 = BME280_Read16LE(BME280_DIG_P1);
 8001b0c:	208e      	movs	r0, #142	; 0x8e
 8001b0e:	f7ff fef9 	bl	8001904 <BME280_Read16LE>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <BME280_Init+0x278>)
 8001b18:	801a      	strh	r2, [r3, #0]
		p2 = BME280_Read16LE(BME280_DIG_P2);
 8001b1a:	2090      	movs	r0, #144	; 0x90
 8001b1c:	f7ff fef2 	bl	8001904 <BME280_Read16LE>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <BME280_Init+0x27c>)
 8001b26:	801a      	strh	r2, [r3, #0]
		p3 = BME280_Read16LE(BME280_DIG_P3);
 8001b28:	2092      	movs	r0, #146	; 0x92
 8001b2a:	f7ff feeb 	bl	8001904 <BME280_Read16LE>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <BME280_Init+0x280>)
 8001b34:	801a      	strh	r2, [r3, #0]
		p4 = BME280_Read16LE(BME280_DIG_P4);
 8001b36:	2094      	movs	r0, #148	; 0x94
 8001b38:	f7ff fee4 	bl	8001904 <BME280_Read16LE>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <BME280_Init+0x284>)
 8001b42:	801a      	strh	r2, [r3, #0]
		p5 = BME280_Read16LE(BME280_DIG_P5);
 8001b44:	2096      	movs	r0, #150	; 0x96
 8001b46:	f7ff fedd 	bl	8001904 <BME280_Read16LE>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <BME280_Init+0x288>)
 8001b50:	801a      	strh	r2, [r3, #0]
		p6 = BME280_Read16LE(BME280_DIG_P6);
 8001b52:	2098      	movs	r0, #152	; 0x98
 8001b54:	f7ff fed6 	bl	8001904 <BME280_Read16LE>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <BME280_Init+0x28c>)
 8001b5e:	801a      	strh	r2, [r3, #0]
		p7 = BME280_Read16LE(BME280_DIG_P7);
 8001b60:	209a      	movs	r0, #154	; 0x9a
 8001b62:	f7ff fecf 	bl	8001904 <BME280_Read16LE>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	4b50      	ldr	r3, [pc, #320]	; (8001cac <BME280_Init+0x290>)
 8001b6c:	801a      	strh	r2, [r3, #0]
		p8 = BME280_Read16LE(BME280_DIG_P8);
 8001b6e:	209c      	movs	r0, #156	; 0x9c
 8001b70:	f7ff fec8 	bl	8001904 <BME280_Read16LE>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <BME280_Init+0x294>)
 8001b7a:	801a      	strh	r2, [r3, #0]
		p9 = BME280_Read16LE(BME280_DIG_P9);
 8001b7c:	209e      	movs	r0, #158	; 0x9e
 8001b7e:	f7ff fec1 	bl	8001904 <BME280_Read16LE>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <BME280_Init+0x298>)
 8001b88:	801a      	strh	r2, [r3, #0]

		h1 = BME280_Read8(BME280_DIG_H1);
 8001b8a:	20a1      	movs	r0, #161	; 0xa1
 8001b8c:	f7ff fe7a 	bl	8001884 <BME280_Read8>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <BME280_Init+0x29c>)
 8001b96:	701a      	strb	r2, [r3, #0]
		h2 = BME280_Read16LE(BME280_DIG_H2);
 8001b98:	20e1      	movs	r0, #225	; 0xe1
 8001b9a:	f7ff feb3 	bl	8001904 <BME280_Read16LE>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <BME280_Init+0x2a0>)
 8001ba4:	801a      	strh	r2, [r3, #0]
		h3 = BME280_Read8(BME280_DIG_H3);
 8001ba6:	20e3      	movs	r0, #227	; 0xe3
 8001ba8:	f7ff fe6c 	bl	8001884 <BME280_Read8>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <BME280_Init+0x2a4>)
 8001bb2:	701a      	strb	r2, [r3, #0]
		h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8001bb4:	20e4      	movs	r0, #228	; 0xe4
 8001bb6:	f7ff fe65 	bl	8001884 <BME280_Read8>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	b21c      	sxth	r4, r3
 8001bc0:	20e5      	movs	r0, #229	; 0xe5
 8001bc2:	f7ff fe5f 	bl	8001884 <BME280_Read8>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <BME280_Init+0x2a8>)
 8001bd6:	801a      	strh	r2, [r3, #0]
		h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8001bd8:	20e6      	movs	r0, #230	; 0xe6
 8001bda:	f7ff fe53 	bl	8001884 <BME280_Read8>
 8001bde:	4603      	mov	r3, r0
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	b21c      	sxth	r4, r3
 8001be4:	20e5      	movs	r0, #229	; 0xe5
 8001be6:	f7ff fe4d 	bl	8001884 <BME280_Read8>
 8001bea:	4603      	mov	r3, r0
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4323      	orrs	r3, r4
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <BME280_Init+0x2ac>)
 8001bf8:	801a      	strh	r2, [r3, #0]
		h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 8001bfa:	20e7      	movs	r0, #231	; 0xe7
 8001bfc:	f7ff fe42 	bl	8001884 <BME280_Read8>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b25a      	sxtb	r2, r3
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <BME280_Init+0x2b0>)
 8001c06:	701a      	strb	r2, [r3, #0]

		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001c08:	20f2      	movs	r0, #242	; 0xf2
 8001c0a:	f7ff fe3b 	bl	8001884 <BME280_Read8>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73bb      	strb	r3, [r7, #14]
		HumReg &= 0xF8;
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	f023 0307 	bic.w	r3, r3, #7
 8001c18:	73bb      	strb	r3, [r7, #14]
		HumReg |= _huminidity_oversampling;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <BME280_Init+0x268>)
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_HUM_CONTROL, HumReg);
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	4619      	mov	r1, r3
 8001c28:	20f2      	movs	r0, #242	; 0xf2
 8001c2a:	f7ff fe85 	bl	8001938 <BME280_Write8>
		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001c2e:	20f2      	movs	r0, #242	; 0xf2
 8001c30:	f7ff fe28 	bl	8001884 <BME280_Read8>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	20f4      	movs	r0, #244	; 0xf4
 8001c56:	f7ff fe6f 	bl	8001938 <BME280_Write8>

		if(mode == BME280_NORMALMODE)
 8001c5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d103      	bne.n	8001c6a <BME280_Init+0x24e>
		{
			BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
 8001c62:	2100      	movs	r1, #0
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff feb9 	bl	80019dc <BME280_SetConfig>
		}
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000608 	.word	0x20000608
 8001c78:	2000060f 	.word	0x2000060f
 8001c7c:	2000060c 	.word	0x2000060c
 8001c80:	2000060d 	.word	0x2000060d
 8001c84:	2000060e 	.word	0x2000060e
 8001c88:	2000062e 	.word	0x2000062e
 8001c8c:	20000614 	.word	0x20000614
 8001c90:	20000616 	.word	0x20000616
 8001c94:	20000630 	.word	0x20000630
 8001c98:	20000618 	.word	0x20000618
 8001c9c:	2000061a 	.word	0x2000061a
 8001ca0:	2000061c 	.word	0x2000061c
 8001ca4:	2000061e 	.word	0x2000061e
 8001ca8:	20000620 	.word	0x20000620
 8001cac:	20000622 	.word	0x20000622
 8001cb0:	20000624 	.word	0x20000624
 8001cb4:	20000626 	.word	0x20000626
 8001cb8:	20000610 	.word	0x20000610
 8001cbc:	20000628 	.word	0x20000628
 8001cc0:	20000611 	.word	0x20000611
 8001cc4:	2000062a 	.word	0x2000062a
 8001cc8:	2000062c 	.word	0x2000062c
 8001ccc:	20000612 	.word	0x20000612

08001cd0 <BME280_ReadTemperature>:

float BME280_ReadTemperature(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <BME280_ReadTemperature+0x104>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d12b      	bne.n	8001d36 <BME280_ReadTemperature+0x66>
  {
	  uint8_t mode;
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8001cde:	20f4      	movs	r0, #244	; 0xf4
 8001ce0:	f7ff fdd0 	bl	8001884 <BME280_Read8>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BME280_FORCEDMODE;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	75fb      	strb	r3, [r7, #23]
	  BME280_Write8(BME280_CONTROL, ctrl);
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	20f4      	movs	r0, #244	; 0xf4
 8001cfe:	f7ff fe1b 	bl	8001938 <BME280_Write8>

	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 8001d02:	20f4      	movs	r0, #244	; 0xf4
 8001d04:	f7ff fdbe 	bl	8001884 <BME280_Read8>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001d0c:	7dbb      	ldrb	r3, [r7, #22]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	75bb      	strb	r3, [r7, #22]

	  if(mode == BME280_FORCEDMODE)
 8001d14:	7dbb      	ldrb	r3, [r7, #22]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <BME280_ReadTemperature+0x66>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BME280_Read8(BME280_CONTROL);
 8001d1a:	20f4      	movs	r0, #244	; 0xf4
 8001d1c:	f7ff fdb2 	bl	8001884 <BME280_Read8>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001d24:	7dbb      	ldrb	r3, [r7, #22]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BME280_SLEEPMODE)
 8001d2c:	7dbb      	ldrb	r3, [r7, #22]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d000      	beq.n	8001d34 <BME280_ReadTemperature+0x64>
			  mode = BME280_Read8(BME280_CONTROL);
 8001d32:	e7f2      	b.n	8001d1a <BME280_ReadTemperature+0x4a>
				  break;
 8001d34:	bf00      	nop
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 8001d36:	20fa      	movs	r0, #250	; 0xfa
 8001d38:	f7ff fe1a 	bl	8001970 <BME280_Read24>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	613b      	str	r3, [r7, #16]
  if (adc_T == 0x800000)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d46:	d102      	bne.n	8001d4e <BME280_ReadTemperature+0x7e>
	  return -99;
 8001d48:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001dd8 <BME280_ReadTemperature+0x108>
 8001d4c:	e03b      	b.n	8001dc6 <BME280_ReadTemperature+0xf6>

  adc_T >>= 4;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	111b      	asrs	r3, r3, #4
 8001d52:	613b      	str	r3, [r7, #16]

  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	10da      	asrs	r2, r3, #3
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <BME280_ReadTemperature+0x10c>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	1ad3      	subs	r3, r2, r3
		  ((int32_t)t2)) >> 11;
 8001d60:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <BME280_ReadTemperature+0x110>)
 8001d62:	f9b2 2000 	ldrsh.w	r2, [r2]
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	12db      	asrs	r3, r3, #11
 8001d6c:	60fb      	str	r3, [r7, #12]

  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	111b      	asrs	r3, r3, #4
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <BME280_ReadTemperature+0x10c>)
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	1a9b      	subs	r3, r3, r2
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	1112      	asrs	r2, r2, #4
 8001d7c:	4917      	ldr	r1, [pc, #92]	; (8001ddc <BME280_ReadTemperature+0x10c>)
 8001d7e:	8809      	ldrh	r1, [r1, #0]
 8001d80:	1a52      	subs	r2, r2, r1
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d86:	131b      	asrs	r3, r3, #12
		  ((int32_t)t3)) >> 14;
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <BME280_ReadTemperature+0x114>)
 8001d8a:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d92:	139b      	asrs	r3, r3, #14
 8001d94:	60bb      	str	r3, [r7, #8]

  t_fine = var1 + var2;
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <BME280_ReadTemperature+0x118>)
 8001d9e:	6013      	str	r3, [r2, #0]

  float T  = (t_fine * 5 + 128) >> 8;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <BME280_ReadTemperature+0x118>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3380      	adds	r3, #128	; 0x80
 8001dac:	121b      	asrs	r3, r3, #8
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db6:	edc7 7a01 	vstr	s15, [r7, #4]
  return T/100;
 8001dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbe:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001dec <BME280_ReadTemperature+0x11c>
 8001dc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  return -99;
}
 8001dc6:	eef0 7a47 	vmov.f32	s15, s14
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2000060f 	.word	0x2000060f
 8001dd8:	c2c60000 	.word	0xc2c60000
 8001ddc:	2000062e 	.word	0x2000062e
 8001de0:	20000614 	.word	0x20000614
 8001de4:	20000616 	.word	0x20000616
 8001de8:	20000634 	.word	0x20000634
 8001dec:	42c80000 	.word	0x42c80000

08001df0 <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  float h = (v_x1_u32r>>12);
	  return  h / 1024.0;
}

uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b0d2      	sub	sp, #328	; 0x148
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001dfc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001e00:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 8001e04:	f7ff ff64 	bl	8001cd0 <BME280_ReadTemperature>
 8001e08:	eef0 7a40 	vmov.f32	s15, s0
 8001e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e10:	edc3 7a00 	vstr	s15, [r3]

	if(*temperature == -99)
 8001e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80020ec <BME280_ReadTemperatureAndPressureAndHuminidity+0x2fc>
 8001e20:	eef4 7a47 	vcmp.f32	s15, s14
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	d101      	bne.n	8001e2e <BME280_ReadTemperatureAndPressureAndHuminidity+0x3e>
	  return -1;
 8001e2a:	23ff      	movs	r3, #255	; 0xff
 8001e2c:	e33f      	b.n	80024ae <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8001e2e:	20f7      	movs	r0, #247	; 0xf7
 8001e30:	f7ff fd9e 	bl	8001970 <BME280_Read24>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	adc_P >>= 4;
 8001e3a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e3e:	111b      	asrs	r3, r3, #4
 8001e40:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	var1 = ((int64_t)t_fine) - 128000;
 8001e44:	4baa      	ldr	r3, [pc, #680]	; (80020f0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x300>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	17da      	asrs	r2, r3, #31
 8001e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e4e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001e52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001e56:	460b      	mov	r3, r1
 8001e58:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e5e:	4613      	mov	r3, r2
 8001e60:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e6a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = var1 * var1 * (int64_t)p6;
 8001e6e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e76:	fb03 f102 	mul.w	r1, r3, r2
 8001e7a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	18ca      	adds	r2, r1, r3
 8001e88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e8c:	fba3 4503 	umull	r4, r5, r3, r3
 8001e90:	1953      	adds	r3, r2, r5
 8001e92:	461d      	mov	r5, r3
 8001e94:	4b97      	ldr	r3, [pc, #604]	; (80020f4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x304>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	17da      	asrs	r2, r3, #31
 8001e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ea2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ea6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	fb03 f205 	mul.w	r2, r3, r5
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	fb04 f303 	mul.w	r3, r4, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4602      	mov	r2, r0
 8001eba:	fba4 8902 	umull	r8, r9, r4, r2
 8001ebe:	444b      	add	r3, r9
 8001ec0:	4699      	mov	r9, r3
 8001ec2:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 8001ec6:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x308>)
 8001ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	17da      	asrs	r2, r3, #31
 8001ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee0:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001ee4:	462a      	mov	r2, r5
 8001ee6:	fb02 f203 	mul.w	r2, r2, r3
 8001eea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001eee:	4621      	mov	r1, r4
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	441a      	add	r2, r3
 8001ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001efa:	4621      	mov	r1, r4
 8001efc:	fba3 ab01 	umull	sl, fp, r3, r1
 8001f00:	eb02 030b 	add.w	r3, r2, fp
 8001f04:	469b      	mov	fp, r3
 8001f06:	f04f 0000 	mov.w	r0, #0
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001f12:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001f16:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001f1a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f1e:	1814      	adds	r4, r2, r0
 8001f20:	643c      	str	r4, [r7, #64]	; 0x40
 8001f22:	414b      	adcs	r3, r1
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
 8001f26:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001f2a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var2 = var2 + (((int64_t)p4)<<35);
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <BME280_ReadTemperatureAndPressureAndHuminidity+0x30c>)
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	17da      	asrs	r2, r3, #31
 8001f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f3c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f4c:	00d9      	lsls	r1, r3, #3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f54:	1814      	adds	r4, r2, r0
 8001f56:	63bc      	str	r4, [r7, #56]	; 0x38
 8001f58:	414b      	adcs	r3, r1
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001f60:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001f64:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001f68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f6c:	fb03 f102 	mul.w	r1, r3, r2
 8001f70:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001f74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	18ca      	adds	r2, r1, r3
 8001f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f82:	fba3 1303 	umull	r1, r3, r3, r3
 8001f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <BME280_ReadTemperatureAndPressureAndHuminidity+0x310>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	17da      	asrs	r2, r3, #31
 8001fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001fac:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001fb6:	4642      	mov	r2, r8
 8001fb8:	fb02 f203 	mul.w	r2, r2, r3
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	4641      	mov	r1, r8
 8001fca:	fba2 1201 	umull	r1, r2, r2, r1
 8001fce:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001fd8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001fdc:	4413      	add	r3, r2
 8001fde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001fee:	4623      	mov	r3, r4
 8001ff0:	0a18      	lsrs	r0, r3, #8
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <BME280_ReadTemperatureAndPressureAndHuminidity+0x314>)
 8001ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002002:	b21b      	sxth	r3, r3
 8002004:	17da      	asrs	r2, r3, #31
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800200a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800200e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002016:	464a      	mov	r2, r9
 8002018:	fb02 f203 	mul.w	r2, r2, r3
 800201c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002020:	4644      	mov	r4, r8
 8002022:	fb04 f303 	mul.w	r3, r4, r3
 8002026:	441a      	add	r2, r3
 8002028:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800202c:	4644      	mov	r4, r8
 800202e:	fba3 4304 	umull	r4, r3, r3, r4
 8002032:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002036:	4623      	mov	r3, r4
 8002038:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002052:	464c      	mov	r4, r9
 8002054:	0323      	lsls	r3, r4, #12
 8002056:	4644      	mov	r4, r8
 8002058:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800205c:	4644      	mov	r4, r8
 800205e:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002060:	1884      	adds	r4, r0, r2
 8002062:	633c      	str	r4, [r7, #48]	; 0x30
 8002064:	eb41 0303 	adc.w	r3, r1, r3
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
 800206a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800206e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8002072:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002076:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800207a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800207e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <BME280_ReadTemperatureAndPressureAndHuminidity+0x318>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	2200      	movs	r2, #0
 800208a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800208e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002092:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002096:	462b      	mov	r3, r5
 8002098:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800209c:	4642      	mov	r2, r8
 800209e:	fb02 f203 	mul.w	r2, r2, r3
 80020a2:	464b      	mov	r3, r9
 80020a4:	4621      	mov	r1, r4
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	4622      	mov	r2, r4
 80020ae:	4641      	mov	r1, r8
 80020b0:	fba2 1201 	umull	r1, r2, r2, r1
 80020b4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020b8:	460a      	mov	r2, r1
 80020ba:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80020be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020c2:	4413      	add	r3, r2
 80020c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020d4:	4629      	mov	r1, r5
 80020d6:	104a      	asrs	r2, r1, #1
 80020d8:	4629      	mov	r1, r5
 80020da:	17cb      	asrs	r3, r1, #31
 80020dc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

	if (var1 == 0) {
 80020e0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80020e4:	4313      	orrs	r3, r2
 80020e6:	d111      	bne.n	800210c <BME280_ReadTemperatureAndPressureAndHuminidity+0x31c>
		return 0;  // avoid exception caused by division by zero
 80020e8:	2300      	movs	r3, #0
 80020ea:	e1e0      	b.n	80024ae <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>
 80020ec:	c2c60000 	.word	0xc2c60000
 80020f0:	20000634 	.word	0x20000634
 80020f4:	20000620 	.word	0x20000620
 80020f8:	2000061e 	.word	0x2000061e
 80020fc:	2000061c 	.word	0x2000061c
 8002100:	2000061a 	.word	0x2000061a
 8002104:	20000618 	.word	0x20000618
 8002108:	20000630 	.word	0x20000630
	}
	p = 1048576 - adc_P;
 800210c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002110:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002114:	17da      	asrs	r2, r3, #31
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800211a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800211e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	p = (((p<<31) - var2)*3125) / var1;
 8002122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002126:	105b      	asrs	r3, r3, #1
 8002128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800212c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002130:	07db      	lsls	r3, r3, #31
 8002132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002136:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800213a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800213e:	4621      	mov	r1, r4
 8002140:	1a89      	subs	r1, r1, r2
 8002142:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002146:	4629      	mov	r1, r5
 8002148:	eb61 0303 	sbc.w	r3, r1, r3
 800214c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002150:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002154:	4622      	mov	r2, r4
 8002156:	462b      	mov	r3, r5
 8002158:	1891      	adds	r1, r2, r2
 800215a:	6239      	str	r1, [r7, #32]
 800215c:	415b      	adcs	r3, r3
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002164:	4621      	mov	r1, r4
 8002166:	1851      	adds	r1, r2, r1
 8002168:	61b9      	str	r1, [r7, #24]
 800216a:	4629      	mov	r1, r5
 800216c:	414b      	adcs	r3, r1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800217c:	4649      	mov	r1, r9
 800217e:	018b      	lsls	r3, r1, #6
 8002180:	4641      	mov	r1, r8
 8002182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002186:	4641      	mov	r1, r8
 8002188:	018a      	lsls	r2, r1, #6
 800218a:	4641      	mov	r1, r8
 800218c:	1889      	adds	r1, r1, r2
 800218e:	6139      	str	r1, [r7, #16]
 8002190:	4649      	mov	r1, r9
 8002192:	eb43 0101 	adc.w	r1, r3, r1
 8002196:	6179      	str	r1, [r7, #20]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80021a4:	4649      	mov	r1, r9
 80021a6:	008b      	lsls	r3, r1, #2
 80021a8:	4641      	mov	r1, r8
 80021aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ae:	4641      	mov	r1, r8
 80021b0:	008a      	lsls	r2, r1, #2
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	4622      	mov	r2, r4
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	460b      	mov	r3, r1
 80021c0:	462a      	mov	r2, r5
 80021c2:	eb42 0303 	adc.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80021d4:	4649      	mov	r1, r9
 80021d6:	008b      	lsls	r3, r1, #2
 80021d8:	4641      	mov	r1, r8
 80021da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021de:	4641      	mov	r1, r8
 80021e0:	008a      	lsls	r2, r1, #2
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	4622      	mov	r2, r4
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ee:	462b      	mov	r3, r5
 80021f0:	460a      	mov	r2, r1
 80021f2:	eb42 0303 	adc.w	r3, r2, r3
 80021f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021f8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80021fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002200:	f7fe fcfa 	bl	8000bf8 <__aeabi_ldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 800220c:	4bab      	ldr	r3, [pc, #684]	; (80024bc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6cc>)
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	b21b      	sxth	r3, r3
 8002214:	17da      	asrs	r2, r3, #31
 8002216:	673b      	str	r3, [r7, #112]	; 0x70
 8002218:	677a      	str	r2, [r7, #116]	; 0x74
 800221a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0b50      	lsrs	r0, r2, #13
 8002228:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800222c:	1359      	asrs	r1, r3, #13
 800222e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002232:	462b      	mov	r3, r5
 8002234:	fb00 f203 	mul.w	r2, r0, r3
 8002238:	4623      	mov	r3, r4
 800223a:	fb03 f301 	mul.w	r3, r3, r1
 800223e:	4413      	add	r3, r2
 8002240:	4622      	mov	r2, r4
 8002242:	fba2 1200 	umull	r1, r2, r2, r0
 8002246:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800224a:	460a      	mov	r2, r1
 800224c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002250:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002254:	4413      	add	r3, r2
 8002256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800225a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800225e:	f04f 0000 	mov.w	r0, #0
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	0b50      	lsrs	r0, r2, #13
 8002268:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800226c:	1359      	asrs	r1, r3, #13
 800226e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002272:	462b      	mov	r3, r5
 8002274:	fb00 f203 	mul.w	r2, r0, r3
 8002278:	4623      	mov	r3, r4
 800227a:	fb03 f301 	mul.w	r3, r3, r1
 800227e:	4413      	add	r3, r2
 8002280:	4622      	mov	r2, r4
 8002282:	fba2 1200 	umull	r1, r2, r2, r0
 8002286:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800228a:	460a      	mov	r2, r1
 800228c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002294:	4413      	add	r3, r2
 8002296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80022a6:	4621      	mov	r1, r4
 80022a8:	0e4a      	lsrs	r2, r1, #25
 80022aa:	4629      	mov	r1, r5
 80022ac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80022b0:	4629      	mov	r1, r5
 80022b2:	164b      	asrs	r3, r1, #25
 80022b4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = (((int64_t)p8) * p) >> 19;
 80022b8:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d0>)
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	b21b      	sxth	r3, r3
 80022c0:	17da      	asrs	r2, r3, #31
 80022c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80022c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022ca:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80022ce:	462a      	mov	r2, r5
 80022d0:	fb02 f203 	mul.w	r2, r2, r3
 80022d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022d8:	4621      	mov	r1, r4
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80022e4:	4621      	mov	r1, r4
 80022e6:	fba2 1201 	umull	r1, r2, r2, r1
 80022ea:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022ee:	460a      	mov	r2, r1
 80022f0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80022f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022f8:	4413      	add	r3, r2
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800230a:	4621      	mov	r1, r4
 800230c:	0cca      	lsrs	r2, r1, #19
 800230e:	4629      	mov	r1, r5
 8002310:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002314:	4629      	mov	r1, r5
 8002316:	14cb      	asrs	r3, r1, #19
 8002318:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800231c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002320:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002324:	1884      	adds	r4, r0, r2
 8002326:	663c      	str	r4, [r7, #96]	; 0x60
 8002328:	eb41 0303 	adc.w	r3, r1, r3
 800232c:	667b      	str	r3, [r7, #100]	; 0x64
 800232e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002332:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002336:	4621      	mov	r1, r4
 8002338:	1889      	adds	r1, r1, r2
 800233a:	65b9      	str	r1, [r7, #88]	; 0x58
 800233c:	4629      	mov	r1, r5
 800233e:	eb43 0101 	adc.w	r1, r3, r1
 8002342:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f04f 0100 	mov.w	r1, #0
 800234c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002350:	4623      	mov	r3, r4
 8002352:	0a18      	lsrs	r0, r3, #8
 8002354:	462b      	mov	r3, r5
 8002356:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800235a:	462b      	mov	r3, r5
 800235c:	1219      	asrs	r1, r3, #8
 800235e:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d4>)
 8002360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002364:	b21b      	sxth	r3, r3
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
 800236a:	657a      	str	r2, [r7, #84]	; 0x54
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002378:	464c      	mov	r4, r9
 800237a:	0123      	lsls	r3, r4, #4
 800237c:	4644      	mov	r4, r8
 800237e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002382:	4644      	mov	r4, r8
 8002384:	0122      	lsls	r2, r4, #4
 8002386:	1884      	adds	r4, r0, r2
 8002388:	603c      	str	r4, [r7, #0]
 800238a:	eb41 0303 	adc.w	r3, r1, r3
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002394:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	*pressure = (int32_t)p/256;
 8002398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800239c:	2b00      	cmp	r3, #0
 800239e:	da00      	bge.n	80023a2 <BME280_ReadTemperatureAndPressureAndHuminidity+0x5b2>
 80023a0:	33ff      	adds	r3, #255	; 0xff
 80023a2:	121b      	asrs	r3, r3, #8
 80023a4:	461a      	mov	r2, r3
 80023a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023aa:	601a      	str	r2, [r3, #0]

	// Pressure section
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 80023ac:	20fd      	movs	r0, #253	; 0xfd
 80023ae:	f7ff fa87 	bl	80018c0 <BME280_Read16>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80023b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d101      	bne.n	80023c6 <BME280_ReadTemperatureAndPressureAndHuminidity+0x5d6>
		return -1; //error
 80023c2:	23ff      	movs	r3, #255	; 0xff
 80023c4:	e073      	b.n	80024ae <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80023ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80023d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023d6:	039a      	lsls	r2, r3, #14
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6dc>)
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	051b      	lsls	r3, r3, #20
 80023e0:	1ad2      	subs	r2, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e0>)
 80023e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80023f2:	1ad3      	subs	r3, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80023f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80023f8:	13db      	asrs	r3, r3, #15
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 80023fa:	4a36      	ldr	r2, [pc, #216]	; (80024d4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e4>)
 80023fc:	f992 2000 	ldrsb.w	r2, [r2]
 8002400:	4611      	mov	r1, r2
 8002402:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002406:	fb01 f202 	mul.w	r2, r1, r2
 800240a:	1292      	asrs	r2, r2, #10
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 800240c:	4932      	ldr	r1, [pc, #200]	; (80024d8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e8>)
 800240e:	7809      	ldrb	r1, [r1, #0]
 8002410:	4608      	mov	r0, r1
 8002412:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002416:	fb00 f101 	mul.w	r1, r0, r1
 800241a:	12c9      	asrs	r1, r1, #11
 800241c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 8002420:	fb01 f202 	mul.w	r2, r1, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002424:	1292      	asrs	r2, r2, #10
 8002426:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 800242a:	492c      	ldr	r1, [pc, #176]	; (80024dc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6ec>)
 800242c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002430:	fb01 f202 	mul.w	r2, r1, r2
 8002434:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002438:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002442:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002446:	13db      	asrs	r3, r3, #15
 8002448:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800244c:	13d2      	asrs	r2, r2, #15
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 8002454:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f0>)
 8002456:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002458:	fb02 f303 	mul.w	r3, r2, r3
							 ((int32_t)h1)) >> 4));
 800245c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800245e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8002468:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800246c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002470:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8002474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002478:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800247c:	bfa8      	it	ge
 800247e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002482:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float h = (v_x1_u32r>>12);
 8002486:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800248a:	131b      	asrs	r3, r3, #12
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002494:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
	*huminidity = h / 1024.0;
 8002498:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800249c:	eddf 6a11 	vldr	s13, [pc, #68]	; 80024e4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f4>
 80024a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a8:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ba:	bf00      	nop
 80024bc:	20000626 	.word	0x20000626
 80024c0:	20000624 	.word	0x20000624
 80024c4:	20000622 	.word	0x20000622
 80024c8:	20000634 	.word	0x20000634
 80024cc:	2000062a 	.word	0x2000062a
 80024d0:	2000062c 	.word	0x2000062c
 80024d4:	20000612 	.word	0x20000612
 80024d8:	20000611 	.word	0x20000611
 80024dc:	20000628 	.word	0x20000628
 80024e0:	20000610 	.word	0x20000610
 80024e4:	44800000 	.word	0x44800000

080024e8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <MX_DMA_Init+0x8c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <MX_DMA_Init+0x8c>)
 80024f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <MX_DMA_Init+0x8c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <MX_DMA_Init+0x90>)
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <MX_DMA_Init+0x94>)
 800250e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <MX_DMA_Init+0x90>)
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_DMA_Init+0x90>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <MX_DMA_Init+0x90>)
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_DMA_Init+0x90>)
 8002526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_DMA_Init+0x90>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_DMA_Init+0x90>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_DMA_Init+0x90>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_DMA_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_DMA_Init+0x90>)
 8002546:	2204      	movs	r2, #4
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_DMA_Init+0x90>)
 800254c:	2203      	movs	r2, #3
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_DMA_Init+0x90>)
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_DMA_Init+0x90>)
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <MX_DMA_Init+0x90>)
 800255e:	f003 f9af 	bl	80058c0 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8002568:	f001 f834 	bl	80035d4 <Error_Handler>
  }

}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	20000638 	.word	0x20000638
 800257c:	40026410 	.word	0x40026410

08002580 <drv8835_mode_control>:
#include "stm32f4xx_hal_tim.h"



void drv8835_mode_control(DRV8835_Mode mode)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	if(mode == Phase_Enable_Mode)
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <drv8835_mode_control+0x1c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 8002590:	2201      	movs	r2, #1
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <drv8835_mode_control+0x34>)
 8002596:	f003 fc8f 	bl	8005eb8 <HAL_GPIO_WritePin>
	else if(mode == In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 800259a:	e007      	b.n	80025ac <drv8835_mode_control+0x2c>
	else if(mode == In_In_Mode)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <drv8835_mode_control+0x2c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <drv8835_mode_control+0x34>)
 80025a8:	f003 fc86 	bl	8005eb8 <HAL_GPIO_WritePin>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020000 	.word	0x40020000

080025b8 <drv8835_set_motorA_direction>:

void drv8835_set_motorA_direction(DRV8835_Direction dir)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
	if(dir == CW)
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <drv8835_set_motorA_direction+0x1c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <drv8835_set_motorA_direction+0x34>)
 80025ce:	f003 fc73 	bl	8005eb8 <HAL_GPIO_WritePin>
	else if(dir == CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 80025d2:	e007      	b.n	80025e4 <drv8835_set_motorA_direction+0x2c>
	else if(dir == CCW)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d104      	bne.n	80025e4 <drv8835_set_motorA_direction+0x2c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2140      	movs	r1, #64	; 0x40
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <drv8835_set_motorA_direction+0x34>)
 80025e0:	f003 fc6a 	bl	8005eb8 <HAL_GPIO_WritePin>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020400 	.word	0x40020400

080025f0 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint8_t speed)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
	if(speed >= htim3.Instance->ARR)
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <drv8835_set_motorA_speed+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	429a      	cmp	r2, r3
 8002604:	d303      	bcc.n	800260e <drv8835_set_motorA_speed+0x1e>
		speed = htim3.Instance->ARR;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <drv8835_set_motorA_speed+0x34>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <drv8835_set_motorA_speed+0x34>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200007d4 	.word	0x200007d4

08002628 <drv8835_init>:

void drv8835_init()
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	drv8835_mode_control(Phase_Enable_Mode);
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff ffa7 	bl	8002580 <drv8835_mode_control>
	drv8835_set_motorA_direction(CCW);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff ffc0 	bl	80025b8 <drv8835_set_motorA_direction>
	drv8835_set_motorA_speed(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ffd9 	bl	80025f0 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800263e:	2100      	movs	r1, #0
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <drv8835_init+0x24>)
 8002642:	f006 fb75 	bl	8008d30 <HAL_TIM_PWM_Start>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200007d4 	.word	0x200007d4

08002650 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8002654:	4878      	ldr	r0, [pc, #480]	; (8002838 <MX_FREERTOS_Init+0x1e8>)
 8002656:	f008 f97c 	bl	800a952 <osMutexNew>
 800265a:	4603      	mov	r3, r0
 800265c:	4a77      	ldr	r2, [pc, #476]	; (800283c <MX_FREERTOS_Init+0x1ec>)
 800265e:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 8002660:	4877      	ldr	r0, [pc, #476]	; (8002840 <MX_FREERTOS_Init+0x1f0>)
 8002662:	f008 f976 	bl	800a952 <osMutexNew>
 8002666:	4603      	mov	r3, r0
 8002668:	4a76      	ldr	r2, [pc, #472]	; (8002844 <MX_FREERTOS_Init+0x1f4>)
 800266a:	6013      	str	r3, [r2, #0]

  /* creation of MutexRTC */
  MutexRTCHandle = osMutexNew(&MutexRTC_attributes);
 800266c:	4876      	ldr	r0, [pc, #472]	; (8002848 <MX_FREERTOS_Init+0x1f8>)
 800266e:	f008 f970 	bl	800a952 <osMutexNew>
 8002672:	4603      	mov	r3, r0
 8002674:	4a75      	ldr	r2, [pc, #468]	; (800284c <MX_FREERTOS_Init+0x1fc>)
 8002676:	6013      	str	r3, [r2, #0]

  /* creation of MutexAlarm */
  MutexAlarmHandle = osMutexNew(&MutexAlarm_attributes);
 8002678:	4875      	ldr	r0, [pc, #468]	; (8002850 <MX_FREERTOS_Init+0x200>)
 800267a:	f008 f96a 	bl	800a952 <osMutexNew>
 800267e:	4603      	mov	r3, r0
 8002680:	4a74      	ldr	r2, [pc, #464]	; (8002854 <MX_FREERTOS_Init+0x204>)
 8002682:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 8002684:	4874      	ldr	r0, [pc, #464]	; (8002858 <MX_FREERTOS_Init+0x208>)
 8002686:	f008 f964 	bl	800a952 <osMutexNew>
 800268a:	4603      	mov	r3, r0
 800268c:	4a73      	ldr	r2, [pc, #460]	; (800285c <MX_FREERTOS_Init+0x20c>)
 800268e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemBme280 */
  BinarySemBme280Handle = osSemaphoreNew(1, 1, &BinarySemBme280_attributes);
 8002690:	4a73      	ldr	r2, [pc, #460]	; (8002860 <MX_FREERTOS_Init+0x210>)
 8002692:	2101      	movs	r1, #1
 8002694:	2001      	movs	r0, #1
 8002696:	f008 fa6a 	bl	800ab6e <osSemaphoreNew>
 800269a:	4603      	mov	r3, r0
 800269c:	4a71      	ldr	r2, [pc, #452]	; (8002864 <MX_FREERTOS_Init+0x214>)
 800269e:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemBH1750 */
  BinarySemBH1750Handle = osSemaphoreNew(1, 1, &BinarySemBH1750_attributes);
 80026a0:	4a71      	ldr	r2, [pc, #452]	; (8002868 <MX_FREERTOS_Init+0x218>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	2001      	movs	r0, #1
 80026a6:	f008 fa62 	bl	800ab6e <osSemaphoreNew>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4a6f      	ldr	r2, [pc, #444]	; (800286c <MX_FREERTOS_Init+0x21c>)
 80026ae:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemRTC */
  BinarySemRTCHandle = osSemaphoreNew(1, 1, &BinarySemRTC_attributes);
 80026b0:	4a6f      	ldr	r2, [pc, #444]	; (8002870 <MX_FREERTOS_Init+0x220>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	2001      	movs	r0, #1
 80026b6:	f008 fa5a 	bl	800ab6e <osSemaphoreNew>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a6d      	ldr	r2, [pc, #436]	; (8002874 <MX_FREERTOS_Init+0x224>)
 80026be:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCountUp */
  BinarySemCountUpHandle = osSemaphoreNew(1, 1, &BinarySemCountUp_attributes);
 80026c0:	4a6d      	ldr	r2, [pc, #436]	; (8002878 <MX_FREERTOS_Init+0x228>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2001      	movs	r0, #1
 80026c6:	f008 fa52 	bl	800ab6e <osSemaphoreNew>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a6b      	ldr	r2, [pc, #428]	; (800287c <MX_FREERTOS_Init+0x22c>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCountDown */
  BinarySemCountDownHandle = osSemaphoreNew(1, 1, &BinarySemCountDown_attributes);
 80026d0:	4a6b      	ldr	r2, [pc, #428]	; (8002880 <MX_FREERTOS_Init+0x230>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	2001      	movs	r0, #1
 80026d6:	f008 fa4a 	bl	800ab6e <osSemaphoreNew>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a69      	ldr	r2, [pc, #420]	; (8002884 <MX_FREERTOS_Init+0x234>)
 80026de:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemSetAlarm */
  BinarySemSetAlarmHandle = osSemaphoreNew(1, 1, &BinarySemSetAlarm_attributes);
 80026e0:	4a69      	ldr	r2, [pc, #420]	; (8002888 <MX_FREERTOS_Init+0x238>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	2001      	movs	r0, #1
 80026e6:	f008 fa42 	bl	800ab6e <osSemaphoreNew>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a67      	ldr	r2, [pc, #412]	; (800288c <MX_FREERTOS_Init+0x23c>)
 80026ee:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmeData */
  TimerBmeDataHandle = osTimerNew(CallbackTimerBmeData, osTimerPeriodic, NULL, &TimerBmeData_attributes);
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <MX_FREERTOS_Init+0x240>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	2101      	movs	r1, #1
 80026f6:	4867      	ldr	r0, [pc, #412]	; (8002894 <MX_FREERTOS_Init+0x244>)
 80026f8:	f008 f842 	bl	800a780 <osTimerNew>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a66      	ldr	r2, [pc, #408]	; (8002898 <MX_FREERTOS_Init+0x248>)
 8002700:	6013      	str	r3, [r2, #0]

  /* creation of TimerBh1750Data */
  TimerBh1750DataHandle = osTimerNew(CallbackTimerBh1750Data, osTimerPeriodic, NULL, &TimerBh1750Data_attributes);
 8002702:	4b66      	ldr	r3, [pc, #408]	; (800289c <MX_FREERTOS_Init+0x24c>)
 8002704:	2200      	movs	r2, #0
 8002706:	2101      	movs	r1, #1
 8002708:	4865      	ldr	r0, [pc, #404]	; (80028a0 <MX_FREERTOS_Init+0x250>)
 800270a:	f008 f839 	bl	800a780 <osTimerNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <MX_FREERTOS_Init+0x254>)
 8002712:	6013      	str	r3, [r2, #0]

  /* creation of TimerRTC */
  TimerRTCHandle = osTimerNew(CallbackTimerRTC, osTimerPeriodic, NULL, &TimerRTC_attributes);
 8002714:	4b64      	ldr	r3, [pc, #400]	; (80028a8 <MX_FREERTOS_Init+0x258>)
 8002716:	2200      	movs	r2, #0
 8002718:	2101      	movs	r1, #1
 800271a:	4864      	ldr	r0, [pc, #400]	; (80028ac <MX_FREERTOS_Init+0x25c>)
 800271c:	f008 f830 	bl	800a780 <osTimerNew>
 8002720:	4603      	mov	r3, r0
 8002722:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <MX_FREERTOS_Init+0x260>)
 8002724:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBme */
  QueueBmeHandle = osMessageQueueNew (16, sizeof(BmeData_t), &QueueBme_attributes);
 8002726:	4a63      	ldr	r2, [pc, #396]	; (80028b4 <MX_FREERTOS_Init+0x264>)
 8002728:	210c      	movs	r1, #12
 800272a:	2010      	movs	r0, #16
 800272c:	f008 fb3e 	bl	800adac <osMessageQueueNew>
 8002730:	4603      	mov	r3, r0
 8002732:	4a61      	ldr	r2, [pc, #388]	; (80028b8 <MX_FREERTOS_Init+0x268>)
 8002734:	6013      	str	r3, [r2, #0]

  /* creation of QueueBh1750 */
  QueueBh1750Handle = osMessageQueueNew (16, sizeof(BHData_t), &QueueBh1750_attributes);
 8002736:	4a61      	ldr	r2, [pc, #388]	; (80028bc <MX_FREERTOS_Init+0x26c>)
 8002738:	2104      	movs	r1, #4
 800273a:	2010      	movs	r0, #16
 800273c:	f008 fb36 	bl	800adac <osMessageQueueNew>
 8002740:	4603      	mov	r3, r0
 8002742:	4a5f      	ldr	r2, [pc, #380]	; (80028c0 <MX_FREERTOS_Init+0x270>)
 8002744:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCData */
  QueueRTCDataHandle = osMessageQueueNew (16, sizeof(RTC_DateTypeDef), &QueueRTCData_attributes);
 8002746:	4a5f      	ldr	r2, [pc, #380]	; (80028c4 <MX_FREERTOS_Init+0x274>)
 8002748:	2104      	movs	r1, #4
 800274a:	2010      	movs	r0, #16
 800274c:	f008 fb2e 	bl	800adac <osMessageQueueNew>
 8002750:	4603      	mov	r3, r0
 8002752:	4a5d      	ldr	r2, [pc, #372]	; (80028c8 <MX_FREERTOS_Init+0x278>)
 8002754:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCTime */
  QueueRTCTimeHandle = osMessageQueueNew (16, sizeof(RTC_TimeTypeDef), &QueueRTCTime_attributes);
 8002756:	4a5d      	ldr	r2, [pc, #372]	; (80028cc <MX_FREERTOS_Init+0x27c>)
 8002758:	2114      	movs	r1, #20
 800275a:	2010      	movs	r0, #16
 800275c:	f008 fb26 	bl	800adac <osMessageQueueNew>
 8002760:	4603      	mov	r3, r0
 8002762:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <MX_FREERTOS_Init+0x280>)
 8002764:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterPump */
  QueueCounterPumpHandle = osMessageQueueNew (2, sizeof(RTC_TimeTypeDef), &QueueCounterPump_attributes);
 8002766:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <MX_FREERTOS_Init+0x284>)
 8002768:	2114      	movs	r1, #20
 800276a:	2002      	movs	r0, #2
 800276c:	f008 fb1e 	bl	800adac <osMessageQueueNew>
 8002770:	4603      	mov	r3, r0
 8002772:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <MX_FREERTOS_Init+0x288>)
 8002774:	6013      	str	r3, [r2, #0]

  /* creation of QueueAlarm */
  QueueAlarmHandle = osMessageQueueNew (16, sizeof(RTC_TimeTypeDef), &QueueAlarm_attributes);
 8002776:	4a59      	ldr	r2, [pc, #356]	; (80028dc <MX_FREERTOS_Init+0x28c>)
 8002778:	2114      	movs	r1, #20
 800277a:	2010      	movs	r0, #16
 800277c:	f008 fb16 	bl	800adac <osMessageQueueNew>
 8002780:	4603      	mov	r3, r0
 8002782:	4a57      	ldr	r2, [pc, #348]	; (80028e0 <MX_FREERTOS_Init+0x290>)
 8002784:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskRTC */
  TaskRTCHandle = osThreadNew(StartTaskRTC, NULL, &TaskRTC_attributes);
 8002786:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <MX_FREERTOS_Init+0x294>)
 8002788:	2100      	movs	r1, #0
 800278a:	4857      	ldr	r0, [pc, #348]	; (80028e8 <MX_FREERTOS_Init+0x298>)
 800278c:	f007 fdf6 	bl	800a37c <osThreadNew>
 8002790:	4603      	mov	r3, r0
 8002792:	4a56      	ldr	r2, [pc, #344]	; (80028ec <MX_FREERTOS_Init+0x29c>)
 8002794:	6013      	str	r3, [r2, #0]

  /* creation of TaskBme280 */
  TaskBme280Handle = osThreadNew(StartTaskBme280, NULL, &TaskBme280_attributes);
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <MX_FREERTOS_Init+0x2a0>)
 8002798:	2100      	movs	r1, #0
 800279a:	4856      	ldr	r0, [pc, #344]	; (80028f4 <MX_FREERTOS_Init+0x2a4>)
 800279c:	f007 fdee 	bl	800a37c <osThreadNew>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a55      	ldr	r2, [pc, #340]	; (80028f8 <MX_FREERTOS_Init+0x2a8>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* creation of TaskBH1750 */
  TaskBH1750Handle = osThreadNew(StartTaskBH1750, NULL, &TaskBH1750_attributes);
 80027a6:	4a55      	ldr	r2, [pc, #340]	; (80028fc <MX_FREERTOS_Init+0x2ac>)
 80027a8:	2100      	movs	r1, #0
 80027aa:	4855      	ldr	r0, [pc, #340]	; (8002900 <MX_FREERTOS_Init+0x2b0>)
 80027ac:	f007 fde6 	bl	800a37c <osThreadNew>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4a54      	ldr	r2, [pc, #336]	; (8002904 <MX_FREERTOS_Init+0x2b4>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* creation of TaskSSD1306 */
  TaskSSD1306Handle = osThreadNew(StartTaskSSD1306, NULL, &TaskSSD1306_attributes);
 80027b6:	4a54      	ldr	r2, [pc, #336]	; (8002908 <MX_FREERTOS_Init+0x2b8>)
 80027b8:	2100      	movs	r1, #0
 80027ba:	4854      	ldr	r0, [pc, #336]	; (800290c <MX_FREERTOS_Init+0x2bc>)
 80027bc:	f007 fdde 	bl	800a37c <osThreadNew>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a53      	ldr	r2, [pc, #332]	; (8002910 <MX_FREERTOS_Init+0x2c0>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpON */
  TaskPumpONHandle = osThreadNew(StartTaskPumpON, NULL, &TaskPumpON_attributes);
 80027c6:	4a53      	ldr	r2, [pc, #332]	; (8002914 <MX_FREERTOS_Init+0x2c4>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4853      	ldr	r0, [pc, #332]	; (8002918 <MX_FREERTOS_Init+0x2c8>)
 80027cc:	f007 fdd6 	bl	800a37c <osThreadNew>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a52      	ldr	r2, [pc, #328]	; (800291c <MX_FREERTOS_Init+0x2cc>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpOFF */
  TaskPumpOFFHandle = osThreadNew(StartTaskPumpOFF, NULL, &TaskPumpOFF_attributes);
 80027d6:	4a52      	ldr	r2, [pc, #328]	; (8002920 <MX_FREERTOS_Init+0x2d0>)
 80027d8:	2100      	movs	r1, #0
 80027da:	4852      	ldr	r0, [pc, #328]	; (8002924 <MX_FREERTOS_Init+0x2d4>)
 80027dc:	f007 fdce 	bl	800a37c <osThreadNew>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4a51      	ldr	r2, [pc, #324]	; (8002928 <MX_FREERTOS_Init+0x2d8>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterUp */
  TaskCounterUpHandle = osThreadNew(StartTaskCounterPumpUp, NULL, &TaskCounterUp_attributes);
 80027e6:	4a51      	ldr	r2, [pc, #324]	; (800292c <MX_FREERTOS_Init+0x2dc>)
 80027e8:	2100      	movs	r1, #0
 80027ea:	4851      	ldr	r0, [pc, #324]	; (8002930 <MX_FREERTOS_Init+0x2e0>)
 80027ec:	f007 fdc6 	bl	800a37c <osThreadNew>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a50      	ldr	r2, [pc, #320]	; (8002934 <MX_FREERTOS_Init+0x2e4>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterDown */
  TaskCounterDownHandle = osThreadNew(StartTaskCounterDown, NULL, &TaskCounterDown_attributes);
 80027f6:	4a50      	ldr	r2, [pc, #320]	; (8002938 <MX_FREERTOS_Init+0x2e8>)
 80027f8:	2100      	movs	r1, #0
 80027fa:	4850      	ldr	r0, [pc, #320]	; (800293c <MX_FREERTOS_Init+0x2ec>)
 80027fc:	f007 fdbe 	bl	800a37c <osThreadNew>
 8002800:	4603      	mov	r3, r0
 8002802:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <MX_FREERTOS_Init+0x2f0>)
 8002804:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCountU */
  TaskAlarmCountUHandle = osThreadNew(StartTaskAlarmCounterUp, NULL, &TaskAlarmCountU_attributes);
 8002806:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <MX_FREERTOS_Init+0x2f4>)
 8002808:	2100      	movs	r1, #0
 800280a:	484f      	ldr	r0, [pc, #316]	; (8002948 <MX_FREERTOS_Init+0x2f8>)
 800280c:	f007 fdb6 	bl	800a37c <osThreadNew>
 8002810:	4603      	mov	r3, r0
 8002812:	4a4e      	ldr	r2, [pc, #312]	; (800294c <MX_FREERTOS_Init+0x2fc>)
 8002814:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCountD */
  TaskAlarmCountDHandle = osThreadNew(StartTaskAlarmCountDown, NULL, &TaskAlarmCountD_attributes);
 8002816:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <MX_FREERTOS_Init+0x300>)
 8002818:	2100      	movs	r1, #0
 800281a:	484e      	ldr	r0, [pc, #312]	; (8002954 <MX_FREERTOS_Init+0x304>)
 800281c:	f007 fdae 	bl	800a37c <osThreadNew>
 8002820:	4603      	mov	r3, r0
 8002822:	4a4d      	ldr	r2, [pc, #308]	; (8002958 <MX_FREERTOS_Init+0x308>)
 8002824:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of PumpDispensing */
  PumpDispensingHandle = osEventFlagsNew(&PumpDispensing_attributes);
 8002826:	484d      	ldr	r0, [pc, #308]	; (800295c <MX_FREERTOS_Init+0x30c>)
 8002828:	f008 f854 	bl	800a8d4 <osEventFlagsNew>
 800282c:	4603      	mov	r3, r0
 800282e:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <MX_FREERTOS_Init+0x310>)
 8002830:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	08011a78 	.word	0x08011a78
 800283c:	200006e4 	.word	0x200006e4
 8002840:	08011a88 	.word	0x08011a88
 8002844:	200006e8 	.word	0x200006e8
 8002848:	08011a98 	.word	0x08011a98
 800284c:	200006ec 	.word	0x200006ec
 8002850:	08011aa8 	.word	0x08011aa8
 8002854:	200006f0 	.word	0x200006f0
 8002858:	08011ab8 	.word	0x08011ab8
 800285c:	200006f4 	.word	0x200006f4
 8002860:	08011ac8 	.word	0x08011ac8
 8002864:	200006f8 	.word	0x200006f8
 8002868:	08011ad8 	.word	0x08011ad8
 800286c:	200006fc 	.word	0x200006fc
 8002870:	08011ae8 	.word	0x08011ae8
 8002874:	20000700 	.word	0x20000700
 8002878:	08011af8 	.word	0x08011af8
 800287c:	20000704 	.word	0x20000704
 8002880:	08011b08 	.word	0x08011b08
 8002884:	20000708 	.word	0x20000708
 8002888:	08011b18 	.word	0x08011b18
 800288c:	2000070c 	.word	0x2000070c
 8002890:	08011a48 	.word	0x08011a48
 8002894:	08003215 	.word	0x08003215
 8002898:	200006d8 	.word	0x200006d8
 800289c:	08011a58 	.word	0x08011a58
 80028a0:	08003235 	.word	0x08003235
 80028a4:	200006dc 	.word	0x200006dc
 80028a8:	08011a68 	.word	0x08011a68
 80028ac:	08003255 	.word	0x08003255
 80028b0:	200006e0 	.word	0x200006e0
 80028b4:	080119b8 	.word	0x080119b8
 80028b8:	200006c0 	.word	0x200006c0
 80028bc:	080119d0 	.word	0x080119d0
 80028c0:	200006c4 	.word	0x200006c4
 80028c4:	080119e8 	.word	0x080119e8
 80028c8:	200006c8 	.word	0x200006c8
 80028cc:	08011a00 	.word	0x08011a00
 80028d0:	200006cc 	.word	0x200006cc
 80028d4:	08011a18 	.word	0x08011a18
 80028d8:	200006d0 	.word	0x200006d0
 80028dc:	08011a30 	.word	0x08011a30
 80028e0:	200006d4 	.word	0x200006d4
 80028e4:	08011850 	.word	0x08011850
 80028e8:	08002965 	.word	0x08002965
 80028ec:	20000698 	.word	0x20000698
 80028f0:	08011874 	.word	0x08011874
 80028f4:	08002ba1 	.word	0x08002ba1
 80028f8:	2000069c 	.word	0x2000069c
 80028fc:	08011898 	.word	0x08011898
 8002900:	08002c89 	.word	0x08002c89
 8002904:	200006a0 	.word	0x200006a0
 8002908:	080118bc 	.word	0x080118bc
 800290c:	08002d51 	.word	0x08002d51
 8002910:	200006a4 	.word	0x200006a4
 8002914:	080118e0 	.word	0x080118e0
 8002918:	08002f89 	.word	0x08002f89
 800291c:	200006a8 	.word	0x200006a8
 8002920:	08011904 	.word	0x08011904
 8002924:	08002faf 	.word	0x08002faf
 8002928:	200006ac 	.word	0x200006ac
 800292c:	08011928 	.word	0x08011928
 8002930:	08002fcd 	.word	0x08002fcd
 8002934:	200006b0 	.word	0x200006b0
 8002938:	0801194c 	.word	0x0801194c
 800293c:	0800307d 	.word	0x0800307d
 8002940:	200006b4 	.word	0x200006b4
 8002944:	08011970 	.word	0x08011970
 8002948:	080030fd 	.word	0x080030fd
 800294c:	200006b8 	.word	0x200006b8
 8002950:	08011994 	.word	0x08011994
 8002954:	08003185 	.word	0x08003185
 8002958:	200006bc 	.word	0x200006bc
 800295c:	08011b28 	.word	0x08011b28
 8002960:	20000710 	.word	0x20000710

08002964 <StartTaskRTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskRTC */
void StartTaskRTC(void *argument)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0a4      	sub	sp, #144	; 0x90
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	 	 RTC_TimeTypeDef _RTCTime, _AlarmPeriod;
	 	 RTC_DateTypeDef _RTCDate;
	 	 RTC_AlarmTypeDef _AlarmON, _AlarmOFF;


	 	uint8_t _PumpDispensing = 1;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]





	 	_AlarmPeriod.Hours = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	 	_AlarmPeriod.Minutes = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	 	_AlarmPeriod.Seconds = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	 	 _AlarmON.AlarmTime.Hours = 8 ;
 8002982:	2308      	movs	r3, #8
 8002984:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	 	 _AlarmON.AlarmTime.Minutes = 0 ;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	 	_AlarmON.AlarmTime.Seconds = 0 ;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a


		 _AlarmOFF.AlarmTime.Hours = 8 ;
 8002994:	2308      	movs	r3, #8
 8002996:	743b      	strb	r3, [r7, #16]
		 _AlarmOFF.AlarmTime.Minutes = 1 ;
 8002998:	2301      	movs	r3, #1
 800299a:	747b      	strb	r3, [r7, #17]
		_AlarmOFF.AlarmTime.Seconds = 0 ;
 800299c:	2300      	movs	r3, #0
 800299e:	74bb      	strb	r3, [r7, #18]




	 	HAL_RTC_Init(&hrtc);
 80029a0:	4873      	ldr	r0, [pc, #460]	; (8002b70 <StartTaskRTC+0x20c>)
 80029a2:	f005 fc91 	bl	80082c8 <HAL_RTC_Init>
		HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 80029a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029aa:	2200      	movs	r2, #0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4870      	ldr	r0, [pc, #448]	; (8002b70 <StartTaskRTC+0x20c>)
 80029b0:	f005 fe7c 	bl	80086ac <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 80029b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029b8:	2200      	movs	r2, #0
 80029ba:	4619      	mov	r1, r3
 80029bc:	486c      	ldr	r0, [pc, #432]	; (8002b70 <StartTaskRTC+0x20c>)
 80029be:	f005 fd93 	bl	80084e8 <HAL_RTC_GetTime>

		HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 80029c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	4869      	ldr	r0, [pc, #420]	; (8002b70 <StartTaskRTC+0x20c>)
 80029cc:	f005 febd 	bl	800874a <HAL_RTC_SetAlarm>
		HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	4619      	mov	r1, r3
 80029d8:	4865      	ldr	r0, [pc, #404]	; (8002b70 <StartTaskRTC+0x20c>)
 80029da:	f005 feb6 	bl	800874a <HAL_RTC_SetAlarm>
	//    _RTCTime.Minutes =0x0;
	//	_RTCTime.Seconds =0x0;
	// 	HAL_RTC_SetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
	// 	HAL_RTC_SetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);

		osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <StartTaskRTC+0x210>)
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	2200      	movs	r2, #0
 80029ec:	f008 fa52 	bl	800ae94 <osMessageQueuePut>
		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <StartTaskRTC+0x214>)
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	f107 010f 	add.w	r1, r7, #15
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	2200      	movs	r2, #0
 80029fe:	f008 fa49 	bl	800ae94 <osMessageQueuePut>
	 	osTimerStart(TimerRTCHandle, 100);
 8002a02:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <StartTaskRTC+0x218>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2164      	movs	r1, #100	; 0x64
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 ff35 	bl	800a878 <osTimerStart>
	 	uint32_t tick4 = osKernelGetTickCount();
 8002a0e:	f007 fc97 	bl	800a340 <osKernelGetTickCount>
 8002a12:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  for(;;)
  {
	  //	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 10);
	  //	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod, 0, 10);

	  	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002a16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4854      	ldr	r0, [pc, #336]	; (8002b70 <StartTaskRTC+0x20c>)
 8002a20:	f005 fe44 	bl	80086ac <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 8002a24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4850      	ldr	r0, [pc, #320]	; (8002b70 <StartTaskRTC+0x20c>)
 8002a2e:	f005 fd5b 	bl	80084e8 <HAL_RTC_GetTime>

	  	if (osOK == osSemaphoreAcquire(BinarySemCountUpHandle, 0))
 8002a32:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <StartTaskRTC+0x21c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f008 f921 	bl	800ac80 <osSemaphoreAcquire>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <StartTaskRTC+0xf6>
	  	{
	  		osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <StartTaskRTC+0x214>)
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	f107 010f 	add.w	r1, r7, #15
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	2200      	movs	r2, #0
 8002a52:	f008 fa7f 	bl	800af54 <osMessageQueueGet>
	  		_AlarmOFF.AlarmTime.Minutes = _PumpDispensing;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	747b      	strb	r3, [r7, #17]
	  //			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
	  //		}



	  	   if (_AlarmON.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmON.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002a5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a5e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d131      	bne.n	8002aca <StartTaskRTC+0x166>
 8002a66:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002a6a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d12b      	bne.n	8002aca <StartTaskRTC+0x166>
	  	  	  {
	  		  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <StartTaskRTC+0x220>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 ffef 	bl	800aa5e <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	2120      	movs	r1, #32
 8002a84:	4840      	ldr	r0, [pc, #256]	; (8002b88 <StartTaskRTC+0x224>)
 8002a86:	f003 fa17 	bl	8005eb8 <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpONHandle, 0x00000001U);
 8002a8a:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <StartTaskRTC+0x228>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f007 fd25 	bl	800a4e0 <osThreadFlagsSet>
	  			  _AlarmON.AlarmTime.Hours = _AlarmON.AlarmTime.Hours + 1;
 8002a96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	  			  if(_AlarmON.AlarmTime.Hours == 24)
 8002aa2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002aa6:	2b18      	cmp	r3, #24
 8002aa8:	d102      	bne.n	8002ab0 <StartTaskRTC+0x14c>
	  				  {
	  					  _AlarmON.AlarmTime.Hours = 8;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	  				  }
	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 8002ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	482d      	ldr	r0, [pc, #180]	; (8002b70 <StartTaskRTC+0x20c>)
 8002aba:	f005 fe46 	bl	800874a <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <StartTaskRTC+0x220>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f008 f816 	bl	800aaf4 <osMutexRelease>
 8002ac8:	e02b      	b.n	8002b22 <StartTaskRTC+0x1be>
	  	  	  }
	  	  else if(_AlarmOFF.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmOFF.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002aca:	7c3a      	ldrb	r2, [r7, #16]
 8002acc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d126      	bne.n	8002b22 <StartTaskRTC+0x1be>
 8002ad4:	7c7a      	ldrb	r2, [r7, #17]
 8002ad6:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d121      	bne.n	8002b22 <StartTaskRTC+0x1be>
	  	  	  {
	  		  	  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <StartTaskRTC+0x220>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f007 ffb9 	bl	800aa5e <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2120      	movs	r1, #32
 8002af0:	4825      	ldr	r0, [pc, #148]	; (8002b88 <StartTaskRTC+0x224>)
 8002af2:	f003 f9e1 	bl	8005eb8 <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpOFFHandle, 0x00000010U);
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <StartTaskRTC+0x22c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2110      	movs	r1, #16
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 fcef 	bl	800a4e0 <osThreadFlagsSet>

	  			  _AlarmOFF.AlarmTime.Hours = _AlarmOFF.AlarmTime.Hours + 1;
 8002b02:	7c3b      	ldrb	r3, [r7, #16]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	743b      	strb	r3, [r7, #16]
	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002b0a:	f107 0310 	add.w	r3, r7, #16
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4817      	ldr	r0, [pc, #92]	; (8002b70 <StartTaskRTC+0x20c>)
 8002b14:	f005 fe19 	bl	800874a <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <StartTaskRTC+0x220>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f007 ffe9 	bl	800aaf4 <osMutexRelease>
	  //	  {
	  //
	  //
	  //		  CompareSeconds = RTCTime.Seconds;
	  //	  }
	  	  if (osOK == osSemaphoreAcquire(BinarySemRTCHandle, 0)) {
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <StartTaskRTC+0x230>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f008 f8a9 	bl	800ac80 <osSemaphoreAcquire>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <StartTaskRTC+0x1e2>
	  //	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
	  	  	  			osMessageQueuePut(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <StartTaskRTC+0x234>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b40:	2200      	movs	r2, #0
 8002b42:	f008 f9a7 	bl	800ae94 <osMessageQueuePut>
	  	  	  		}

	  	  tick4 += ((70 * osKernelGetTickFreq()) / 1000);
 8002b46:	f007 fc10 	bl	800a36a <osKernelGetTickFreq>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2246      	movs	r2, #70	; 0x46
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <StartTaskRTC+0x238>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002b5e:	4413      	add	r3, r2
 8002b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  	  osDelayUntil(tick4);
 8002b64:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002b68:	f007 fdc7 	bl	800a6fa <osDelayUntil>
	  	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002b6c:	e753      	b.n	8002a16 <StartTaskRTC+0xb2>
 8002b6e:	bf00      	nop
 8002b70:	20000768 	.word	0x20000768
 8002b74:	200006d4 	.word	0x200006d4
 8002b78:	200006d0 	.word	0x200006d0
 8002b7c:	200006e0 	.word	0x200006e0
 8002b80:	20000704 	.word	0x20000704
 8002b84:	200006f0 	.word	0x200006f0
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	200006a8 	.word	0x200006a8
 8002b90:	200006ac 	.word	0x200006ac
 8002b94:	20000700 	.word	0x20000700
 8002b98:	200006cc 	.word	0x200006cc
 8002b9c:	10624dd3 	.word	0x10624dd3

08002ba0 <StartTaskBme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBme280 */
void StartTaskBme280(void *argument)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBme280 */
	BmeData_t _BmeData;
		uint32_t tick3;
		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <StartTaskBme280+0xcc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f007 ff54 	bl	800aa5e <osMutexAcquire>
		BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER,
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2303      	movs	r3, #3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	482b      	ldr	r0, [pc, #172]	; (8002c70 <StartTaskBme280+0xd0>)
 8002bc2:	f7fe ff2b 	bl	8001a1c <BME280_Init>
		BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
		BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2006      	movs	r0, #6
 8002bca:	f7fe ff07 	bl	80019dc <BME280_SetConfig>
		osMutexRelease(MutexI2CHandle);
 8002bce:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <StartTaskBme280+0xcc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 ff8e 	bl	800aaf4 <osMutexRelease>
		osTimerStart(TimerBmeDataHandle, 100);
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <StartTaskBme280+0xd4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2164      	movs	r1, #100	; 0x64
 8002bde:	4618      	mov	r0, r3
 8002be0:	f007 fe4a 	bl	800a878 <osTimerStart>

		tick3 = osKernelGetTickCount();
 8002be4:	f007 fbac 	bl	800a340 <osKernelGetTickCount>
 8002be8:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <StartTaskBme280+0xcc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f007 ff33 	bl	800aa5e <osMutexAcquire>
	  	  BME280_ReadTemperatureAndPressureAndHuminidity(&_BmeData.Temperature,
 8002bf8:	f107 0208 	add.w	r2, r7, #8
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	f103 0108 	add.w	r1, r3, #8
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f8f0 	bl	8001df0 <BME280_ReadTemperatureAndPressureAndHuminidity>
	  	  				&_BmeData.Pressure, &_BmeData.Humidity);
	  	  osMutexRelease(MutexI2CHandle);
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <StartTaskBme280+0xcc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f007 ff6d 	bl	800aaf4 <osMutexRelease>

	  	  if (osOK == osSemaphoreAcquire(BinarySemBme280Handle, 0)) {
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <StartTaskBme280+0xd8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f008 f82d 	bl	800ac80 <osSemaphoreAcquire>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d108      	bne.n	8002c3e <StartTaskBme280+0x9e>
	  	  			osMessageQueuePut(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <StartTaskBme280+0xdc>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	f107 0108 	add.w	r1, r7, #8
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f008 f92b 	bl	800ae94 <osMessageQueuePut>
	  	  		}
	  		printf("TASK BME280 \n\r ");
 8002c3e:	4810      	ldr	r0, [pc, #64]	; (8002c80 <StartTaskBme280+0xe0>)
 8002c40:	f002 f934 	bl	8004eac <printf_>
	  //	  printf("Temperature: %.2f, Humidity: %.2f z \n\r", _BmeData.Temperature, _BmeData.Humidity);
	  //////    osDelay(100);
	  		tick3 += (75 * osKernelGetTickFreq()) / 1000;
 8002c44:	f007 fb91 	bl	800a36a <osKernelGetTickFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	011a      	lsls	r2, r3, #4
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <StartTaskBme280+0xe4>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4413      	add	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
	  		osDelayUntil(tick3);
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f007 fd49 	bl	800a6fa <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002c68:	e7bf      	b.n	8002bea <StartTaskBme280+0x4a>
 8002c6a:	bf00      	nop
 8002c6c:	200006e8 	.word	0x200006e8
 8002c70:	20000714 	.word	0x20000714
 8002c74:	200006d8 	.word	0x200006d8
 8002c78:	200006f8 	.word	0x200006f8
 8002c7c:	200006c0 	.word	0x200006c0
 8002c80:	08011598 	.word	0x08011598
 8002c84:	10624dd3 	.word	0x10624dd3

08002c88 <StartTaskBH1750>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBH1750 */
void StartTaskBH1750(void *argument)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	uint32_t tick4;
		BHData_t _BHData;

		//	float BH1750_lux;

		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <StartTaskBH1750+0xac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f007 fee0 	bl	800aa5e <osMutexAcquire>
		BH1750_Init(&hi2c1);
 8002c9e:	4826      	ldr	r0, [pc, #152]	; (8002d38 <StartTaskBH1750+0xb0>)
 8002ca0:	f7fe fce0 	bl	8001664 <BH1750_Init>
		BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8002ca4:	2011      	movs	r0, #17
 8002ca6:	f7fe fd13 	bl	80016d0 <BH1750_SetMode>
		osMutexRelease(MutexI2CHandle);
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <StartTaskBH1750+0xac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f007 ff20 	bl	800aaf4 <osMutexRelease>

		osTimerStart(TimerBh1750DataHandle, 100);
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <StartTaskBH1750+0xb4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2164      	movs	r1, #100	; 0x64
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f007 fddc 	bl	800a878 <osTimerStart>
		tick4 = osKernelGetTickCount();
 8002cc0:	f007 fb3e 	bl	800a340 <osKernelGetTickCount>
 8002cc4:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <StartTaskBH1750+0xac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f04f 31ff 	mov.w	r1, #4294967295
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f007 fec5 	bl	800aa5e <osMutexAcquire>

	 	  		BH1750_ReadLight(&_BHData.LightIntensity);
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fd79 	bl	80017d0 <BH1750_ReadLight>
	 	  //	  	  printf("Light: %.2f \n\r", _BhData.LightIntensity);
	 	  		osMutexRelease(MutexI2CHandle);
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <StartTaskBH1750+0xac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f007 ff06 	bl	800aaf4 <osMutexRelease>

	 	  		if (osOK == osSemaphoreAcquire(BinarySemBH1750Handle, 0)) {
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <StartTaskBH1750+0xb8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f007 ffc6 	bl	800ac80 <osSemaphoreAcquire>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <StartTaskBH1750+0x84>
	 	  			osMessageQueuePut(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <StartTaskBH1750+0xbc>)
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f107 0108 	add.w	r1, r7, #8
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	2200      	movs	r2, #0
 8002d08:	f008 f8c4 	bl	800ae94 <osMessageQueuePut>
	 	  //	  	 	  if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
	 	  //	  	 	  	  {
	 	  //	  	 	  		  size = sprintf(buffer, "BH1750 Lux: %.2f\n\r", BH1750_lux);
	 	  //	  	 	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
	 	  //	  	 	  	  }
	 	  		printf("TASK BH1750 \n\r ");
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <StartTaskBH1750+0xc0>)
 8002d0e:	f002 f8cd 	bl	8004eac <printf_>
	 	  		tick4 += ((65 * osKernelGetTickFreq()) / 1000);
 8002d12:	f007 fb2a 	bl	800a36a <osKernelGetTickFreq>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4613      	mov	r3, r2
 8002d1a:	019b      	lsls	r3, r3, #6
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <StartTaskBH1750+0xc4>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4413      	add	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
	 	  		osDelayUntil(tick4);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f007 fce4 	bl	800a6fa <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002d32:	e7c8      	b.n	8002cc6 <StartTaskBH1750+0x3e>
 8002d34:	200006e8 	.word	0x200006e8
 8002d38:	20000714 	.word	0x20000714
 8002d3c:	200006dc 	.word	0x200006dc
 8002d40:	200006fc 	.word	0x200006fc
 8002d44:	200006c4 	.word	0x200006c4
 8002d48:	080115a8 	.word	0x080115a8
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <StartTaskSSD1306>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSSD1306 */
void StartTaskSSD1306(void *argument)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0d4      	sub	sp, #336	; 0x150
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d5a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d5e:	6018      	str	r0, [r3, #0]
	BmeData_t _BmeData;
	BHData_t _BHData;
	RTC_TimeTypeDef _RTCTime;
	RTC_TimeTypeDef _AlarmPeriod;
	RTC_TimeTypeDef _PumpOperatingTime;
	uint8_t _PumpDispensing = 1;
 8002d60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002d64:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
	Alarm_Freq Update_Alarm;

	uint32_t tick2;


	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002d6c:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <StartTaskSSD1306+0x1f4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	4618      	mov	r0, r3
 8002d76:	f007 fe72 	bl	800aa5e <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 8002d7a:	4873      	ldr	r0, [pc, #460]	; (8002f48 <StartTaskSSD1306+0x1f8>)
 8002d7c:	f7fe fc1a 	bl	80015b4 <SSD1306_Init>
	osMutexRelease(MutexI2C2Handle);
 8002d80:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <StartTaskSSD1306+0x1f4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f007 feb5 	bl	800aaf4 <osMutexRelease>

	GFX_SetFont(font_8x5);
 8002d8a:	4870      	ldr	r0, [pc, #448]	; (8002f4c <StartTaskSSD1306+0x1fc>)
 8002d8c:	f7fe f902 	bl	8000f94 <GFX_SetFont>
	SSD1306_Clear(BLACK);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fe fbb1 	bl	80014f8 <SSD1306_Clear>
	SSD1306_Display();
 8002d96:	f7fe fbcd 	bl	8001534 <SSD1306_Display>

	tick2 = osKernelGetTickCount();
 8002d9a:	f007 fad1 	bl	800a340 <osKernelGetTickCount>
 8002d9e:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  /* Infinite loop */
  for(;;)
  {
	  	  SSD1306_Clear(BLACK);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fe fba8 	bl	80014f8 <SSD1306_Clear>
	  	  osMessageQueueGet(QueueBmeHandle, &_BmeData, 0, 50);
 8002da8:	4b69      	ldr	r3, [pc, #420]	; (8002f50 <StartTaskSSD1306+0x200>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002db0:	2332      	movs	r3, #50	; 0x32
 8002db2:	2200      	movs	r2, #0
 8002db4:	f008 f8ce 	bl	800af54 <osMessageQueueGet>
	  	  osMessageQueueGet(QueueBh1750Handle, &_BHData, 0, 50);
 8002db8:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <StartTaskSSD1306+0x204>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002dc0:	2332      	movs	r3, #50	; 0x32
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f008 f8c6 	bl	800af54 <osMessageQueueGet>
	  //	  osMessageQueueGet(QueueRTCDataHandle, &_RTCDate, 0,osWaitForever);
	  	  osMessageQueueGet(QueueRTCTimeHandle, &_RTCTime, 0, 50);
 8002dc8:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <StartTaskSSD1306+0x208>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002dd0:	2332      	movs	r3, #50	; 0x32
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f008 f8be 	bl	800af54 <osMessageQueueGet>



	  	  if(osOK== osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, 50))
 8002dd8:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <StartTaskSSD1306+0x20c>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8002de0:	2332      	movs	r3, #50	; 0x32
 8002de2:	2200      	movs	r2, #0
 8002de4:	f008 f8b6 	bl	800af54 <osMessageQueueGet>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10d      	bne.n	8002e0a <StartTaskSSD1306+0xba>
	  	  {
	  		  osSemaphoreRelease(BinarySemCountUpHandle);
 8002dee:	4b5c      	ldr	r3, [pc, #368]	; (8002f60 <StartTaskSSD1306+0x210>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f007 ff96 	bl	800ad24 <osSemaphoreRelease>
	  		  osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8002df8:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <StartTaskSSD1306+0x20c>)
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	2200      	movs	r2, #0
 8002e06:	f008 f845 	bl	800ae94 <osMessageQueuePut>
	  	  }

	  	   osMessageQueueGet(QueueAlarmHandle, &_AlarmPeriod, 0, 50);
 8002e0a:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <StartTaskSSD1306+0x214>)
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002e12:	2332      	movs	r3, #50	; 0x32
 8002e14:	2200      	movs	r2, #0
 8002e16:	f008 f89d 	bl	800af54 <osMessageQueueGet>


//	  	   osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, osWaitForever);


	  	  sprintf(MessageTemp, "Temperature: %.2f ", _BmeData.Temperature);
 8002e1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb9b 	bl	8000558 <__aeabi_f2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8002e2a:	494f      	ldr	r1, [pc, #316]	; (8002f68 <StartTaskSSD1306+0x218>)
 8002e2c:	f002 f85a 	bl	8004ee4 <sprintf_>
	  	  sprintf(MessageHum, "Humidity: %.2f", _BmeData.Humidity);
 8002e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fb90 	bl	8000558 <__aeabi_f2d>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8002e40:	494a      	ldr	r1, [pc, #296]	; (8002f6c <StartTaskSSD1306+0x21c>)
 8002e42:	f002 f84f 	bl	8004ee4 <sprintf_>
	  	  sprintf(MessageInten, "Lx: %.2f,", _BHData.LightIntensity);
 8002e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb85 	bl	8000558 <__aeabi_f2d>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8002e56:	4946      	ldr	r1, [pc, #280]	; (8002f70 <StartTaskSSD1306+0x220>)
 8002e58:	f002 f844 	bl	8004ee4 <sprintf_>
	  //	  sprintf(MessageData, "Data: %02d.%02d.20%02d  Time: %02d:%02d:%02d:%02d",_RTCDate.Date,_RTCDate.Month,_RTCDate.Year,_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
	  	  sprintf(MessageTime, "Time: %02d:%02d:%02d",_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
 8002e5c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002e60:	461a      	mov	r2, r3
 8002e62:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8002e66:	4619      	mov	r1, r3
 8002e68:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8002e6c:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	460b      	mov	r3, r1
 8002e74:	493f      	ldr	r1, [pc, #252]	; (8002f74 <StartTaskSSD1306+0x224>)
 8002e76:	f002 f835 	bl	8004ee4 <sprintf_>
	  	  sprintf(MessageTimePump, "Pump OP Time: %02d Min",_PumpDispensing);
 8002e7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e7e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e8a:	493b      	ldr	r1, [pc, #236]	; (8002f78 <StartTaskSSD1306+0x228>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 f829 	bl	8004ee4 <sprintf_>
	  	  sprintf(MessageFreqAlarm, "Alarm Period: %02d H", _AlarmPeriod.Hours);
 8002e92:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e96:	461a      	mov	r2, r3
 8002e98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002e9c:	4937      	ldr	r1, [pc, #220]	; (8002f7c <StartTaskSSD1306+0x22c>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 f820 	bl	8004ee4 <sprintf_>

	  	  GFX_DrawString(0, 0, MessageTime, WHITE, 0);
 8002ea4:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2301      	movs	r3, #1
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fe f939 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 10, MessageTemp, WHITE, 0);
 8002eb6:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	210a      	movs	r1, #10
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fe f930 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 20, MessageHum, WHITE, 0);
 8002ec8:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	2114      	movs	r1, #20
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fe f927 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 30, MessageInten, WHITE, 0);
 8002eda:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	211e      	movs	r1, #30
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fe f91e 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 40, MessageTimePump, WHITE, 0);
 8002eec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	2128      	movs	r1, #40	; 0x28
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fe f915 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 50, MessageFreqAlarm, WHITE, 0);
 8002efe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002f02:	2300      	movs	r3, #0
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2301      	movs	r3, #1
 8002f08:	2132      	movs	r1, #50	; 0x32
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fe f90c 	bl	8001128 <GFX_DrawString>

	  	  SSD1306_Display();
 8002f10:	f7fe fb10 	bl	8001534 <SSD1306_Display>

	  	  printf("TASK OLED \n\r");
 8002f14:	481a      	ldr	r0, [pc, #104]	; (8002f80 <StartTaskSSD1306+0x230>)
 8002f16:	f001 ffc9 	bl	8004eac <printf_>

	  //		printf("TASK OLED I2C MUTEX is released \n\r");
	        tick2 += (100 * osKernelGetTickFreq()) / 1000;
 8002f1a:	f007 fa26 	bl	800a36a <osKernelGetTickFreq>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2264      	movs	r2, #100	; 0x64
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <StartTaskSSD1306+0x234>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f32:	4413      	add	r3, r2
 8002f34:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  	  osDelayUntil(tick2);
 8002f38:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8002f3c:	f007 fbdd 	bl	800a6fa <osDelayUntil>
	  	  SSD1306_Clear(BLACK);
 8002f40:	e72f      	b.n	8002da2 <StartTaskSSD1306+0x52>
 8002f42:	bf00      	nop
 8002f44:	200006f4 	.word	0x200006f4
 8002f48:	20000714 	.word	0x20000714
 8002f4c:	08011670 	.word	0x08011670
 8002f50:	200006c0 	.word	0x200006c0
 8002f54:	200006c4 	.word	0x200006c4
 8002f58:	200006cc 	.word	0x200006cc
 8002f5c:	200006d0 	.word	0x200006d0
 8002f60:	20000704 	.word	0x20000704
 8002f64:	200006d4 	.word	0x200006d4
 8002f68:	080115b8 	.word	0x080115b8
 8002f6c:	080115cc 	.word	0x080115cc
 8002f70:	080115dc 	.word	0x080115dc
 8002f74:	080115e8 	.word	0x080115e8
 8002f78:	08011600 	.word	0x08011600
 8002f7c:	08011618 	.word	0x08011618
 8002f80:	08011630 	.word	0x08011630
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <StartTaskPumpON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpON */
void StartTaskPumpON(void *argument)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpON */
	drv8835_init();
 8002f90:	f7ff fb4a 	bl	8002628 <drv8835_init>
  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f007 fb2c 	bl	800a5f8 <osThreadFlagsWait>

	  drv8835_set_motorA_speed(99);
 8002fa0:	2063      	movs	r0, #99	; 0x63
 8002fa2:	f7ff fb25 	bl	80025f0 <drv8835_set_motorA_speed>
	  osThreadFlagsClear(0x00000001U);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f007 fae8 	bl	800a57c <osThreadFlagsClear>
	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002fac:	e7f2      	b.n	8002f94 <StartTaskPumpON+0xc>

08002fae <StartTaskPumpOFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpOFF */
void StartTaskPumpOFF(void *argument)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpOFF */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 8002fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2010      	movs	r0, #16
 8002fbe:	f007 fb1b 	bl	800a5f8 <osThreadFlagsWait>


	  	  drv8835_set_motorA_speed(0);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff fb14 	bl	80025f0 <drv8835_set_motorA_speed>
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 8002fc8:	e7f5      	b.n	8002fb6 <StartTaskPumpOFF+0x8>
	...

08002fcc <StartTaskCounterPumpUp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterPumpUp */
void StartTaskCounterPumpUp(void *argument)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]


	RTC_TimeTypeDef _PumpOperatingTime;
		uint32_t tick;

		tick= osKernelGetTickCount();
 8002fd4:	f007 f9b4 	bl	800a340 <osKernelGetTickCount>
 8002fd8:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4823      	ldr	r0, [pc, #140]	; (800306c <StartTaskCounterPumpUp+0xa0>)
 8002fde:	f002 ff53 	bl	8005e88 <HAL_GPIO_ReadPin>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d114      	bne.n	8003012 <StartTaskCounterPumpUp+0x46>
	  {
	  	  _PumpDipensing= _PumpDipensing + 1;
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8002ff2:	701a      	strb	r2, [r3, #0]
	  		if(_PumpDipensing >=60)
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b3b      	cmp	r3, #59	; 0x3b
 8002ffa:	d902      	bls.n	8003002 <StartTaskCounterPumpUp+0x36>
	  		{
	  			_PumpDipensing = 1;
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
	  		}
	  		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 0);
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <StartTaskCounterPumpUp+0xa8>)
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	2200      	movs	r2, #0
 800300a:	4919      	ldr	r1, [pc, #100]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 800300c:	f007 ff42 	bl	800ae94 <osMessageQueuePut>
 8003010:	e01a      	b.n	8003048 <StartTaskCounterPumpUp+0x7c>
	  }
	  else if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)== GPIO_PIN_RESET)
 8003012:	2102      	movs	r1, #2
 8003014:	4815      	ldr	r0, [pc, #84]	; (800306c <StartTaskCounterPumpUp+0xa0>)
 8003016:	f002 ff37 	bl	8005e88 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d113      	bne.n	8003048 <StartTaskCounterPumpUp+0x7c>
	  {
		  _PumpDipensing= _PumpDipensing -1;
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 800302a:	701a      	strb	r2, [r3, #0]
		 	  		if(_PumpDipensing <=0)
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <StartTaskCounterPumpUp+0x6e>
		 	  		{
		 	  			_PumpDipensing = 59;
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8003036:	223b      	movs	r2, #59	; 0x3b
 8003038:	701a      	strb	r2, [r3, #0]
		 	  		}
		   osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 0);
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <StartTaskCounterPumpUp+0xa8>)
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	2300      	movs	r3, #0
 8003040:	2200      	movs	r2, #0
 8003042:	490b      	ldr	r1, [pc, #44]	; (8003070 <StartTaskCounterPumpUp+0xa4>)
 8003044:	f007 ff26 	bl	800ae94 <osMessageQueuePut>
//	  	  	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, osWaitForever);




	  	  	tick += (420 * osKernelGetTickFreq()) / 1000;
 8003048:	f007 f98f 	bl	800a36a <osKernelGetTickFreq>
 800304c:	4603      	mov	r3, r0
 800304e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <StartTaskCounterPumpUp+0xac>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
	  	  	osDelayUntil(tick);
 8003064:	69f8      	ldr	r0, [r7, #28]
 8003066:	f007 fb48 	bl	800a6fa <osDelayUntil>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 800306a:	e7b6      	b.n	8002fda <StartTaskCounterPumpUp+0xe>
 800306c:	40020800 	.word	0x40020800
 8003070:	20000001 	.word	0x20000001
 8003074:	200006d0 	.word	0x200006d0
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <StartTaskCounterDown>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterDown */
void StartTaskCounterDown(void *argument)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCounterDown */
	RTC_TimeTypeDef _PumpOperatingTime;

		uint32_t tick;
		tick = osKernelGetTickCount();
 8003084:	f007 f95c 	bl	800a340 <osKernelGetTickCount>
 8003088:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {

	  	  osThreadFlagsWait(0x00001000U, osFlagsWaitAll, osWaitForever);
 800308a:	f04f 32ff 	mov.w	r2, #4294967295
 800308e:	2101      	movs	r1, #1
 8003090:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003094:	f007 fab0 	bl	800a5f8 <osThreadFlagsWait>

		  osMessageQueueGet(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 100);
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <StartTaskCounterDown+0x78>)
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	f107 0108 	add.w	r1, r7, #8
 80030a0:	2364      	movs	r3, #100	; 0x64
 80030a2:	2200      	movs	r2, #0
 80030a4:	f007 ff56 	bl	800af54 <osMessageQueueGet>
	      _PumpOperatingTime.Minutes = _PumpOperatingTime.Minutes - 1;
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	727b      	strb	r3, [r7, #9]

	  	  if(_PumpOperatingTime.Minutes == 0 ||_PumpOperatingTime.Minutes >= 60 )
 80030b0:	7a7b      	ldrb	r3, [r7, #9]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <StartTaskCounterDown+0x40>
 80030b6:	7a7b      	ldrb	r3, [r7, #9]
 80030b8:	2b3b      	cmp	r3, #59	; 0x3b
 80030ba:	d901      	bls.n	80030c0 <StartTaskCounterDown+0x44>
	  	  {
	  	        _PumpOperatingTime.Minutes = 59;
 80030bc:	233b      	movs	r3, #59	; 0x3b
 80030be:	727b      	strb	r3, [r7, #9]
	  	  }

	  	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime,0,  100);
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <StartTaskCounterDown+0x78>)
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	f107 0108 	add.w	r1, r7, #8
 80030c8:	2364      	movs	r3, #100	; 0x64
 80030ca:	2200      	movs	r2, #0
 80030cc:	f007 fee2 	bl	800ae94 <osMessageQueuePut>



	  	  tick += (410 * osKernelGetTickFreq()) / 1000;
 80030d0:	f007 f94b 	bl	800a36a <osKernelGetTickFreq>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <StartTaskCounterDown+0x7c>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	61fb      	str	r3, [r7, #28]
	  	  osDelayUntil(tick);
 80030ec:	69f8      	ldr	r0, [r7, #28]
 80030ee:	f007 fb04 	bl	800a6fa <osDelayUntil>
	  	  osThreadFlagsWait(0x00001000U, osFlagsWaitAll, osWaitForever);
 80030f2:	e7ca      	b.n	800308a <StartTaskCounterDown+0xe>
 80030f4:	200006d0 	.word	0x200006d0
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <StartTaskAlarmCounterUp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCounterUp */
void StartTaskAlarmCounterUp(void *argument)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef _AlarmPeriod;



		uint32_t tick;
		tick = osKernelGetTickCount();
 8003104:	f007 f91c 	bl	800a340 <osKernelGetTickCount>
 8003108:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  	  	 osThreadFlagsWait(0x00010000U, osFlagsWaitAll, osWaitForever);
 800310a:	f04f 32ff 	mov.w	r2, #4294967295
 800310e:	2101      	movs	r1, #1
 8003110:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003114:	f007 fa70 	bl	800a5f8 <osThreadFlagsWait>
	 	  	 osMessageQueueGet(QueueAlarmHandle, &_AlarmPeriod, 0, 100);
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <StartTaskAlarmCounterUp+0x7c>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	f107 0108 	add.w	r1, r7, #8
 8003120:	2364      	movs	r3, #100	; 0x64
 8003122:	2200      	movs	r2, #0
 8003124:	f007 ff16 	bl	800af54 <osMessageQueueGet>
	 	  	_AlarmPeriod.Hours= _AlarmPeriod.Hours + 1;
 8003128:	7a3b      	ldrb	r3, [r7, #8]
 800312a:	3301      	adds	r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	723b      	strb	r3, [r7, #8]

	 	  	  	  	  	  if(_AlarmPeriod.Hours >= 16 )
 8003130:	7a3b      	ldrb	r3, [r7, #8]
 8003132:	2b0f      	cmp	r3, #15
 8003134:	d901      	bls.n	800313a <StartTaskAlarmCounterUp+0x3e>
	 	  	  	  	  	  {
	 	  	  	  	  		  	 _AlarmPeriod.Hours = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	723b      	strb	r3, [r7, #8]
	 	  	  	  	  	  }

	 	  	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod,0,  100);
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <StartTaskAlarmCounterUp+0x7c>)
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	f107 0108 	add.w	r1, r7, #8
 8003142:	2364      	movs	r3, #100	; 0x64
 8003144:	2200      	movs	r2, #0
 8003146:	f007 fea5 	bl	800ae94 <osMessageQueuePut>
	 	  	osSemaphoreRelease(BinarySemSetAlarmHandle);
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <StartTaskAlarmCounterUp+0x80>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f007 fde8 	bl	800ad24 <osSemaphoreRelease>

	 	  tick += (390 * osKernelGetTickFreq()) / 1000;
 8003154:	f007 f909 	bl	800a36a <osKernelGetTickFreq>
 8003158:	4603      	mov	r3, r0
 800315a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a07      	ldr	r2, [pc, #28]	; (8003180 <StartTaskAlarmCounterUp+0x84>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	61fb      	str	r3, [r7, #28]
	 	  	osDelayUntil(tick);
 8003170:	69f8      	ldr	r0, [r7, #28]
 8003172:	f007 fac2 	bl	800a6fa <osDelayUntil>
	  	  	 osThreadFlagsWait(0x00010000U, osFlagsWaitAll, osWaitForever);
 8003176:	e7c8      	b.n	800310a <StartTaskAlarmCounterUp+0xe>
 8003178:	200006d4 	.word	0x200006d4
 800317c:	2000070c 	.word	0x2000070c
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <StartTaskAlarmCountDown>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCountDown */
void StartTaskAlarmCountDown(void *argument)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAlarmCountDown */
	RTC_AlarmTypeDef _AlarmPeriod;
		uint32_t tick;
		tick = osKernelGetTickCount();
 800318c:	f007 f8d8 	bl	800a340 <osKernelGetTickCount>
 8003190:	6378      	str	r0, [r7, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x00100000U, osFlagsWaitAll, osWaitForever);
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	2101      	movs	r1, #1
 8003198:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800319c:	f007 fa2c 	bl	800a5f8 <osThreadFlagsWait>
	  osMessageQueueGet(QueueAlarmHandle, &_AlarmPeriod, 0, 100);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <StartTaskAlarmCountDown+0x84>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	f107 010c 	add.w	r1, r7, #12
 80031a8:	2364      	movs	r3, #100	; 0x64
 80031aa:	2200      	movs	r2, #0
 80031ac:	f007 fed2 	bl	800af54 <osMessageQueueGet>
	  _AlarmPeriod.AlarmTime.Hours= _AlarmPeriod.AlarmTime.Hours - 1;
 80031b0:	7b3b      	ldrb	r3, [r7, #12]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	733b      	strb	r3, [r7, #12]

	  	  	  	  if(_AlarmPeriod.AlarmTime.Hours == 0 ||_AlarmPeriod.AlarmTime.Hours >= 16 )
 80031b8:	7b3b      	ldrb	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <StartTaskAlarmCountDown+0x40>
 80031be:	7b3b      	ldrb	r3, [r7, #12]
 80031c0:	2b0f      	cmp	r3, #15
 80031c2:	d901      	bls.n	80031c8 <StartTaskAlarmCountDown+0x44>
	  	  	  	  {
	  	  	  		  	  _AlarmPeriod.AlarmTime.Hours = 16;
 80031c4:	2310      	movs	r3, #16
 80031c6:	733b      	strb	r3, [r7, #12]
	  	  	  	  }

	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod,0,  100);
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <StartTaskAlarmCountDown+0x84>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	f107 010c 	add.w	r1, r7, #12
 80031d0:	2364      	movs	r3, #100	; 0x64
 80031d2:	2200      	movs	r2, #0
 80031d4:	f007 fe5e 	bl	800ae94 <osMessageQueuePut>
	  osSemaphoreRelease(BinarySemSetAlarmHandle);
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <StartTaskAlarmCountDown+0x88>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f007 fda1 	bl	800ad24 <osSemaphoreRelease>

	  tick += (380 * osKernelGetTickFreq()) / 1000;
 80031e2:	f007 f8c2 	bl	800a36a <osKernelGetTickFreq>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	4a07      	ldr	r2, [pc, #28]	; (8003210 <StartTaskAlarmCountDown+0x8c>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031fa:	4413      	add	r3, r2
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
	  osDelayUntil(tick);
 80031fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003200:	f007 fa7b 	bl	800a6fa <osDelayUntil>
	  osThreadFlagsWait(0x00100000U, osFlagsWaitAll, osWaitForever);
 8003204:	e7c5      	b.n	8003192 <StartTaskAlarmCountDown+0xe>
 8003206:	bf00      	nop
 8003208:	200006d4 	.word	0x200006d4
 800320c:	2000070c 	.word	0x2000070c
 8003210:	10624dd3 	.word	0x10624dd3

08003214 <CallbackTimerBmeData>:
  /* USER CODE END StartTaskAlarmCountDown */
}

/* CallbackTimerBmeData function */
void CallbackTimerBmeData(void *argument)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBmeData */
	osSemaphoreRelease(BinarySemBme280Handle);
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <CallbackTimerBmeData+0x1c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f007 fd7f 	bl	800ad24 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBmeData */
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200006f8 	.word	0x200006f8

08003234 <CallbackTimerBh1750Data>:

/* CallbackTimerBh1750Data function */
void CallbackTimerBh1750Data(void *argument)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBh1750Data */
	osSemaphoreRelease(BinarySemBH1750Handle);
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <CallbackTimerBh1750Data+0x1c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f007 fd6f 	bl	800ad24 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBh1750Data */
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200006fc 	.word	0x200006fc

08003254 <CallbackTimerRTC>:

/* CallbackTimerRTC function */
void CallbackTimerRTC(void *argument)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerRTC */
	osSemaphoreRelease(BinarySemRTCHandle);
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <CallbackTimerRTC+0x1c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f007 fd5f 	bl	800ad24 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerRTC */
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000700 	.word	0x20000700

08003274 <_putchar>:
//
//	}
//
//}

void _putchar(char character) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
	// send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <_putchar+0x38>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f04f 31ff 	mov.w	r1, #4294967295
 8003286:	4618      	mov	r0, r3
 8003288:	f007 fbe9 	bl	800aa5e <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 800328c:	1df9      	adds	r1, r7, #7
 800328e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003292:	2201      	movs	r2, #1
 8003294:	4806      	ldr	r0, [pc, #24]	; (80032b0 <_putchar+0x3c>)
 8003296:	f006 fc50 	bl	8009b3a <HAL_UART_Transmit>

	osMutexRelease(MutexPrintfHandle);
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <_putchar+0x38>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f007 fc28 	bl	800aaf4 <osMutexRelease>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200006e4 	.word	0x200006e4
 80032b0:	2000081c 	.word	0x2000081c

080032b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b36      	ldr	r3, [pc, #216]	; (80033a8 <MX_GPIO_Init+0xf4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <MX_GPIO_Init+0xf4>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <MX_GPIO_Init+0xf4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <MX_GPIO_Init+0xf4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <MX_GPIO_Init+0xf4>)
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <MX_GPIO_Init+0xf4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <MX_GPIO_Init+0xf4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <MX_GPIO_Init+0xf4>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <MX_GPIO_Init+0xf4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <MX_GPIO_Init+0xf4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <MX_GPIO_Init+0xf4>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <MX_GPIO_Init+0xf4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MODE_Pin, GPIO_PIN_RESET);
 800333a:	2200      	movs	r2, #0
 800333c:	21a0      	movs	r1, #160	; 0xa0
 800333e:	481b      	ldr	r0, [pc, #108]	; (80033ac <MX_GPIO_Init+0xf8>)
 8003340:	f002 fdba 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, GPIO_PIN_RESET);
 8003344:	2200      	movs	r2, #0
 8003346:	2140      	movs	r1, #64	; 0x40
 8003348:	4819      	ldr	r0, [pc, #100]	; (80033b0 <MX_GPIO_Init+0xfc>)
 800334a:	f002 fdb5 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800334e:	2303      	movs	r3, #3
 8003350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003356:	2301      	movs	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4619      	mov	r1, r3
 8003360:	4814      	ldr	r0, [pc, #80]	; (80033b4 <MX_GPIO_Init+0x100>)
 8003362:	f002 fc0d 	bl	8005b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MODE_Pin;
 8003366:	23a0      	movs	r3, #160	; 0xa0
 8003368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	480b      	ldr	r0, [pc, #44]	; (80033ac <MX_GPIO_Init+0xf8>)
 800337e:	f002 fbff 	bl	8005b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = APHASE_Pin;
 8003382:	2340      	movs	r3, #64	; 0x40
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APHASE_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 0314 	add.w	r3, r7, #20
 8003396:	4619      	mov	r1, r3
 8003398:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_GPIO_Init+0xfc>)
 800339a:	f002 fbf1 	bl	8005b80 <HAL_GPIO_Init>

}
 800339e:	bf00      	nop
 80033a0:	3728      	adds	r7, #40	; 0x28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020000 	.word	0x40020000
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40020800 	.word	0x40020800

080033b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <MX_I2C1_Init+0x50>)
 80033be:	4a13      	ldr	r2, [pc, #76]	; (800340c <MX_I2C1_Init+0x54>)
 80033c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <MX_I2C1_Init+0x50>)
 80033c4:	4a12      	ldr	r2, [pc, #72]	; (8003410 <MX_I2C1_Init+0x58>)
 80033c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <MX_I2C1_Init+0x50>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <MX_I2C1_Init+0x50>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <MX_I2C1_Init+0x50>)
 80033d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <MX_I2C1_Init+0x50>)
 80033de:	2200      	movs	r2, #0
 80033e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <MX_I2C1_Init+0x50>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <MX_I2C1_Init+0x50>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <MX_I2C1_Init+0x50>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033f4:	4804      	ldr	r0, [pc, #16]	; (8003408 <MX_I2C1_Init+0x50>)
 80033f6:	f002 fd79 	bl	8005eec <HAL_I2C_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003400:	f000 f8e8 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000714 	.word	0x20000714
 800340c:	40005400 	.word	0x40005400
 8003410:	00061a80 	.word	0x00061a80

08003414 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_I2C_MspInit+0x84>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d12c      	bne.n	8003490 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_I2C_MspInit+0x88>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a17      	ldr	r2, [pc, #92]	; (800349c <HAL_I2C_MspInit+0x88>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_I2C_MspInit+0x88>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003458:	2312      	movs	r3, #18
 800345a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003464:	2304      	movs	r3, #4
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	4619      	mov	r1, r3
 800346e:	480c      	ldr	r0, [pc, #48]	; (80034a0 <HAL_I2C_MspInit+0x8c>)
 8003470:	f002 fb86 	bl	8005b80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_I2C_MspInit+0x88>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_I2C_MspInit+0x88>)
 800347e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003482:	6413      	str	r3, [r2, #64]	; 0x40
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_I2C_MspInit+0x88>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003490:	bf00      	nop
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40005400 	.word	0x40005400
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020400 	.word	0x40020400

080034a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034a8:	f002 f8c2 	bl	8005630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ac:	f000 f814 	bl	80034d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034b0:	f7ff ff00 	bl	80032b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80034b4:	f7ff f818 	bl	80024e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80034b8:	f002 f81e 	bl	80054f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80034bc:	f7ff ff7c 	bl	80033b8 <MX_I2C1_Init>
  MX_RTC_Init();
 80034c0:	f001 fd2c 	bl	8004f1c <MX_RTC_Init>
  MX_TIM3_Init();
 80034c4:	f001 ff46 	bl	8005354 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80034c8:	f006 fef0 	bl	800a2ac <osKernelInitialize>
  MX_FREERTOS_Init();
 80034cc:	f7ff f8c0 	bl	8002650 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80034d0:	f006 ff10 	bl	800a2f4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <main+0x30>
	...

080034d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b094      	sub	sp, #80	; 0x50
 80034dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034de:	f107 0320 	add.w	r3, r7, #32
 80034e2:	2230      	movs	r2, #48	; 0x30
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f00b ffc1 	bl	800f46e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <SystemClock_Config+0xd0>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <SystemClock_Config+0xd0>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	; 0x40
 800350c:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <SystemClock_Config+0xd0>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003518:	2300      	movs	r3, #0
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <SystemClock_Config+0xd4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a22      	ldr	r2, [pc, #136]	; (80035ac <SystemClock_Config+0xd4>)
 8003522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <SystemClock_Config+0xd4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003534:	2306      	movs	r3, #6
 8003536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003538:	2301      	movs	r3, #1
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800353c:	2301      	movs	r3, #1
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003540:	2310      	movs	r3, #16
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003544:	2302      	movs	r3, #2
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003548:	2300      	movs	r3, #0
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800354c:	2310      	movs	r3, #16
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003556:	2304      	movs	r3, #4
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800355a:	2304      	movs	r3, #4
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800355e:	f107 0320 	add.w	r3, r7, #32
 8003562:	4618      	mov	r0, r3
 8003564:	f004 f8f6 	bl	8007754 <HAL_RCC_OscConfig>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800356e:	f000 f831 	bl	80035d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003572:	230f      	movs	r3, #15
 8003574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003576:	2302      	movs	r3, #2
 8003578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800357e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f004 fb58 	bl	8007c44 <HAL_RCC_ClockConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800359a:	f000 f81b 	bl	80035d4 <Error_Handler>
  }
}
 800359e:	bf00      	nop
 80035a0:	3750      	adds	r7, #80	; 0x50
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000

080035b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035c2:	f002 f857 	bl	8005674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40014400 	.word	0x40014400

080035d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035dc:	e7fe      	b.n	80035dc <Error_Handler+0x8>

080035de <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4603      	mov	r3, r0
 80035ec:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d204      	bcs.n	8003600 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	701a      	strb	r2, [r3, #0]
  }
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <_out_char+0x1e>
    _putchar(character);
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fe17 	bl	8003274 <_putchar>
  }
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e002      	b.n	8003664 <_strnlen_s+0x16>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <_strnlen_s+0x28>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	603a      	str	r2, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f3      	bne.n	800365e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1ad3      	subs	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b2f      	cmp	r3, #47	; 0x2f
 8003696:	d904      	bls.n	80036a2 <_is_digit+0x1a>
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b39      	cmp	r3, #57	; 0x39
 800369c:	d801      	bhi.n	80036a2 <_is_digit+0x1a>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <_is_digit+0x1c>
 80036a2:	2300      	movs	r3, #0
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80036c2:	e00e      	b.n	80036e2 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	4403      	add	r3, r0
 80036de:	3b30      	subs	r3, #48	; 0x30
 80036e0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ffcd 	bl	8003688 <_is_digit>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e7      	bne.n	80036c4 <_atoi+0xe>
  }
  return i;
 80036f4:	68fb      	ldr	r3, [r7, #12]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80036fe:	b590      	push	{r4, r7, lr}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d125      	bne.n	8003766 <_out_rev+0x68>
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d120      	bne.n	8003766 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e00a      	b.n	8003740 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	1c53      	adds	r3, r2, #1
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	68fc      	ldr	r4, [r7, #12]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	2020      	movs	r0, #32
 8003738:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	429a      	cmp	r2, r3
 8003746:	d3f0      	bcc.n	800372a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003748:	e00d      	b.n	8003766 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	3b01      	subs	r3, #1
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	4413      	add	r3, r2
 8003756:	7818      	ldrb	r0, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	1c53      	adds	r3, r2, #1
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	68fc      	ldr	r4, [r7, #12]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	47a0      	blx	r4
  while (len) {
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003776:	e007      	b.n	8003788 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	1c53      	adds	r3, r2, #1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	68fc      	ldr	r4, [r7, #12]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	2020      	movs	r0, #32
 8003786:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f1      	bhi.n	8003778 <_out_rev+0x7a>
    }
  }

  return idx;
 8003794:	687b      	ldr	r3, [r7, #4]
}
 8003796:	4618      	mov	r0, r3
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b088      	sub	sp, #32
 80037a2:	af04      	add	r7, sp, #16
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d136      	bne.n	8003824 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d018      	beq.n	80037ee <_ntoa_format+0x50>
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <_ntoa_format+0x50>
 80037c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <_ntoa_format+0x3a>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <_ntoa_format+0x50>
      width--;
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	3b01      	subs	r3, #1
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037de:	e006      	b.n	80037ee <_ntoa_format+0x50>
      buf[len++] = '0';
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	61fa      	str	r2, [r7, #28]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4413      	add	r3, r2
 80037ea:	2230      	movs	r2, #48	; 0x30
 80037ec:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d20a      	bcs.n	800380c <_ntoa_format+0x6e>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2b1f      	cmp	r3, #31
 80037fa:	d9f1      	bls.n	80037e0 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037fc:	e006      	b.n	800380c <_ntoa_format+0x6e>
      buf[len++] = '0';
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	61fa      	str	r2, [r7, #28]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	2230      	movs	r2, #48	; 0x30
 800380a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <_ntoa_format+0x86>
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	429a      	cmp	r2, r3
 800381c:	d202      	bcs.n	8003824 <_ntoa_format+0x86>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2b1f      	cmp	r3, #31
 8003822:	d9ec      	bls.n	80037fe <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d058      	beq.n	80038e0 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <_ntoa_format+0xc8>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <_ntoa_format+0xc8>
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	429a      	cmp	r2, r3
 8003844:	d003      	beq.n	800384e <_ntoa_format+0xb0>
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	429a      	cmp	r2, r3
 800384c:	d10b      	bne.n	8003866 <_ntoa_format+0xc8>
      len--;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3b01      	subs	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <_ntoa_format+0xc8>
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	2b10      	cmp	r3, #16
 800385e:	d102      	bne.n	8003866 <_ntoa_format+0xc8>
        len--;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3b01      	subs	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	2b10      	cmp	r3, #16
 800386a:	d10f      	bne.n	800388c <_ntoa_format+0xee>
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <_ntoa_format+0xee>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b1f      	cmp	r3, #31
 800387a:	d807      	bhi.n	800388c <_ntoa_format+0xee>
      buf[len++] = 'x';
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	61fa      	str	r2, [r7, #28]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	2278      	movs	r2, #120	; 0x78
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e01f      	b.n	80038cc <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2b10      	cmp	r3, #16
 8003890:	d10f      	bne.n	80038b2 <_ntoa_format+0x114>
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <_ntoa_format+0x114>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b1f      	cmp	r3, #31
 80038a0:	d807      	bhi.n	80038b2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	61fa      	str	r2, [r7, #28]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	2258      	movs	r2, #88	; 0x58
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e00c      	b.n	80038cc <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d109      	bne.n	80038cc <_ntoa_format+0x12e>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b1f      	cmp	r3, #31
 80038bc:	d806      	bhi.n	80038cc <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	61fa      	str	r2, [r7, #28]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	2262      	movs	r2, #98	; 0x62
 80038ca:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b1f      	cmp	r3, #31
 80038d0:	d806      	bhi.n	80038e0 <_ntoa_format+0x142>
      buf[len++] = '0';
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	61fa      	str	r2, [r7, #28]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	2230      	movs	r2, #48	; 0x30
 80038de:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b1f      	cmp	r3, #31
 80038e4:	d824      	bhi.n	8003930 <_ntoa_format+0x192>
    if (negative) {
 80038e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <_ntoa_format+0x160>
      buf[len++] = '-';
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	61fa      	str	r2, [r7, #28]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	222d      	movs	r2, #45	; 0x2d
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e018      	b.n	8003930 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	222b      	movs	r2, #43	; 0x2b
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e00b      	b.n	8003930 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	61fa      	str	r2, [r7, #28]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	2220      	movs	r2, #32
 800392e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	9303      	str	r3, [sp, #12]
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fed9 	bl	80036fe <_out_rev>
 800394c:	4603      	mov	r3, r0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b096      	sub	sp, #88	; 0x58
 800395a:	af08      	add	r7, sp, #32
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800396e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003970:	f023 0310 	bic.w	r3, r3, #16
 8003974:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <_ntoa_long+0x30>
 8003980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d032      	beq.n	80039ec <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800398a:	fbb3 f2f2 	udiv	r2, r3, r2
 800398e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003990:	fb01 f202 	mul.w	r2, r1, r2
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800399a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800399e:	2b09      	cmp	r3, #9
 80039a0:	d804      	bhi.n	80039ac <_ntoa_long+0x56>
 80039a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039a6:	3330      	adds	r3, #48	; 0x30
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	e00d      	b.n	80039c8 <_ntoa_long+0x72>
 80039ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <_ntoa_long+0x64>
 80039b6:	2241      	movs	r2, #65	; 0x41
 80039b8:	e000      	b.n	80039bc <_ntoa_long+0x66>
 80039ba:	2261      	movs	r2, #97	; 0x61
 80039bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039c0:	4413      	add	r3, r2
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3b0a      	subs	r3, #10
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	6379      	str	r1, [r7, #52]	; 0x34
 80039ce:	3338      	adds	r3, #56	; 0x38
 80039d0:	443b      	add	r3, r7
 80039d2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80039d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80039e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <_ntoa_long+0x96>
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2b1f      	cmp	r3, #31
 80039ea:	d9cc      	bls.n	8003986 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80039ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ee:	9306      	str	r3, [sp, #24]
 80039f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	9303      	str	r3, [sp, #12]
 80039fc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	f107 0310 	add.w	r3, r7, #16
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fec3 	bl	800379e <_ntoa_format>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3738      	adds	r7, #56	; 0x38
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b096      	sub	sp, #88	; 0x58
 8003a26:	af08      	add	r7, sp, #32
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003a34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d103      	bne.n	8003a44 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <_ntoa_long_long+0x34>
 8003a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d037      	beq.n	8003ac6 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003a56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a5e:	f7fd f91b 	bl	8000c98 <__aeabi_uldivmod>
 8003a62:	4613      	mov	r3, r2
 8003a64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003a68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d804      	bhi.n	8003a7a <_ntoa_long_long+0x58>
 8003a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a74:	3330      	adds	r3, #48	; 0x30
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	e00d      	b.n	8003a96 <_ntoa_long_long+0x74>
 8003a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <_ntoa_long_long+0x66>
 8003a84:	2241      	movs	r2, #65	; 0x41
 8003a86:	e000      	b.n	8003a8a <_ntoa_long_long+0x68>
 8003a88:	2261      	movs	r2, #97	; 0x61
 8003a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a8e:	4413      	add	r3, r2
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3b0a      	subs	r3, #10
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	1c59      	adds	r1, r3, #1
 8003a9a:	6379      	str	r1, [r7, #52]	; 0x34
 8003a9c:	3338      	adds	r3, #56	; 0x38
 8003a9e:	443b      	add	r3, r7
 8003aa0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aa8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003aac:	f7fd f8f4 	bl	8000c98 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003ab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003abc:	4313      	orrs	r3, r2
 8003abe:	d002      	beq.n	8003ac6 <_ntoa_long_long+0xa4>
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac2:	2b1f      	cmp	r3, #31
 8003ac4:	d9c7      	bls.n	8003a56 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aca:	9206      	str	r2, [sp, #24]
 8003acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ace:	9205      	str	r2, [sp, #20]
 8003ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ad2:	9204      	str	r2, [sp, #16]
 8003ad4:	9303      	str	r3, [sp, #12]
 8003ad6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff fe56 	bl	800379e <_ntoa_format>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3738      	adds	r7, #56	; 0x38
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	0000      	movs	r0, r0
	...

08003b00 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b09d      	sub	sp, #116	; 0x74
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	6178      	str	r0, [r7, #20]
 8003b08:	6139      	str	r1, [r7, #16]
 8003b0a:	60fa      	str	r2, [r7, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b2a:	f7fc ffd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10f      	bne.n	8003b54 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b36:	9303      	str	r3, [sp, #12]
 8003b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b3a:	9302      	str	r3, [sp, #8]
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	4ba7      	ldr	r3, [pc, #668]	; (8003de0 <_ftoa+0x2e0>)
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6939      	ldr	r1, [r7, #16]
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff fdd7 	bl	80036fe <_out_rev>
 8003b50:	4603      	mov	r3, r0
 8003b52:	e222      	b.n	8003f9a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295
 8003b58:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b60:	f7fc ffc4 	bl	8000aec <__aeabi_dcmplt>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00f      	beq.n	8003b8a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6c:	9303      	str	r3, [sp, #12]
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	2304      	movs	r3, #4
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	4b9b      	ldr	r3, [pc, #620]	; (8003de4 <_ftoa+0x2e4>)
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	6939      	ldr	r1, [r7, #16]
 8003b80:	6978      	ldr	r0, [r7, #20]
 8003b82:	f7ff fdbc 	bl	80036fe <_out_rev>
 8003b86:	4603      	mov	r3, r0
 8003b88:	e207      	b.n	8003f9a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8e:	4b96      	ldr	r3, [pc, #600]	; (8003de8 <_ftoa+0x2e8>)
 8003b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b94:	f7fc ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01d      	beq.n	8003bda <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <_ftoa+0xac>
 8003ba8:	4b90      	ldr	r3, [pc, #576]	; (8003dec <_ftoa+0x2ec>)
 8003baa:	e000      	b.n	8003bae <_ftoa+0xae>
 8003bac:	4b90      	ldr	r3, [pc, #576]	; (8003df0 <_ftoa+0x2f0>)
 8003bae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bb0:	f002 0204 	and.w	r2, r2, #4
 8003bb4:	2a00      	cmp	r2, #0
 8003bb6:	d001      	beq.n	8003bbc <_ftoa+0xbc>
 8003bb8:	2204      	movs	r2, #4
 8003bba:	e000      	b.n	8003bbe <_ftoa+0xbe>
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003bc0:	9103      	str	r1, [sp, #12]
 8003bc2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003bc4:	9102      	str	r1, [sp, #8]
 8003bc6:	9201      	str	r2, [sp, #4]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6939      	ldr	r1, [r7, #16]
 8003bd0:	6978      	ldr	r0, [r7, #20]
 8003bd2:	f7ff fd94 	bl	80036fe <_out_rev>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e1df      	b.n	8003f9a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003bda:	a37d      	add	r3, pc, #500	; (adr r3, 8003dd0 <_ftoa+0x2d0>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003be4:	f7fc ffa0 	bl	8000b28 <__aeabi_dcmpgt>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <_ftoa+0x102>
 8003bee:	a37a      	add	r3, pc, #488	; (adr r3, 8003dd8 <_ftoa+0x2d8>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bf8:	f7fc ff78 	bl	8000aec <__aeabi_dcmplt>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00f      	beq.n	8003c22 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	ed97 0b00 	vldr	d0, [r7]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	6939      	ldr	r1, [r7, #16]
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	f000 f9c9 	bl	8003fb0 <_etoa>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	e1bb      	b.n	8003f9a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c34:	f7fc ff5a 	bl	8000aec <__aeabi_dcmplt>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00e      	beq.n	8003c5c <_ftoa+0x15c>
    negative = true;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	f7fc fb22 	bl	8000298 <__aeabi_dsub>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003c66:	2306      	movs	r3, #6
 8003c68:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003c6a:	e00a      	b.n	8003c82 <_ftoa+0x182>
    buf[len++] = '0';
 8003c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c72:	3360      	adds	r3, #96	; 0x60
 8003c74:	443b      	add	r3, r7
 8003c76:	2230      	movs	r2, #48	; 0x30
 8003c78:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c84:	2b1f      	cmp	r3, #31
 8003c86:	d802      	bhi.n	8003c8e <_ftoa+0x18e>
 8003c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d8ee      	bhi.n	8003c6c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c92:	f7fc ff69 	bl	8000b68 <__aeabi_d2iz>
 8003c96:	4603      	mov	r3, r0
 8003c98:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003c9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c9c:	f7fc fc4a 	bl	8000534 <__aeabi_i2d>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ca8:	f7fc faf6 	bl	8000298 <__aeabi_dsub>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4a4f      	ldr	r2, [pc, #316]	; (8003df4 <_ftoa+0x2f4>)
 8003cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fca2 	bl	8000608 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003ccc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003cd0:	f7fc ff72 	bl	8000bb8 <__aeabi_d2uiz>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003cd8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003cda:	f7fc fc1b 	bl	8000514 <__aeabi_ui2d>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003ce6:	f7fc fad7 	bl	8000298 <__aeabi_dsub>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <_ftoa+0x2f8>)
 8003cf8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003cfc:	f7fc ff14 	bl	8000b28 <__aeabi_dcmpgt>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <_ftoa+0x234>
    ++frac;
 8003d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d08:	3301      	adds	r3, #1
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003d0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003d0e:	f7fc fc01 	bl	8000514 <__aeabi_ui2d>
 8003d12:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <_ftoa+0x2f4>)
 8003d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fef9 	bl	8000b14 <__aeabi_dcmpge>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01a      	beq.n	8003d5e <_ftoa+0x25e>
      frac = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	3301      	adds	r3, #1
 8003d30:	657b      	str	r3, [r7, #84]	; 0x54
 8003d32:	e014      	b.n	8003d5e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <_ftoa+0x2f8>)
 8003d3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d3e:	f7fc fed5 	bl	8000aec <__aeabi_dcmplt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <_ftoa+0x258>
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d14b      	bne.n	8003dfc <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003d64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003d66:	f7fc fbe5 	bl	8000534 <__aeabi_i2d>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d72:	f7fc fa91 	bl	8000298 <__aeabi_dsub>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003d7e:	2301      	movs	r3, #1
 8003d80:	461c      	mov	r4, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <_ftoa+0x2f8>)
 8003d88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d8c:	f7fc feae 	bl	8000aec <__aeabi_dcmplt>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <_ftoa+0x29a>
 8003d96:	2300      	movs	r3, #0
 8003d98:	461c      	mov	r4, r3
 8003d9a:	b2e3      	uxtb	r3, r4
 8003d9c:	f083 0301 	eor.w	r3, r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <_ftoa+0x2ba>
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <_ftoa+0x2f8>)
 8003dac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003db0:	f7fc feba 	bl	8000b28 <__aeabi_dcmpgt>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d064      	beq.n	8003e84 <_ftoa+0x384>
 8003dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8081 	beq.w	8003ec8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	3301      	adds	r3, #1
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
 8003dcc:	e07c      	b.n	8003ec8 <_ftoa+0x3c8>
 8003dce:	bf00      	nop
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	41cdcd65 	.word	0x41cdcd65
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	c1cdcd65 	.word	0xc1cdcd65
 8003de0:	08011640 	.word	0x08011640
 8003de4:	08011644 	.word	0x08011644
 8003de8:	7fefffff 	.word	0x7fefffff
 8003dec:	0801164c 	.word	0x0801164c
 8003df0:	08011654 	.word	0x08011654
 8003df4:	08011b38 	.word	0x08011b38
 8003df8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e00:	e01f      	b.n	8003e42 <_ftoa+0x342>
      --count;
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	3b01      	subs	r3, #1
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003e08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e0a:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <_ftoa+0x4a4>)
 8003e0c:	fba3 2301 	umull	r2, r3, r3, r1
 8003e10:	08da      	lsrs	r2, r3, #3
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	1aca      	subs	r2, r1, r3
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e20:	1c59      	adds	r1, r3, #1
 8003e22:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003e24:	3230      	adds	r2, #48	; 0x30
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	3360      	adds	r3, #96	; 0x60
 8003e2a:	443b      	add	r3, r7
 8003e2c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e32:	4a5c      	ldr	r2, [pc, #368]	; (8003fa4 <_ftoa+0x4a4>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e44:	2b1f      	cmp	r3, #31
 8003e46:	d9dc      	bls.n	8003e02 <_ftoa+0x302>
 8003e48:	e009      	b.n	8003e5e <_ftoa+0x35e>
        break;
 8003e4a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003e4c:	e007      	b.n	8003e5e <_ftoa+0x35e>
      buf[len++] = '0';
 8003e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e54:	3360      	adds	r3, #96	; 0x60
 8003e56:	443b      	add	r3, r7
 8003e58:	2230      	movs	r2, #48	; 0x30
 8003e5a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e60:	2b1f      	cmp	r3, #31
 8003e62:	d804      	bhi.n	8003e6e <_ftoa+0x36e>
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ef      	bne.n	8003e4e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e70:	2b1f      	cmp	r3, #31
 8003e72:	d829      	bhi.n	8003ec8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e7a:	3360      	adds	r3, #96	; 0x60
 8003e7c:	443b      	add	r3, r7
 8003e7e:	222e      	movs	r2, #46	; 0x2e
 8003e80:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e84:	e020      	b.n	8003ec8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003e86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e88:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <_ftoa+0x4a8>)
 8003e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8003e8e:	1099      	asrs	r1, r3, #2
 8003e90:	17d3      	asrs	r3, r2, #31
 8003e92:	1ac9      	subs	r1, r1, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	1ad1      	subs	r1, r2, r3
 8003e9e:	b2ca      	uxtb	r2, r1
 8003ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea2:	1c59      	adds	r1, r3, #1
 8003ea4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003ea6:	3230      	adds	r2, #48	; 0x30
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	3360      	adds	r3, #96	; 0x60
 8003eac:	443b      	add	r3, r7
 8003eae:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <_ftoa+0x4a8>)
 8003eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8003eba:	1092      	asrs	r2, r2, #2
 8003ebc:	17db      	asrs	r3, r3, #31
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eca:	2b1f      	cmp	r3, #31
 8003ecc:	d9db      	bls.n	8003e86 <_ftoa+0x386>
 8003ece:	e000      	b.n	8003ed2 <_ftoa+0x3d2>
      break;
 8003ed0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d123      	bne.n	8003f24 <_ftoa+0x424>
 8003edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01e      	beq.n	8003f24 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d014      	beq.n	8003f16 <_ftoa+0x416>
 8003eec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <_ftoa+0x3fe>
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <_ftoa+0x416>
      width--;
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	3b01      	subs	r3, #1
 8003f02:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003f04:	e007      	b.n	8003f16 <_ftoa+0x416>
      buf[len++] = '0';
 8003f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f0c:	3360      	adds	r3, #96	; 0x60
 8003f0e:	443b      	add	r3, r7
 8003f10:	2230      	movs	r2, #48	; 0x30
 8003f12:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003f16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d202      	bcs.n	8003f24 <_ftoa+0x424>
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f20:	2b1f      	cmp	r3, #31
 8003f22:	d9f0      	bls.n	8003f06 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f26:	2b1f      	cmp	r3, #31
 8003f28:	d827      	bhi.n	8003f7a <_ftoa+0x47a>
    if (negative) {
 8003f2a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <_ftoa+0x444>
      buf[len++] = '-';
 8003f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f38:	3360      	adds	r3, #96	; 0x60
 8003f3a:	443b      	add	r3, r7
 8003f3c:	222d      	movs	r2, #45	; 0x2d
 8003f3e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003f42:	e01a      	b.n	8003f7a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f54:	3360      	adds	r3, #96	; 0x60
 8003f56:	443b      	add	r3, r7
 8003f58:	222b      	movs	r2, #43	; 0x2b
 8003f5a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003f5e:	e00c      	b.n	8003f7a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <_ftoa+0x47a>
      buf[len++] = ' ';
 8003f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f70:	3360      	adds	r3, #96	; 0x60
 8003f72:	443b      	add	r3, r7
 8003f74:	2220      	movs	r2, #32
 8003f76:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7c:	9303      	str	r3, [sp, #12]
 8003f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f80:	9302      	str	r3, [sp, #8]
 8003f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	f107 0318 	add.w	r3, r7, #24
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	6939      	ldr	r1, [r7, #16]
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f7ff fbb3 	bl	80036fe <_out_rev>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3764      	adds	r7, #100	; 0x64
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	cccccccd 	.word	0xcccccccd
 8003fa8:	66666667 	.word	0x66666667
 8003fac:	00000000 	.word	0x00000000

08003fb0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b09f      	sub	sp, #124	; 0x7c
 8003fb6:	af06      	add	r7, sp, #24
 8003fb8:	6278      	str	r0, [r7, #36]	; 0x24
 8003fba:	6239      	str	r1, [r7, #32]
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003fc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fcc:	f7fc fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d014      	beq.n	8004000 <_etoa+0x50>
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	4bc1      	ldr	r3, [pc, #772]	; (80042e0 <_etoa+0x330>)
 8003fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fe0:	f7fc fda2 	bl	8000b28 <__aeabi_dcmpgt>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <_etoa+0x50>
 8003fea:	f04f 32ff 	mov.w	r2, #4294967295
 8003fee:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003ff2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ff6:	f7fc fd79 	bl	8000aec <__aeabi_dcmplt>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	ed97 0b04 	vldr	d0, [r7, #16]
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	6a39      	ldr	r1, [r7, #32]
 800401c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800401e:	f7ff fd6f 	bl	8003b00 <_ftoa>
 8004022:	4603      	mov	r3, r0
 8004024:	e23f      	b.n	80044a6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8004026:	2301      	movs	r3, #1
 8004028:	461e      	mov	r6, r3
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004036:	f7fc fd59 	bl	8000aec <__aeabi_dcmplt>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <_etoa+0x94>
 8004040:	2300      	movs	r3, #0
 8004042:	461e      	mov	r6, r3
 8004044:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8004048:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <_etoa+0xb4>
    value = -value;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	ed97 7b00 	vldr	d7, [r7]
 8004060:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004070:	2306      	movs	r3, #6
 8004072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004076:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800407a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800407e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	0d0a      	lsrs	r2, r1, #20
 800408c:	2300      	movs	r3, #0
 800408e:	4613      	mov	r3, r2
 8004090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004094:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004098:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800409a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800409e:	4690      	mov	r8, r2
 80040a0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80040a4:	4644      	mov	r4, r8
 80040a6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80040aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80040ae:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80040b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040b4:	f7fc fa3e 	bl	8000534 <__aeabi_i2d>
 80040b8:	a37d      	add	r3, pc, #500	; (adr r3, 80042b0 <_etoa+0x300>)
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f7fc faa3 	bl	8000608 <__aeabi_dmul>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	a37b      	add	r3, pc, #492	; (adr r3, 80042b8 <_etoa+0x308>)
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f7fc f8e4 	bl	800029c <__adddf3>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4614      	mov	r4, r2
 80040da:	461d      	mov	r5, r3
 80040dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	4b7f      	ldr	r3, [pc, #508]	; (80042e4 <_etoa+0x334>)
 80040e6:	f7fc f8d7 	bl	8000298 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	a373      	add	r3, pc, #460	; (adr r3, 80042c0 <_etoa+0x310>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc fa86 	bl	8000608 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	f7fc f8ca 	bl	800029c <__adddf3>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f7fc fd2a 	bl	8000b68 <__aeabi_d2iz>
 8004114:	4603      	mov	r3, r0
 8004116:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004118:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800411a:	f7fc fa0b 	bl	8000534 <__aeabi_i2d>
 800411e:	a36a      	add	r3, pc, #424	; (adr r3, 80042c8 <_etoa+0x318>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc fa70 	bl	8000608 <__aeabi_dmul>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <_etoa+0x338>)
 8004136:	f7fc f8b1 	bl	800029c <__adddf3>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f7fc fd11 	bl	8000b68 <__aeabi_d2iz>
 8004146:	4603      	mov	r3, r0
 8004148:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800414a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800414c:	f7fc f9f2 	bl	8000534 <__aeabi_i2d>
 8004150:	a35f      	add	r3, pc, #380	; (adr r3, 80042d0 <_etoa+0x320>)
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f7fc fa57 	bl	8000608 <__aeabi_dmul>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4614      	mov	r4, r2
 8004160:	461d      	mov	r5, r3
 8004162:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004164:	f7fc f9e6 	bl	8000534 <__aeabi_i2d>
 8004168:	a35b      	add	r3, pc, #364	; (adr r3, 80042d8 <_etoa+0x328>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f7fc fa4b 	bl	8000608 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc f88d 	bl	8000298 <__aeabi_dsub>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8004186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800418a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800418e:	f7fc fa3b 	bl	8000608 <__aeabi_dmul>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800419a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80041a0:	17da      	asrs	r2, r3, #31
 80041a2:	469a      	mov	sl, r3
 80041a4:	4693      	mov	fp, r2
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80041b2:	2200      	movs	r2, #0
 80041b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80041b8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80041bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	f7fc f86a 	bl	800029c <__adddf3>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4690      	mov	r8, r2
 80041ce:	4699      	mov	r9, r3
 80041d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80041dc:	f7fc f85c 	bl	8000298 <__aeabi_dsub>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4692      	mov	sl, r2
 80041e6:	469b      	mov	fp, r3
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <_etoa+0x33c>)
 80041ee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80041f2:	f7fc fb33 	bl	800085c <__aeabi_ddiv>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <_etoa+0x340>)
 8004204:	f7fc f84a 	bl	800029c <__adddf3>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004210:	f7fc fb24 	bl	800085c <__aeabi_ddiv>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <_etoa+0x344>)
 8004222:	f7fc f83b 	bl	800029c <__adddf3>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800422e:	f7fc fb15 	bl	800085c <__aeabi_ddiv>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4650      	mov	r0, sl
 8004238:	4659      	mov	r1, fp
 800423a:	f7fc f82f 	bl	800029c <__adddf3>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fc fb09 	bl	800085c <__aeabi_ddiv>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <_etoa+0x348>)
 8004258:	f7fc f820 	bl	800029c <__adddf3>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4620      	mov	r0, r4
 8004262:	4629      	mov	r1, r5
 8004264:	f7fc f9d0 	bl	8000608 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004274:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004278:	f7fc fc38 	bl	8000aec <__aeabi_dcmplt>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <_etoa+0x2ee>
    expval--;
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	3b01      	subs	r3, #1
 8004286:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004288:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <_etoa+0x340>)
 8004292:	f7fc fae3 	bl	800085c <__aeabi_ddiv>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800429e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a0:	2b63      	cmp	r3, #99	; 0x63
 80042a2:	dc2b      	bgt.n	80042fc <_etoa+0x34c>
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80042aa:	db27      	blt.n	80042fc <_etoa+0x34c>
 80042ac:	2304      	movs	r3, #4
 80042ae:	e026      	b.n	80042fe <_etoa+0x34e>
 80042b0:	509f79fb 	.word	0x509f79fb
 80042b4:	3fd34413 	.word	0x3fd34413
 80042b8:	8b60c8b3 	.word	0x8b60c8b3
 80042bc:	3fc68a28 	.word	0x3fc68a28
 80042c0:	636f4361 	.word	0x636f4361
 80042c4:	3fd287a7 	.word	0x3fd287a7
 80042c8:	0979a371 	.word	0x0979a371
 80042cc:	400a934f 	.word	0x400a934f
 80042d0:	bbb55516 	.word	0xbbb55516
 80042d4:	40026bb1 	.word	0x40026bb1
 80042d8:	fefa39ef 	.word	0xfefa39ef
 80042dc:	3fe62e42 	.word	0x3fe62e42
 80042e0:	7fefffff 	.word	0x7fefffff
 80042e4:	3ff80000 	.word	0x3ff80000
 80042e8:	3fe00000 	.word	0x3fe00000
 80042ec:	402c0000 	.word	0x402c0000
 80042f0:	40240000 	.word	0x40240000
 80042f4:	40180000 	.word	0x40180000
 80042f8:	3ff00000 	.word	0x3ff00000
 80042fc:	2305      	movs	r3, #5
 80042fe:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03d      	beq.n	8004388 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800430c:	a368      	add	r3, pc, #416	; (adr r3, 80044b0 <_etoa+0x500>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004316:	f7fc fbfd 	bl	8000b14 <__aeabi_dcmpge>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d024      	beq.n	800436a <_etoa+0x3ba>
 8004320:	a365      	add	r3, pc, #404	; (adr r3, 80044b8 <_etoa+0x508>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800432a:	f7fc fbdf 	bl	8000aec <__aeabi_dcmplt>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01a      	beq.n	800436a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800433a:	429a      	cmp	r2, r3
 800433c:	da07      	bge.n	800434e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800433e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800434c:	e002      	b.n	8004354 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004368:	e00e      	b.n	8004388 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800436a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <_etoa+0x3d8>
 8004372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <_etoa+0x3d8>
        --prec;
 800437e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004382:	3b01      	subs	r3, #1
 8004384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800438e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004394:	429a      	cmp	r2, r3
 8004396:	d904      	bls.n	80043a2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004398:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800439a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	e001      	b.n	80043a6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80043a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <_etoa+0x40c>
 80043b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80043bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <_etoa+0x426>
    value /= conv.F;
 80043c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043ca:	f7fc fa47 	bl	800085c <__aeabi_ddiv>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80043da:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <_etoa+0x440>
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e003      	b.n	80043f8 <_etoa+0x448>
 80043f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80043f4:	ed87 7b02 	vstr	d7, [r7, #8]
 80043f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	6a39      	ldr	r1, [r7, #32]
 8004416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004418:	f7ff fb72 	bl	8003b00 <_ftoa>
 800441c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800441e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004420:	2b00      	cmp	r3, #0
 8004422:	d03f      	beq.n	80044a4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004424:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <_etoa+0x484>
 8004430:	2045      	movs	r0, #69	; 0x45
 8004432:	e000      	b.n	8004436 <_etoa+0x486>
 8004434:	2065      	movs	r0, #101	; 0x65
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	1c53      	adds	r3, r2, #1
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6a39      	ldr	r1, [r7, #32]
 8004442:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004446:	2b00      	cmp	r3, #0
 8004448:	bfb8      	it	lt
 800444a:	425b      	neglt	r3, r3
 800444c:	4618      	mov	r0, r3
 800444e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004450:	0fdb      	lsrs	r3, r3, #31
 8004452:	b2db      	uxtb	r3, r3
 8004454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004456:	3a01      	subs	r2, #1
 8004458:	2105      	movs	r1, #5
 800445a:	9105      	str	r1, [sp, #20]
 800445c:	9204      	str	r2, [sp, #16]
 800445e:	2200      	movs	r2, #0
 8004460:	9203      	str	r2, [sp, #12]
 8004462:	220a      	movs	r2, #10
 8004464:	9202      	str	r2, [sp, #8]
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	9000      	str	r0, [sp, #0]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	6a39      	ldr	r1, [r7, #32]
 8004470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004472:	f7ff fa70 	bl	8003956 <_ntoa_long>
 8004476:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00f      	beq.n	80044a4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004484:	e007      	b.n	8004496 <_etoa+0x4e6>
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	1c53      	adds	r3, r2, #1
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6a39      	ldr	r1, [r7, #32]
 8004492:	2020      	movs	r0, #32
 8004494:	47a0      	blx	r4
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d8f0      	bhi.n	8004486 <_etoa+0x4d6>
    }
  }
  return idx;
 80044a4:	69fb      	ldr	r3, [r7, #28]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3764      	adds	r7, #100	; 0x64
 80044aa:	46bd      	mov	sp, r7
 80044ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b0:	eb1c432d 	.word	0xeb1c432d
 80044b4:	3f1a36e2 	.word	0x3f1a36e2
 80044b8:	00000000 	.word	0x00000000
 80044bc:	412e8480 	.word	0x412e8480

080044c0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	b0a3      	sub	sp, #140	; 0x8c
 80044c6:	af0a      	add	r7, sp, #40	; 0x28
 80044c8:	6178      	str	r0, [r7, #20]
 80044ca:	6139      	str	r1, [r7, #16]
 80044cc:	60fa      	str	r2, [r7, #12]
 80044ce:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 84cf 	bne.w	8004e7a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80044dc:	4ba8      	ldr	r3, [pc, #672]	; (8004780 <_vsnprintf+0x2c0>)
 80044de:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80044e0:	f000 bccb 	b.w	8004e7a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b25      	cmp	r3, #37	; 0x25
 80044ea:	d00d      	beq.n	8004508 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	7818      	ldrb	r0, [r3, #0]
 80044f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f2:	1c53      	adds	r3, r2, #1
 80044f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f6:	697c      	ldr	r4, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6939      	ldr	r1, [r7, #16]
 80044fc:	47a0      	blx	r4
      format++;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	3301      	adds	r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
      continue;
 8004504:	f000 bcb9 	b.w	8004e7a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3301      	adds	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	3b20      	subs	r3, #32
 8004518:	2b10      	cmp	r3, #16
 800451a:	d857      	bhi.n	80045cc <_vsnprintf+0x10c>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <_vsnprintf+0x64>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	080045a5 	.word	0x080045a5
 8004528:	080045cd 	.word	0x080045cd
 800452c:	080045cd 	.word	0x080045cd
 8004530:	080045b9 	.word	0x080045b9
 8004534:	080045cd 	.word	0x080045cd
 8004538:	080045cd 	.word	0x080045cd
 800453c:	080045cd 	.word	0x080045cd
 8004540:	080045cd 	.word	0x080045cd
 8004544:	080045cd 	.word	0x080045cd
 8004548:	080045cd 	.word	0x080045cd
 800454c:	080045cd 	.word	0x080045cd
 8004550:	08004591 	.word	0x08004591
 8004554:	080045cd 	.word	0x080045cd
 8004558:	0800457d 	.word	0x0800457d
 800455c:	080045cd 	.word	0x080045cd
 8004560:	080045cd 	.word	0x080045cd
 8004564:	08004569 	.word	0x08004569
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3301      	adds	r3, #1
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	2301      	movs	r3, #1
 8004578:	653b      	str	r3, [r7, #80]	; 0x50
 800457a:	e02a      	b.n	80045d2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800457c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3301      	adds	r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	2301      	movs	r3, #1
 800458c:	653b      	str	r3, [r7, #80]	; 0x50
 800458e:	e020      	b.n	80045d2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3301      	adds	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	2301      	movs	r3, #1
 80045a0:	653b      	str	r3, [r7, #80]	; 0x50
 80045a2:	e016      	b.n	80045d2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80045a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a6:	f043 0308 	orr.w	r3, r3, #8
 80045aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3301      	adds	r3, #1
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	2301      	movs	r3, #1
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
 80045b6:	e00c      	b.n	80045d2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80045b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ba:	f043 0310 	orr.w	r3, r3, #16
 80045be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	2301      	movs	r3, #1
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
 80045ca:	e002      	b.n	80045d2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80045cc:	2300      	movs	r3, #0
 80045ce:	653b      	str	r3, [r7, #80]	; 0x50
 80045d0:	bf00      	nop
      }
    } while (n);
 80045d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d19c      	bne.n	8004512 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f851 	bl	8003688 <_is_digit>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <_vsnprintf+0x13a>
      width = _atoi(&format);
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f860 	bl	80036b6 <_atoi>
 80045f6:	65b8      	str	r0, [r7, #88]	; 0x58
 80045f8:	e01a      	b.n	8004630 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d116      	bne.n	8004630 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	2b00      	cmp	r3, #0
 8004614:	da07      	bge.n	8004626 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	425b      	negs	r3, r3
 8004622:	65bb      	str	r3, [r7, #88]	; 0x58
 8004624:	e001      	b.n	800462a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3301      	adds	r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b2e      	cmp	r3, #46	; 0x2e
 800463a:	d127      	bne.n	800468c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800463c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004642:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3301      	adds	r3, #1
 8004648:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff f81a 	bl	8003688 <_is_digit>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff f829 	bl	80036b6 <_atoi>
 8004664:	6578      	str	r0, [r7, #84]	; 0x54
 8004666:	e011      	b.n	800468c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d10d      	bne.n	800468c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004674:	1d1a      	adds	r2, r3, #4
 8004676:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004684:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3301      	adds	r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	3b68      	subs	r3, #104	; 0x68
 8004692:	2b12      	cmp	r3, #18
 8004694:	d866      	bhi.n	8004764 <_vsnprintf+0x2a4>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <_vsnprintf+0x1dc>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	0800470f 	.word	0x0800470f
 80046a0:	08004765 	.word	0x08004765
 80046a4:	08004745 	.word	0x08004745
 80046a8:	08004765 	.word	0x08004765
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	08004765 	.word	0x08004765
 80046b4:	08004765 	.word	0x08004765
 80046b8:	08004765 	.word	0x08004765
 80046bc:	08004765 	.word	0x08004765
 80046c0:	08004765 	.word	0x08004765
 80046c4:	08004765 	.word	0x08004765
 80046c8:	08004765 	.word	0x08004765
 80046cc:	08004735 	.word	0x08004735
 80046d0:	08004765 	.word	0x08004765
 80046d4:	08004765 	.word	0x08004765
 80046d8:	08004765 	.word	0x08004765
 80046dc:	08004765 	.word	0x08004765
 80046e0:	08004765 	.word	0x08004765
 80046e4:	08004755 	.word	0x08004755
      case 'l' :
        flags |= FLAGS_LONG;
 80046e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b6c      	cmp	r3, #108	; 0x6c
 80046fc:	d134      	bne.n	8004768 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80046fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800470c:	e02c      	b.n	8004768 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800470e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b68      	cmp	r3, #104	; 0x68
 8004722:	d123      	bne.n	800476c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8004724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	3301      	adds	r3, #1
 8004730:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004732:	e01b      	b.n	800476c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3301      	adds	r3, #1
 8004740:	60bb      	str	r3, [r7, #8]
        break;
 8004742:	e014      	b.n	800476e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	3301      	adds	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]
        break;
 8004752:	e00c      	b.n	800476e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3301      	adds	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
        break;
 8004762:	e004      	b.n	800476e <_vsnprintf+0x2ae>
      default :
        break;
 8004764:	bf00      	nop
 8004766:	e002      	b.n	800476e <_vsnprintf+0x2ae>
        break;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <_vsnprintf+0x2ae>
        break;
 800476c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b67      	cmp	r3, #103	; 0x67
 8004774:	f300 80b8 	bgt.w	80048e8 <_vsnprintf+0x428>
 8004778:	2b25      	cmp	r3, #37	; 0x25
 800477a:	da27      	bge.n	80047cc <_vsnprintf+0x30c>
 800477c:	e370      	b.n	8004e60 <_vsnprintf+0x9a0>
 800477e:	bf00      	nop
 8004780:	0800360d 	.word	0x0800360d
 8004784:	3b69      	subs	r3, #105	; 0x69
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	f249 0241 	movw	r2, #36929	; 0x9041
 8004790:	401a      	ands	r2, r3
 8004792:	2a00      	cmp	r2, #0
 8004794:	bf14      	ite	ne
 8004796:	2201      	movne	r2, #1
 8004798:	2200      	moveq	r2, #0
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	2a00      	cmp	r2, #0
 800479e:	f040 80aa 	bne.w	80048f6 <_vsnprintf+0x436>
 80047a2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2201      	movne	r2, #1
 80047ac:	2200      	moveq	r2, #0
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	f040 82fb 	bne.w	8004dac <_vsnprintf+0x8ec>
 80047b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 828d 	bne.w	8004ce4 <_vsnprintf+0x824>
 80047ca:	e349      	b.n	8004e60 <_vsnprintf+0x9a0>
 80047cc:	3b25      	subs	r3, #37	; 0x25
 80047ce:	2b42      	cmp	r3, #66	; 0x42
 80047d0:	f200 8346 	bhi.w	8004e60 <_vsnprintf+0x9a0>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <_vsnprintf+0x31c>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004e49 	.word	0x08004e49
 80047e0:	08004e61 	.word	0x08004e61
 80047e4:	08004e61 	.word	0x08004e61
 80047e8:	08004e61 	.word	0x08004e61
 80047ec:	08004e61 	.word	0x08004e61
 80047f0:	08004e61 	.word	0x08004e61
 80047f4:	08004e61 	.word	0x08004e61
 80047f8:	08004e61 	.word	0x08004e61
 80047fc:	08004e61 	.word	0x08004e61
 8004800:	08004e61 	.word	0x08004e61
 8004804:	08004e61 	.word	0x08004e61
 8004808:	08004e61 	.word	0x08004e61
 800480c:	08004e61 	.word	0x08004e61
 8004810:	08004e61 	.word	0x08004e61
 8004814:	08004e61 	.word	0x08004e61
 8004818:	08004e61 	.word	0x08004e61
 800481c:	08004e61 	.word	0x08004e61
 8004820:	08004e61 	.word	0x08004e61
 8004824:	08004e61 	.word	0x08004e61
 8004828:	08004e61 	.word	0x08004e61
 800482c:	08004e61 	.word	0x08004e61
 8004830:	08004e61 	.word	0x08004e61
 8004834:	08004e61 	.word	0x08004e61
 8004838:	08004e61 	.word	0x08004e61
 800483c:	08004e61 	.word	0x08004e61
 8004840:	08004e61 	.word	0x08004e61
 8004844:	08004e61 	.word	0x08004e61
 8004848:	08004e61 	.word	0x08004e61
 800484c:	08004e61 	.word	0x08004e61
 8004850:	08004e61 	.word	0x08004e61
 8004854:	08004e61 	.word	0x08004e61
 8004858:	08004e61 	.word	0x08004e61
 800485c:	08004bfd 	.word	0x08004bfd
 8004860:	08004bad 	.word	0x08004bad
 8004864:	08004bfd 	.word	0x08004bfd
 8004868:	08004e61 	.word	0x08004e61
 800486c:	08004e61 	.word	0x08004e61
 8004870:	08004e61 	.word	0x08004e61
 8004874:	08004e61 	.word	0x08004e61
 8004878:	08004e61 	.word	0x08004e61
 800487c:	08004e61 	.word	0x08004e61
 8004880:	08004e61 	.word	0x08004e61
 8004884:	08004e61 	.word	0x08004e61
 8004888:	08004e61 	.word	0x08004e61
 800488c:	08004e61 	.word	0x08004e61
 8004890:	08004e61 	.word	0x08004e61
 8004894:	08004e61 	.word	0x08004e61
 8004898:	08004e61 	.word	0x08004e61
 800489c:	08004e61 	.word	0x08004e61
 80048a0:	08004e61 	.word	0x08004e61
 80048a4:	08004e61 	.word	0x08004e61
 80048a8:	080048f7 	.word	0x080048f7
 80048ac:	08004e61 	.word	0x08004e61
 80048b0:	08004e61 	.word	0x08004e61
 80048b4:	08004e61 	.word	0x08004e61
 80048b8:	08004e61 	.word	0x08004e61
 80048bc:	08004e61 	.word	0x08004e61
 80048c0:	08004e61 	.word	0x08004e61
 80048c4:	08004e61 	.word	0x08004e61
 80048c8:	08004e61 	.word	0x08004e61
 80048cc:	08004e61 	.word	0x08004e61
 80048d0:	080048f7 	.word	0x080048f7
 80048d4:	08004c6d 	.word	0x08004c6d
 80048d8:	080048f7 	.word	0x080048f7
 80048dc:	08004bfd 	.word	0x08004bfd
 80048e0:	08004bad 	.word	0x08004bad
 80048e4:	08004bfd 	.word	0x08004bfd
 80048e8:	2b78      	cmp	r3, #120	; 0x78
 80048ea:	f300 82b9 	bgt.w	8004e60 <_vsnprintf+0x9a0>
 80048ee:	2b69      	cmp	r3, #105	; 0x69
 80048f0:	f6bf af48 	bge.w	8004784 <_vsnprintf+0x2c4>
 80048f4:	e2b4      	b.n	8004e60 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b78      	cmp	r3, #120	; 0x78
 80048fc:	d003      	beq.n	8004906 <_vsnprintf+0x446>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b58      	cmp	r3, #88	; 0x58
 8004904:	d102      	bne.n	800490c <_vsnprintf+0x44c>
          base = 16U;
 8004906:	2310      	movs	r3, #16
 8004908:	64bb      	str	r3, [r7, #72]	; 0x48
 800490a:	e013      	b.n	8004934 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b6f      	cmp	r3, #111	; 0x6f
 8004912:	d102      	bne.n	800491a <_vsnprintf+0x45a>
          base =  8U;
 8004914:	2308      	movs	r3, #8
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
 8004918:	e00c      	b.n	8004934 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b62      	cmp	r3, #98	; 0x62
 8004920:	d102      	bne.n	8004928 <_vsnprintf+0x468>
          base =  2U;
 8004922:	2302      	movs	r3, #2
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
 8004926:	e005      	b.n	8004934 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8004928:	230a      	movs	r3, #10
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800492c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b58      	cmp	r3, #88	; 0x58
 800493a:	d103      	bne.n	8004944 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800493c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b69      	cmp	r3, #105	; 0x69
 800494a:	d007      	beq.n	800495c <_vsnprintf+0x49c>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b64      	cmp	r3, #100	; 0x64
 8004952:	d003      	beq.n	800495c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004956:	f023 030c 	bic.w	r3, r3, #12
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800495c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8004966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b69      	cmp	r3, #105	; 0x69
 8004974:	d004      	beq.n	8004980 <_vsnprintf+0x4c0>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	f040 8098 	bne.w	8004ab0 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004986:	2b00      	cmp	r3, #0
 8004988:	d031      	beq.n	80049ee <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800498a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800498e:	3307      	adds	r3, #7
 8004990:	f023 0307 	bic.w	r3, r3, #7
 8004994:	f103 0208 	add.w	r2, r3, #8
 8004998:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80049a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da06      	bge.n	80049ba <_vsnprintf+0x4fa>
 80049ac:	2100      	movs	r1, #0
 80049ae:	f1d2 0800 	rsbs	r8, r2, #0
 80049b2:	eb61 0903 	sbc.w	r9, r1, r3
 80049b6:	4642      	mov	r2, r8
 80049b8:	464b      	mov	r3, r9
 80049ba:	69f9      	ldr	r1, [r7, #28]
 80049bc:	0fc9      	lsrs	r1, r1, #31
 80049be:	b2c9      	uxtb	r1, r1
 80049c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80049c2:	2400      	movs	r4, #0
 80049c4:	4682      	mov	sl, r0
 80049c6:	46a3      	mov	fp, r4
 80049c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80049ca:	9008      	str	r0, [sp, #32]
 80049cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80049ce:	9007      	str	r0, [sp, #28]
 80049d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80049d2:	9006      	str	r0, [sp, #24]
 80049d4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80049d8:	9102      	str	r1, [sp, #8]
 80049da:	e9cd 2300 	strd	r2, r3, [sp]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e2:	6939      	ldr	r1, [r7, #16]
 80049e4:	6978      	ldr	r0, [r7, #20]
 80049e6:	f7ff f81c 	bl	8003a22 <_ntoa_long_long>
 80049ea:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80049ec:	e0da      	b.n	8004ba4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80049f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049fc:	1d1a      	adds	r2, r3, #4
 80049fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfb8      	it	lt
 8004a0c:	425b      	neglt	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	0fdb      	lsrs	r3, r3, #31
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a18:	9205      	str	r2, [sp, #20]
 8004a1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a1c:	9204      	str	r2, [sp, #16]
 8004a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a20:	9203      	str	r2, [sp, #12]
 8004a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a24:	9202      	str	r2, [sp, #8]
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	9100      	str	r1, [sp, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a2e:	6939      	ldr	r1, [r7, #16]
 8004a30:	6978      	ldr	r0, [r7, #20]
 8004a32:	f7fe ff90 	bl	8003956 <_ntoa_long>
 8004a36:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004a38:	e0b4      	b.n	8004ba4 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <_vsnprintf+0x594>
 8004a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a48:	1d1a      	adds	r2, r3, #4
 8004a4a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e012      	b.n	8004a7a <_vsnprintf+0x5ba>
 8004a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <_vsnprintf+0x5ae>
 8004a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	b21b      	sxth	r3, r3
 8004a6c:	e005      	b.n	8004a7a <_vsnprintf+0x5ba>
 8004a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfb8      	it	lt
 8004a82:	425b      	neglt	r3, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	0fdb      	lsrs	r3, r3, #31
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a8e:	9205      	str	r2, [sp, #20]
 8004a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a92:	9204      	str	r2, [sp, #16]
 8004a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a96:	9203      	str	r2, [sp, #12]
 8004a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a9a:	9202      	str	r2, [sp, #8]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	9100      	str	r1, [sp, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa4:	6939      	ldr	r1, [r7, #16]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7fe ff55 	bl	8003956 <_ntoa_long>
 8004aac:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004aae:	e079      	b.n	8004ba4 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d022      	beq.n	8004b00 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004abe:	3307      	adds	r3, #7
 8004ac0:	f023 0307 	bic.w	r3, r3, #7
 8004ac4:	f103 0208 	add.w	r2, r3, #8
 8004ac8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	460d      	mov	r5, r1
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004ada:	9108      	str	r1, [sp, #32]
 8004adc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ade:	9107      	str	r1, [sp, #28]
 8004ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ae2:	9106      	str	r1, [sp, #24]
 8004ae4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	9102      	str	r1, [sp, #8]
 8004aec:	e9cd 2300 	strd	r2, r3, [sp]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004af4:	6939      	ldr	r1, [r7, #16]
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7fe ff93 	bl	8003a22 <_ntoa_long_long>
 8004afc:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004afe:	e051      	b.n	8004ba4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b18:	9205      	str	r2, [sp, #20]
 8004b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1c:	9204      	str	r2, [sp, #16]
 8004b1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b20:	9203      	str	r2, [sp, #12]
 8004b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b24:	9202      	str	r2, [sp, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	9201      	str	r2, [sp, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b30:	6939      	ldr	r1, [r7, #16]
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7fe ff0f 	bl	8003956 <_ntoa_long>
 8004b38:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004b3a:	e033      	b.n	8004ba4 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <_vsnprintf+0x696>
 8004b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e012      	b.n	8004b7c <_vsnprintf+0x6bc>
 8004b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <_vsnprintf+0x6b0>
 8004b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	e005      	b.n	8004b7c <_vsnprintf+0x6bc>
 8004b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b74:	1d1a      	adds	r2, r3, #4
 8004b76:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b80:	9305      	str	r3, [sp, #20]
 8004b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8c:	9302      	str	r3, [sp, #8]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b9a:	6939      	ldr	r1, [r7, #16]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7fe feda 	bl	8003956 <_ntoa_long>
 8004ba2:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]
        break;
 8004baa:	e166      	b.n	8004e7a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b46      	cmp	r3, #70	; 0x46
 8004bb2:	d103      	bne.n	8004bbc <_vsnprintf+0x6fc>
 8004bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	f103 0208 	add.w	r2, r3, #8
 8004bca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004bce:	ed93 7b00 	vldr	d7, [r3]
 8004bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd4:	9302      	str	r3, [sp, #8]
 8004bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	eeb0 0a47 	vmov.f32	s0, s14
 8004be2:	eef0 0a67 	vmov.f32	s1, s15
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	6978      	ldr	r0, [r7, #20]
 8004bee:	f7fe ff87 	bl	8003b00 <_ftoa>
 8004bf2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
        break;
 8004bfa:	e13e      	b.n	8004e7a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b67      	cmp	r3, #103	; 0x67
 8004c02:	d003      	beq.n	8004c0c <_vsnprintf+0x74c>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b47      	cmp	r3, #71	; 0x47
 8004c0a:	d103      	bne.n	8004c14 <_vsnprintf+0x754>
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c12:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b45      	cmp	r3, #69	; 0x45
 8004c1a:	d003      	beq.n	8004c24 <_vsnprintf+0x764>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b47      	cmp	r3, #71	; 0x47
 8004c22:	d103      	bne.n	8004c2c <_vsnprintf+0x76c>
 8004c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c26:	f043 0320 	orr.w	r3, r3, #32
 8004c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c30:	3307      	adds	r3, #7
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	f103 0208 	add.w	r2, r3, #8
 8004c3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c3e:	ed93 7b00 	vldr	d7, [r3]
 8004c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c52:	eef0 0a67 	vmov.f32	s1, s15
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c5a:	6939      	ldr	r1, [r7, #16]
 8004c5c:	6978      	ldr	r0, [r7, #20]
 8004c5e:	f7ff f9a7 	bl	8003fb0 <_etoa>
 8004c62:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3301      	adds	r3, #1
 8004c68:	60bb      	str	r3, [r7, #8]
        break;
 8004c6a:	e106      	b.n	8004e7a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10e      	bne.n	8004c98 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8004c7a:	e007      	b.n	8004c8c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8004c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c7e:	1c53      	adds	r3, r2, #1
 8004c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c82:	697c      	ldr	r4, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6939      	ldr	r1, [r7, #16]
 8004c88:	2020      	movs	r0, #32
 8004c8a:	47a0      	blx	r4
          while (l++ < width) {
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	647a      	str	r2, [r7, #68]	; 0x44
 8004c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d8f1      	bhi.n	8004c7c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b2d8      	uxtb	r0, r3
 8004ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ca8:	1c53      	adds	r3, r2, #1
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cac:	697c      	ldr	r4, [r7, #20]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6939      	ldr	r1, [r7, #16]
 8004cb2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <_vsnprintf+0x81c>
          while (l++ < width) {
 8004cbe:	e007      	b.n	8004cd0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8004cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cc2:	1c53      	adds	r3, r2, #1
 8004cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc6:	697c      	ldr	r4, [r7, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6939      	ldr	r1, [r7, #16]
 8004ccc:	2020      	movs	r0, #32
 8004cce:	47a0      	blx	r4
          while (l++ < width) {
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	647a      	str	r2, [r7, #68]	; 0x44
 8004cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d8f1      	bhi.n	8004cc0 <_vsnprintf+0x800>
          }
        }
        format++;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60bb      	str	r3, [r7, #8]
        break;
 8004ce2:	e0ca      	b.n	8004e7a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <_vsnprintf+0x83c>
 8004cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cfa:	e001      	b.n	8004d00 <_vsnprintf+0x840>
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004d00:	4619      	mov	r1, r3
 8004d02:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d04:	f7fe fca3 	bl	800364e <_strnlen_s>
 8004d08:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8004d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	bf28      	it	cs
 8004d1c:	4613      	movcs	r3, r2
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d11a      	bne.n	8004d60 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8004d2a:	e007      	b.n	8004d3c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8004d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d2e:	1c53      	adds	r3, r2, #1
 8004d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d32:	697c      	ldr	r4, [r7, #20]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6939      	ldr	r1, [r7, #16]
 8004d38:	2020      	movs	r0, #32
 8004d3a:	47a0      	blx	r4
          while (l++ < width) {
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d8f1      	bhi.n	8004d2c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004d48:	e00a      	b.n	8004d60 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8004d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	643a      	str	r2, [r7, #64]	; 0x40
 8004d50:	7818      	ldrb	r0, [r3, #0]
 8004d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d54:	1c53      	adds	r3, r2, #1
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d58:	697c      	ldr	r4, [r7, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6939      	ldr	r1, [r7, #16]
 8004d5e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <_vsnprintf+0x8bc>
 8004d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0eb      	beq.n	8004d4a <_vsnprintf+0x88a>
 8004d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	657a      	str	r2, [r7, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e6      	bne.n	8004d4a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00e      	beq.n	8004da4 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8004d86:	e007      	b.n	8004d98 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8004d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d8a:	1c53      	adds	r3, r2, #1
 8004d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8e:	697c      	ldr	r4, [r7, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6939      	ldr	r1, [r7, #16]
 8004d94:	2020      	movs	r0, #32
 8004d96:	47a0      	blx	r4
          while (l++ < width) {
 8004d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d8f1      	bhi.n	8004d88 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60bb      	str	r3, [r7, #8]
        break;
 8004daa:	e066      	b.n	8004e7a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004dac:	2308      	movs	r3, #8
 8004dae:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db2:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004db6:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d023      	beq.n	8004e0e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	603a      	str	r2, [r7, #0]
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	9308      	str	r3, [sp, #32]
 8004dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de0:	9307      	str	r3, [sp, #28]
 8004de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de4:	9306      	str	r3, [sp, #24]
 8004de6:	f04f 0210 	mov.w	r2, #16
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9302      	str	r3, [sp, #8]
 8004df6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004dfa:	e9cd 3400 	strd	r3, r4, [sp]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	6978      	ldr	r0, [r7, #20]
 8004e06:	f7fe fe0c 	bl	8003a22 <_ntoa_long_long>
 8004e0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004e0c:	e018      	b.n	8004e40 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e26:	9303      	str	r3, [sp, #12]
 8004e28:	2310      	movs	r3, #16
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	9200      	str	r2, [sp, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e36:	6939      	ldr	r1, [r7, #16]
 8004e38:	6978      	ldr	r0, [r7, #20]
 8004e3a:	f7fe fd8c 	bl	8003956 <_ntoa_long>
 8004e3e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3301      	adds	r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
        break;
 8004e46:	e018      	b.n	8004e7a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e4a:	1c53      	adds	r3, r2, #1
 8004e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4e:	697c      	ldr	r4, [r7, #20]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6939      	ldr	r1, [r7, #16]
 8004e54:	2025      	movs	r0, #37	; 0x25
 8004e56:	47a0      	blx	r4
        format++;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60bb      	str	r3, [r7, #8]
        break;
 8004e5e:	e00c      	b.n	8004e7a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	7818      	ldrb	r0, [r3, #0]
 8004e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e66:	1c53      	adds	r3, r2, #1
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6a:	697c      	ldr	r4, [r7, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6939      	ldr	r1, [r7, #16]
 8004e70:	47a0      	blx	r4
        format++;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3301      	adds	r3, #1
 8004e76:	60bb      	str	r3, [r7, #8]
        break;
 8004e78:	bf00      	nop
  while (*format)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f47f ab30 	bne.w	80044e4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <_vsnprintf+0x9d2>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1e5a      	subs	r2, r3, #1
 8004e90:	e000      	b.n	8004e94 <_vsnprintf+0x9d4>
 8004e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e94:	697c      	ldr	r4, [r7, #20]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6939      	ldr	r1, [r7, #16]
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3764      	adds	r7, #100	; 0x64
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop

08004eac <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004eac:	b40f      	push	{r0, r1, r2, r3}
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004eb4:	f107 031c 	add.w	r3, r7, #28
 8004eb8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004eba:	1d39      	adds	r1, r7, #4
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	4806      	ldr	r0, [pc, #24]	; (8004ee0 <printf_+0x34>)
 8004ec8:	f7ff fafa 	bl	80044c0 <_vsnprintf>
 8004ecc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eda:	b004      	add	sp, #16
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	08003629 	.word	0x08003629

08004ee4 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004ee4:	b40e      	push	{r1, r2, r3}
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af02      	add	r7, sp, #8
 8004eec:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004eee:	f107 0320 	add.w	r3, r7, #32
 8004ef2:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <sprintf_+0x34>)
 8004f02:	f7ff fadd 	bl	80044c0 <_vsnprintf>
 8004f06:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004f08:	68fb      	ldr	r3, [r7, #12]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f14:	b003      	add	sp, #12
 8004f16:	4770      	bx	lr
 8004f18:	080035df 	.word	0x080035df

08004f1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004f30:	2300      	movs	r3, #0
 8004f32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f36:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <MX_RTC_Init+0xb0>)
 8004f38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f42:	227f      	movs	r2, #127	; 0x7f
 8004f44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f48:	22ff      	movs	r2, #255	; 0xff
 8004f4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004f52:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004f5e:	481a      	ldr	r0, [pc, #104]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f60:	f003 f9b2 	bl	80082c8 <HAL_RTC_Init>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004f6a:	f7fe fb33 	bl	80035d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8004f6e:	2307      	movs	r3, #7
 8004f70:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8004f72:	233b      	movs	r3, #59	; 0x3b
 8004f74:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8004f76:	231e      	movs	r3, #30
 8004f78:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	2200      	movs	r2, #0
 8004f86:	4619      	mov	r1, r3
 8004f88:	480f      	ldr	r0, [pc, #60]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004f8a:	f003 fa13 	bl	80083b4 <HAL_RTC_SetTime>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004f94:	f7fe fb1e 	bl	80035d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004fa8:	463b      	mov	r3, r7
 8004faa:	2200      	movs	r2, #0
 8004fac:	4619      	mov	r1, r3
 8004fae:	4806      	ldr	r0, [pc, #24]	; (8004fc8 <MX_RTC_Init+0xac>)
 8004fb0:	f003 faf8 	bl	80085a4 <HAL_RTC_SetDate>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004fba:	f7fe fb0b 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000768 	.word	0x20000768
 8004fcc:	40002800 	.word	0x40002800

08004fd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
 8004fe8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <HAL_RTC_MspInit+0x50>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d111      	bne.n	8005018 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	4618      	mov	r0, r3
 8005004:	f003 f870 	bl	80080e8 <HAL_RCCEx_PeriphCLKConfig>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800500e:	f7fe fae1 	bl	80035d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <HAL_RTC_MspInit+0x54>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005018:	bf00      	nop
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40002800 	.word	0x40002800
 8005024:	42470e3c 	.word	0x42470e3c

08005028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_MspInit+0x54>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_MspInit+0x54>)
 8005038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503c:	6453      	str	r3, [r2, #68]	; 0x44
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <HAL_MspInit+0x54>)
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_MspInit+0x54>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <HAL_MspInit+0x54>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <HAL_MspInit+0x54>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005066:	2200      	movs	r2, #0
 8005068:	210f      	movs	r1, #15
 800506a:	f06f 0001 	mvn.w	r0, #1
 800506e:	f000 fbfd 	bl	800586c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800

08005080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	; 0x30
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8005090:	2300      	movs	r3, #0
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <HAL_InitTick+0xd0>)
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	4a2d      	ldr	r2, [pc, #180]	; (8005150 <HAL_InitTick+0xd0>)
 800509a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800509e:	6453      	str	r3, [r2, #68]	; 0x44
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_InitTick+0xd0>)
 80050a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80050ac:	f107 020c 	add.w	r2, r7, #12
 80050b0:	f107 0310 	add.w	r3, r7, #16
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 ffe4 	bl	8008084 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80050bc:	f002 ffce 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 80050c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	4a23      	ldr	r2, [pc, #140]	; (8005154 <HAL_InitTick+0xd4>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	0c9b      	lsrs	r3, r3, #18
 80050cc:	3b01      	subs	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80050d0:	4b21      	ldr	r3, [pc, #132]	; (8005158 <HAL_InitTick+0xd8>)
 80050d2:	4a22      	ldr	r2, [pc, #136]	; (800515c <HAL_InitTick+0xdc>)
 80050d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_InitTick+0xd8>)
 80050d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050dc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80050de:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_InitTick+0xd8>)
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_InitTick+0xd8>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_InitTick+0xd8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_InitTick+0xd8>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80050f6:	4818      	ldr	r0, [pc, #96]	; (8005158 <HAL_InitTick+0xd8>)
 80050f8:	f003 fd0e 	bl	8008b18 <HAL_TIM_Base_Init>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11b      	bne.n	8005142 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800510a:	4813      	ldr	r0, [pc, #76]	; (8005158 <HAL_InitTick+0xd8>)
 800510c:	f003 fd54 	bl	8008bb8 <HAL_TIM_Base_Start_IT>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800511a:	2b00      	cmp	r3, #0
 800511c:	d111      	bne.n	8005142 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800511e:	2019      	movs	r0, #25
 8005120:	f000 fbc0 	bl	80058a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b0f      	cmp	r3, #15
 8005128:	d808      	bhi.n	800513c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800512a:	2200      	movs	r2, #0
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	2019      	movs	r0, #25
 8005130:	f000 fb9c 	bl	800586c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <HAL_InitTick+0xe0>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e002      	b.n	8005142 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005146:	4618      	mov	r0, r3
 8005148:	3730      	adds	r7, #48	; 0x30
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800
 8005154:	431bde83 	.word	0x431bde83
 8005158:	20000788 	.word	0x20000788
 800515c:	40014400 	.word	0x40014400
 8005160:	20000008 	.word	0x20000008

08005164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005168:	e7fe      	b.n	8005168 <NMI_Handler+0x4>

0800516a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800516e:	e7fe      	b.n	800516e <HardFault_Handler+0x4>

08005170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005174:	e7fe      	b.n	8005174 <MemManage_Handler+0x4>

08005176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800517a:	e7fe      	b.n	800517a <BusFault_Handler+0x4>

0800517c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005180:	e7fe      	b.n	8005180 <UsageFault_Handler+0x4>

08005182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005182:	b480      	push	{r7}
 8005184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005194:	4802      	ldr	r0, [pc, #8]	; (80051a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005196:	f003 fe7b 	bl	8008e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000788 	.word	0x20000788

080051a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return 1;
 80051a8:	2301      	movs	r3, #1
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <_kill>:

int _kill(int pid, int sig)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80051be:	f00a f9ff 	bl	800f5c0 <__errno>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2216      	movs	r2, #22
 80051c6:	601a      	str	r2, [r3, #0]
  return -1;
 80051c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_exit>:

void _exit (int status)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80051dc:	f04f 31ff 	mov.w	r1, #4294967295
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ffe7 	bl	80051b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80051e6:	e7fe      	b.n	80051e6 <_exit+0x12>

080051e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e00a      	b.n	8005210 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80051fa:	f3af 8000 	nop.w
 80051fe:	4601      	mov	r1, r0
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	60ba      	str	r2, [r7, #8]
 8005206:	b2ca      	uxtb	r2, r1
 8005208:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	3301      	adds	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	dbf0      	blt.n	80051fa <_read+0x12>
  }

  return len;
 8005218:	687b      	ldr	r3, [r7, #4]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e009      	b.n	8005248 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	60ba      	str	r2, [r7, #8]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	dbf1      	blt.n	8005234 <_write+0x12>
  }
  return len;
 8005250:	687b      	ldr	r3, [r7, #4]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <_close>:

int _close(int file)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005282:	605a      	str	r2, [r3, #4]
  return 0;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <_isatty>:

int _isatty(int file)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800529a:	2301      	movs	r3, #1
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <_sbrk+0x5c>)
 80052ce:	4b15      	ldr	r3, [pc, #84]	; (8005324 <_sbrk+0x60>)
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <_sbrk+0x64>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <_sbrk+0x64>)
 80052e2:	4a12      	ldr	r2, [pc, #72]	; (800532c <_sbrk+0x68>)
 80052e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <_sbrk+0x64>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d207      	bcs.n	8005304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052f4:	f00a f964 	bl	800f5c0 <__errno>
 80052f8:	4603      	mov	r3, r0
 80052fa:	220c      	movs	r2, #12
 80052fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	e009      	b.n	8005318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005304:	4b08      	ldr	r3, [pc, #32]	; (8005328 <_sbrk+0x64>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800530a:	4b07      	ldr	r3, [pc, #28]	; (8005328 <_sbrk+0x64>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	4a05      	ldr	r2, [pc, #20]	; (8005328 <_sbrk+0x64>)
 8005314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20020000 	.word	0x20020000
 8005324:	00000400 	.word	0x00000400
 8005328:	200007d0 	.word	0x200007d0
 800532c:	200096d8 	.word	0x200096d8

08005330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <SystemInit+0x20>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	4a05      	ldr	r2, [pc, #20]	; (8005350 <SystemInit+0x20>)
 800533c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800535a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	609a      	str	r2, [r3, #8]
 8005366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005368:	f107 0320 	add.w	r3, r7, #32
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
 8005380:	615a      	str	r2, [r3, #20]
 8005382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005384:	4b2c      	ldr	r3, [pc, #176]	; (8005438 <MX_TIM3_Init+0xe4>)
 8005386:	4a2d      	ldr	r2, [pc, #180]	; (800543c <MX_TIM3_Init+0xe8>)
 8005388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800538a:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <MX_TIM3_Init+0xe4>)
 800538c:	2253      	movs	r2, #83	; 0x53
 800538e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005390:	4b29      	ldr	r3, [pc, #164]	; (8005438 <MX_TIM3_Init+0xe4>)
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8005396:	4b28      	ldr	r3, [pc, #160]	; (8005438 <MX_TIM3_Init+0xe4>)
 8005398:	2263      	movs	r2, #99	; 0x63
 800539a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800539c:	4b26      	ldr	r3, [pc, #152]	; (8005438 <MX_TIM3_Init+0xe4>)
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053a2:	4b25      	ldr	r3, [pc, #148]	; (8005438 <MX_TIM3_Init+0xe4>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80053a8:	4823      	ldr	r0, [pc, #140]	; (8005438 <MX_TIM3_Init+0xe4>)
 80053aa:	f003 fbb5 	bl	8008b18 <HAL_TIM_Base_Init>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80053b4:	f7fe f90e 	bl	80035d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80053be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c2:	4619      	mov	r1, r3
 80053c4:	481c      	ldr	r0, [pc, #112]	; (8005438 <MX_TIM3_Init+0xe4>)
 80053c6:	f003 ff2d 	bl	8009224 <HAL_TIM_ConfigClockSource>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80053d0:	f7fe f900 	bl	80035d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053d4:	4818      	ldr	r0, [pc, #96]	; (8005438 <MX_TIM3_Init+0xe4>)
 80053d6:	f003 fc51 	bl	8008c7c <HAL_TIM_PWM_Init>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80053e0:	f7fe f8f8 	bl	80035d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80053e4:	2320      	movs	r3, #32
 80053e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053ec:	f107 0320 	add.w	r3, r7, #32
 80053f0:	4619      	mov	r1, r3
 80053f2:	4811      	ldr	r0, [pc, #68]	; (8005438 <MX_TIM3_Init+0xe4>)
 80053f4:	f004 fad2 	bl	800999c <HAL_TIMEx_MasterConfigSynchronization>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80053fe:	f7fe f8e9 	bl	80035d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005402:	2360      	movs	r3, #96	; 0x60
 8005404:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	2200      	movs	r2, #0
 8005416:	4619      	mov	r1, r3
 8005418:	4807      	ldr	r0, [pc, #28]	; (8005438 <MX_TIM3_Init+0xe4>)
 800541a:	f003 fe41 	bl	80090a0 <HAL_TIM_PWM_ConfigChannel>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005424:	f7fe f8d6 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005428:	4803      	ldr	r0, [pc, #12]	; (8005438 <MX_TIM3_Init+0xe4>)
 800542a:	f000 f82b 	bl	8005484 <HAL_TIM_MspPostInit>

}
 800542e:	bf00      	nop
 8005430:	3738      	adds	r7, #56	; 0x38
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200007d4 	.word	0x200007d4
 800543c:	40000400 	.word	0x40000400

08005440 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0b      	ldr	r2, [pc, #44]	; (800547c <HAL_TIM_Base_MspInit+0x3c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10d      	bne.n	800546e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_TIM_Base_MspInit+0x40>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <HAL_TIM_Base_MspInit+0x40>)
 800545c:	f043 0302 	orr.w	r3, r3, #2
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <HAL_TIM_Base_MspInit+0x40>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40000400 	.word	0x40000400
 8005480:	40023800 	.word	0x40023800

08005484 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800548c:	f107 030c 	add.w	r3, r7, #12
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a12      	ldr	r2, [pc, #72]	; (80054ec <HAL_TIM_MspPostInit+0x68>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d11d      	bne.n	80054e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_TIM_MspPostInit+0x6c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <HAL_TIM_MspPostInit+0x6c>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
 80054b6:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <HAL_TIM_MspPostInit+0x6c>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = AENABLE_Pin;
 80054c2:	2340      	movs	r3, #64	; 0x40
 80054c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c6:	2302      	movs	r3, #2
 80054c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054d2:	2302      	movs	r3, #2
 80054d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AENABLE_GPIO_Port, &GPIO_InitStruct);
 80054d6:	f107 030c 	add.w	r3, r7, #12
 80054da:	4619      	mov	r1, r3
 80054dc:	4805      	ldr	r0, [pc, #20]	; (80054f4 <HAL_TIM_MspPostInit+0x70>)
 80054de:	f000 fb4f 	bl	8005b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80054e2:	bf00      	nop
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40020000 	.word	0x40020000

080054f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054fc:	4b11      	ldr	r3, [pc, #68]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 80054fe:	4a12      	ldr	r2, [pc, #72]	; (8005548 <MX_USART2_UART_Init+0x50>)
 8005500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 8005504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800550a:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 800550c:	2200      	movs	r2, #0
 800550e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 8005512:	2200      	movs	r2, #0
 8005514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 8005518:	2200      	movs	r2, #0
 800551a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 800551e:	220c      	movs	r2, #12
 8005520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 8005524:	2200      	movs	r2, #0
 8005526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 800552a:	2200      	movs	r2, #0
 800552c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800552e:	4805      	ldr	r0, [pc, #20]	; (8005544 <MX_USART2_UART_Init+0x4c>)
 8005530:	f004 fab6 	bl	8009aa0 <HAL_UART_Init>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800553a:	f7fe f84b 	bl	80035d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	2000081c 	.word	0x2000081c
 8005548:	40004400 	.word	0x40004400

0800554c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_UART_MspInit+0x84>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d12b      	bne.n	80055c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	4b18      	ldr	r3, [pc, #96]	; (80055d4 <HAL_UART_MspInit+0x88>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <HAL_UART_MspInit+0x88>)
 8005578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557c:	6413      	str	r3, [r2, #64]	; 0x40
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <HAL_UART_MspInit+0x88>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_UART_MspInit+0x88>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_UART_MspInit+0x88>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6313      	str	r3, [r2, #48]	; 0x30
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <HAL_UART_MspInit+0x88>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80055a6:	230c      	movs	r3, #12
 80055a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055aa:	2302      	movs	r3, #2
 80055ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b2:	2303      	movs	r3, #3
 80055b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055b6:	2307      	movs	r3, #7
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ba:	f107 0314 	add.w	r3, r7, #20
 80055be:	4619      	mov	r1, r3
 80055c0:	4805      	ldr	r0, [pc, #20]	; (80055d8 <HAL_UART_MspInit+0x8c>)
 80055c2:	f000 fadd 	bl	8005b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80055c6:	bf00      	nop
 80055c8:	3728      	adds	r7, #40	; 0x28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40004400 	.word	0x40004400
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40020000 	.word	0x40020000

080055dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80055dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055e2:	490e      	ldr	r1, [pc, #56]	; (800561c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055e4:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055e8:	e002      	b.n	80055f0 <LoopCopyDataInit>

080055ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ee:	3304      	adds	r3, #4

080055f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f4:	d3f9      	bcc.n	80055ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055f8:	4c0b      	ldr	r4, [pc, #44]	; (8005628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055fc:	e001      	b.n	8005602 <LoopFillZerobss>

080055fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005600:	3204      	adds	r2, #4

08005602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005604:	d3fb      	bcc.n	80055fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005606:	f7ff fe93 	bl	8005330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800560a:	f009 ffdf 	bl	800f5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800560e:	f7fd ff49 	bl	80034a4 <main>
  bx  lr    
 8005612:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800561c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005620:	08011f2c 	.word	0x08011f2c
  ldr r2, =_sbss
 8005624:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005628:	200096d8 	.word	0x200096d8

0800562c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800562c:	e7fe      	b.n	800562c <ADC_IRQHandler>
	...

08005630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_Init+0x40>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <HAL_Init+0x40>)
 800563a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_Init+0x40>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <HAL_Init+0x40>)
 8005646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800564a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_Init+0x40>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_Init+0x40>)
 8005652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005658:	2003      	movs	r0, #3
 800565a:	f000 f8fc 	bl	8005856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800565e:	2005      	movs	r0, #5
 8005660:	f7ff fd0e 	bl	8005080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005664:	f7ff fce0 	bl	8005028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40023c00 	.word	0x40023c00

08005674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_IncTick+0x20>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_IncTick+0x24>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4413      	add	r3, r2
 8005684:	4a04      	ldr	r2, [pc, #16]	; (8005698 <HAL_IncTick+0x24>)
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	2000000c 	.word	0x2000000c
 8005698:	20000860 	.word	0x20000860

0800569c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return uwTick;
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <HAL_GetTick+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000860 	.word	0x20000860

080056b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056bc:	f7ff ffee 	bl	800569c <HAL_GetTick>
 80056c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d005      	beq.n	80056da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_Delay+0x44>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056da:	bf00      	nop
 80056dc:	f7ff ffde 	bl	800569c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d8f7      	bhi.n	80056dc <HAL_Delay+0x28>
  {
  }
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	2000000c 	.word	0x2000000c

080056fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <__NVIC_SetPriorityGrouping+0x44>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005718:	4013      	ands	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800572e:	4a04      	ldr	r2, [pc, #16]	; (8005740 <__NVIC_SetPriorityGrouping+0x44>)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	60d3      	str	r3, [r2, #12]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <__NVIC_GetPriorityGrouping+0x18>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	f003 0307 	and.w	r3, r3, #7
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000ed00 	.word	0xe000ed00

08005760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800576a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	db0b      	blt.n	800578a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	f003 021f 	and.w	r2, r3, #31
 8005778:	4907      	ldr	r1, [pc, #28]	; (8005798 <__NVIC_EnableIRQ+0x38>)
 800577a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2001      	movs	r0, #1
 8005782:	fa00 f202 	lsl.w	r2, r0, r2
 8005786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	e000e100 	.word	0xe000e100

0800579c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	6039      	str	r1, [r7, #0]
 80057a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	db0a      	blt.n	80057c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	490c      	ldr	r1, [pc, #48]	; (80057e8 <__NVIC_SetPriority+0x4c>)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	0112      	lsls	r2, r2, #4
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	440b      	add	r3, r1
 80057c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057c4:	e00a      	b.n	80057dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4908      	ldr	r1, [pc, #32]	; (80057ec <__NVIC_SetPriority+0x50>)
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	3b04      	subs	r3, #4
 80057d4:	0112      	lsls	r2, r2, #4
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	440b      	add	r3, r1
 80057da:	761a      	strb	r2, [r3, #24]
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	e000e100 	.word	0xe000e100
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b089      	sub	sp, #36	; 0x24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f1c3 0307 	rsb	r3, r3, #7
 800580a:	2b04      	cmp	r3, #4
 800580c:	bf28      	it	cs
 800580e:	2304      	movcs	r3, #4
 8005810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3304      	adds	r3, #4
 8005816:	2b06      	cmp	r3, #6
 8005818:	d902      	bls.n	8005820 <NVIC_EncodePriority+0x30>
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3b03      	subs	r3, #3
 800581e:	e000      	b.n	8005822 <NVIC_EncodePriority+0x32>
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005824:	f04f 32ff 	mov.w	r2, #4294967295
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43da      	mvns	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	401a      	ands	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005838:	f04f 31ff 	mov.w	r1, #4294967295
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	43d9      	mvns	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005848:	4313      	orrs	r3, r2
         );
}
 800584a:	4618      	mov	r0, r3
 800584c:	3724      	adds	r7, #36	; 0x24
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff ff4c 	bl	80056fc <__NVIC_SetPriorityGrouping>
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800587e:	f7ff ff61 	bl	8005744 <__NVIC_GetPriorityGrouping>
 8005882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	6978      	ldr	r0, [r7, #20]
 800588a:	f7ff ffb1 	bl	80057f0 <NVIC_EncodePriority>
 800588e:	4602      	mov	r2, r0
 8005890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff ff80 	bl	800579c <__NVIC_SetPriority>
}
 800589c:	bf00      	nop
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ff54 	bl	8005760 <__NVIC_EnableIRQ>
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058cc:	f7ff fee6 	bl	800569c <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e099      	b.n	8005a10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058fc:	e00f      	b.n	800591e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058fe:	f7ff fecd 	bl	800569c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b05      	cmp	r3, #5
 800590a:	d908      	bls.n	800591e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2203      	movs	r2, #3
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e078      	b.n	8005a10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e8      	bne.n	80058fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <HAL_DMA_Init+0x158>)
 8005938:	4013      	ands	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800594a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2b04      	cmp	r3, #4
 8005976:	d107      	bne.n	8005988 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	4313      	orrs	r3, r2
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d117      	bne.n	80059e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00e      	beq.n	80059e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f85f 	bl	8005a88 <DMA_CheckFifoParam>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059de:	2301      	movs	r3, #1
 80059e0:	e016      	b.n	8005a10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f816 	bl	8005a1c <DMA_CalcBaseAndBitshift>
 80059f0:	4603      	mov	r3, r0
 80059f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	223f      	movs	r2, #63	; 0x3f
 80059fa:	409a      	lsls	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	f010803f 	.word	0xf010803f

08005a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	3b10      	subs	r3, #16
 8005a2c:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <DMA_CalcBaseAndBitshift+0x64>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <DMA_CalcBaseAndBitshift+0x68>)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d909      	bls.n	8005a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a52:	f023 0303 	bic.w	r3, r3, #3
 8005a56:	1d1a      	adds	r2, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a5c:	e007      	b.n	8005a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	aaaaaaab 	.word	0xaaaaaaab
 8005a84:	08011ba0 	.word	0x08011ba0

08005a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d11f      	bne.n	8005ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d856      	bhi.n	8005b56 <DMA_CheckFifoParam+0xce>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <DMA_CheckFifoParam+0x28>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005ad3 	.word	0x08005ad3
 8005ab8:	08005ac1 	.word	0x08005ac1
 8005abc:	08005b57 	.word	0x08005b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d046      	beq.n	8005b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad0:	e043      	b.n	8005b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ada:	d140      	bne.n	8005b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ae0:	e03d      	b.n	8005b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aea:	d121      	bne.n	8005b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d837      	bhi.n	8005b62 <DMA_CheckFifoParam+0xda>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <DMA_CheckFifoParam+0x70>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b0f 	.word	0x08005b0f
 8005b00:	08005b09 	.word	0x08005b09
 8005b04:	08005b21 	.word	0x08005b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0c:	e030      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d025      	beq.n	8005b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b1e:	e022      	b.n	8005b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b28:	d11f      	bne.n	8005b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b2e:	e01c      	b.n	8005b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d903      	bls.n	8005b3e <DMA_CheckFifoParam+0xb6>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d003      	beq.n	8005b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b3c:	e018      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
      break;
 8005b42:	e015      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00e      	beq.n	8005b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
      break;
 8005b54:	e00b      	b.n	8005b6e <DMA_CheckFifoParam+0xe6>
      break;
 8005b56:	bf00      	nop
 8005b58:	e00a      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e008      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e006      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      break;
 8005b62:	bf00      	nop
 8005b64:	e004      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      break;
 8005b66:	bf00      	nop
 8005b68:	e002      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <DMA_CheckFifoParam+0xe8>
      break;
 8005b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	e159      	b.n	8005e50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	f040 8148 	bne.w	8005e4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d005      	beq.n	8005bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d130      	bne.n	8005c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	2203      	movs	r2, #3
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c08:	2201      	movs	r2, #1
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 0201 	and.w	r2, r3, #1
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d017      	beq.n	8005c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d123      	bne.n	8005cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	08da      	lsrs	r2, r3, #3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3208      	adds	r2, #8
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	220f      	movs	r2, #15
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	08da      	lsrs	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3208      	adds	r2, #8
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	2203      	movs	r2, #3
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 0203 	and.w	r2, r3, #3
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80a2 	beq.w	8005e4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	4b57      	ldr	r3, [pc, #348]	; (8005e68 <HAL_GPIO_Init+0x2e8>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	4a56      	ldr	r2, [pc, #344]	; (8005e68 <HAL_GPIO_Init+0x2e8>)
 8005d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d14:	6453      	str	r3, [r2, #68]	; 0x44
 8005d16:	4b54      	ldr	r3, [pc, #336]	; (8005e68 <HAL_GPIO_Init+0x2e8>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d22:	4a52      	ldr	r2, [pc, #328]	; (8005e6c <HAL_GPIO_Init+0x2ec>)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	3302      	adds	r3, #2
 8005d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	220f      	movs	r2, #15
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a49      	ldr	r2, [pc, #292]	; (8005e70 <HAL_GPIO_Init+0x2f0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d019      	beq.n	8005d82 <HAL_GPIO_Init+0x202>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a48      	ldr	r2, [pc, #288]	; (8005e74 <HAL_GPIO_Init+0x2f4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_GPIO_Init+0x1fe>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a47      	ldr	r2, [pc, #284]	; (8005e78 <HAL_GPIO_Init+0x2f8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00d      	beq.n	8005d7a <HAL_GPIO_Init+0x1fa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a46      	ldr	r2, [pc, #280]	; (8005e7c <HAL_GPIO_Init+0x2fc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <HAL_GPIO_Init+0x1f6>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a45      	ldr	r2, [pc, #276]	; (8005e80 <HAL_GPIO_Init+0x300>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d101      	bne.n	8005d72 <HAL_GPIO_Init+0x1f2>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	e008      	b.n	8005d84 <HAL_GPIO_Init+0x204>
 8005d72:	2307      	movs	r3, #7
 8005d74:	e006      	b.n	8005d84 <HAL_GPIO_Init+0x204>
 8005d76:	2303      	movs	r3, #3
 8005d78:	e004      	b.n	8005d84 <HAL_GPIO_Init+0x204>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e002      	b.n	8005d84 <HAL_GPIO_Init+0x204>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_GPIO_Init+0x204>
 8005d82:	2300      	movs	r3, #0
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	f002 0203 	and.w	r2, r2, #3
 8005d8a:	0092      	lsls	r2, r2, #2
 8005d8c:	4093      	lsls	r3, r2
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d94:	4935      	ldr	r1, [pc, #212]	; (8005e6c <HAL_GPIO_Init+0x2ec>)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	089b      	lsrs	r3, r3, #2
 8005d9a:	3302      	adds	r3, #2
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005da2:	4b38      	ldr	r3, [pc, #224]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dc6:	4a2f      	ldr	r2, [pc, #188]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005df0:	4a24      	ldr	r2, [pc, #144]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005df6:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e20:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e44:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <HAL_GPIO_Init+0x304>)
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	f67f aea2 	bls.w	8005b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	3724      	adds	r7, #36	; 0x24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	40013800 	.word	0x40013800
 8005e70:	40020000 	.word	0x40020000
 8005e74:	40020400 	.word	0x40020400
 8005e78:	40020800 	.word	0x40020800
 8005e7c:	40020c00 	.word	0x40020c00
 8005e80:	40021000 	.word	0x40021000
 8005e84:	40013c00 	.word	0x40013c00

08005e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
 8005ea4:	e001      	b.n	8005eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	807b      	strh	r3, [r7, #2]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ec8:	787b      	ldrb	r3, [r7, #1]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ece:	887a      	ldrh	r2, [r7, #2]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ed4:	e003      	b.n	8005ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ed6:	887b      	ldrh	r3, [r7, #2]
 8005ed8:	041a      	lsls	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	619a      	str	r2, [r3, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e12b      	b.n	8006156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fd fa7e 	bl	8003414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2224      	movs	r2, #36	; 0x24
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f50:	f002 f870 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4a81      	ldr	r2, [pc, #516]	; (8006160 <HAL_I2C_Init+0x274>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d807      	bhi.n	8005f70 <HAL_I2C_Init+0x84>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a80      	ldr	r2, [pc, #512]	; (8006164 <HAL_I2C_Init+0x278>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	bf94      	ite	ls
 8005f68:	2301      	movls	r3, #1
 8005f6a:	2300      	movhi	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e006      	b.n	8005f7e <HAL_I2C_Init+0x92>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a7d      	ldr	r2, [pc, #500]	; (8006168 <HAL_I2C_Init+0x27c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	bf94      	ite	ls
 8005f78:	2301      	movls	r3, #1
 8005f7a:	2300      	movhi	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0e7      	b.n	8006156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a78      	ldr	r2, [pc, #480]	; (800616c <HAL_I2C_Init+0x280>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	0c9b      	lsrs	r3, r3, #18
 8005f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a6a      	ldr	r2, [pc, #424]	; (8006160 <HAL_I2C_Init+0x274>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d802      	bhi.n	8005fc0 <HAL_I2C_Init+0xd4>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	e009      	b.n	8005fd4 <HAL_I2C_Init+0xe8>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	4a69      	ldr	r2, [pc, #420]	; (8006170 <HAL_I2C_Init+0x284>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	099b      	lsrs	r3, r3, #6
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	495c      	ldr	r1, [pc, #368]	; (8006160 <HAL_I2C_Init+0x274>)
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	d819      	bhi.n	8006028 <HAL_I2C_Init+0x13c>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	1e59      	subs	r1, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006008:	400b      	ands	r3, r1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_I2C_Init+0x138>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1e59      	subs	r1, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	fbb1 f3f3 	udiv	r3, r1, r3
 800601c:	3301      	adds	r3, #1
 800601e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006022:	e051      	b.n	80060c8 <HAL_I2C_Init+0x1dc>
 8006024:	2304      	movs	r3, #4
 8006026:	e04f      	b.n	80060c8 <HAL_I2C_Init+0x1dc>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d111      	bne.n	8006054 <HAL_I2C_Init+0x168>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	1e58      	subs	r0, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6859      	ldr	r1, [r3, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	440b      	add	r3, r1
 800603e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006042:	3301      	adds	r3, #1
 8006044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e012      	b.n	800607a <HAL_I2C_Init+0x18e>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1e58      	subs	r0, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6859      	ldr	r1, [r3, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	0099      	lsls	r1, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	fbb0 f3f3 	udiv	r3, r0, r3
 800606a:	3301      	adds	r3, #1
 800606c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf0c      	ite	eq
 8006074:	2301      	moveq	r3, #1
 8006076:	2300      	movne	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_Init+0x196>
 800607e:	2301      	movs	r3, #1
 8006080:	e022      	b.n	80060c8 <HAL_I2C_Init+0x1dc>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10e      	bne.n	80060a8 <HAL_I2C_Init+0x1bc>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1e58      	subs	r0, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	440b      	add	r3, r1
 8006098:	fbb0 f3f3 	udiv	r3, r0, r3
 800609c:	3301      	adds	r3, #1
 800609e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a6:	e00f      	b.n	80060c8 <HAL_I2C_Init+0x1dc>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	1e58      	subs	r0, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	0099      	lsls	r1, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80060be:	3301      	adds	r3, #1
 80060c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	6809      	ldr	r1, [r1, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6911      	ldr	r1, [r2, #16]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68d2      	ldr	r2, [r2, #12]
 8006102:	4311      	orrs	r1, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	430b      	orrs	r3, r1
 800610a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	000186a0 	.word	0x000186a0
 8006164:	001e847f 	.word	0x001e847f
 8006168:	003d08ff 	.word	0x003d08ff
 800616c:	431bde83 	.word	0x431bde83
 8006170:	10624dd3 	.word	0x10624dd3

08006174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	461a      	mov	r2, r3
 8006180:	460b      	mov	r3, r1
 8006182:	817b      	strh	r3, [r7, #10]
 8006184:	4613      	mov	r3, r2
 8006186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006188:	f7ff fa88 	bl	800569c <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b20      	cmp	r3, #32
 8006198:	f040 80e0 	bne.w	800635c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	2319      	movs	r3, #25
 80061a2:	2201      	movs	r2, #1
 80061a4:	4970      	ldr	r1, [pc, #448]	; (8006368 <HAL_I2C_Master_Transmit+0x1f4>)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 f8f6 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0d3      	b.n	800635e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_I2C_Master_Transmit+0x50>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e0cc      	b.n	800635e <HAL_I2C_Master_Transmit+0x1ea>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d007      	beq.n	80061ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2221      	movs	r2, #33	; 0x21
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2210      	movs	r2, #16
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	893a      	ldrh	r2, [r7, #8]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a50      	ldr	r2, [pc, #320]	; (800636c <HAL_I2C_Master_Transmit+0x1f8>)
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800622c:	8979      	ldrh	r1, [r7, #10]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	6a3a      	ldr	r2, [r7, #32]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fde2 	bl	8006dfc <I2C_MasterRequestWrite>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e08d      	b.n	800635e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006258:	e066      	b.n	8006328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	6a39      	ldr	r1, [r7, #32]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 f970 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2b04      	cmp	r3, #4
 8006270:	d107      	bne.n	8006282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e06b      	b.n	800635e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d11b      	bne.n	80062fc <HAL_I2C_Master_Transmit+0x188>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d017      	beq.n	80062fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	6a39      	ldr	r1, [r7, #32]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f001 f960 	bl	80075c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	2b04      	cmp	r3, #4
 8006312:	d107      	bne.n	8006324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e01a      	b.n	800635e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	d194      	bne.n	800625a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	e000      	b.n	800635e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800635c:	2302      	movs	r3, #2
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	00100002 	.word	0x00100002
 800636c:	ffff0000 	.word	0xffff0000

08006370 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08c      	sub	sp, #48	; 0x30
 8006374:	af02      	add	r7, sp, #8
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	461a      	mov	r2, r3
 800637c:	460b      	mov	r3, r1
 800637e:	817b      	strh	r3, [r7, #10]
 8006380:	4613      	mov	r3, r2
 8006382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006384:	f7ff f98a 	bl	800569c <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	f040 820b 	bne.w	80067ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2319      	movs	r3, #25
 800639e:	2201      	movs	r2, #1
 80063a0:	497c      	ldr	r1, [pc, #496]	; (8006594 <HAL_I2C_Master_Receive+0x224>)
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fff8 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
 80063b0:	e1fe      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_I2C_Master_Receive+0x50>
 80063bc:	2302      	movs	r3, #2
 80063be:	e1f7      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d007      	beq.n	80063e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0201 	orr.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2222      	movs	r2, #34	; 0x22
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2210      	movs	r2, #16
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	893a      	ldrh	r2, [r7, #8]
 8006416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a5c      	ldr	r2, [pc, #368]	; (8006598 <HAL_I2C_Master_Receive+0x228>)
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006428:	8979      	ldrh	r1, [r7, #10]
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fd66 	bl	8006f00 <I2C_MasterRequestRead>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e1b8      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006446:	2300      	movs	r3, #0
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	623b      	str	r3, [r7, #32]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	623b      	str	r3, [r7, #32]
 800645a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e18c      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006472:	2b01      	cmp	r3, #1
 8006474:	d11b      	bne.n	80064ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e16c      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d11b      	bne.n	80064ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	e14c      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006514:	e138      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	2b03      	cmp	r3, #3
 800651c:	f200 80f1 	bhi.w	8006702 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	2b01      	cmp	r3, #1
 8006526:	d123      	bne.n	8006570 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f001 f88b 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e139      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800656e:	e10b      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006574:	2b02      	cmp	r3, #2
 8006576:	d14e      	bne.n	8006616 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	2200      	movs	r2, #0
 8006580:	4906      	ldr	r1, [pc, #24]	; (800659c <HAL_I2C_Master_Receive+0x22c>)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 ff08 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e10e      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
 8006592:	bf00      	nop
 8006594:	00100002 	.word	0x00100002
 8006598:	ffff0000 	.word	0xffff0000
 800659c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006614:	e0b8      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	2200      	movs	r2, #0
 800661e:	4966      	ldr	r1, [pc, #408]	; (80067b8 <HAL_I2C_Master_Receive+0x448>)
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 feb9 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0bf      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	494f      	ldr	r1, [pc, #316]	; (80067b8 <HAL_I2C_Master_Receive+0x448>)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fe8b 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e091      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006700:	e042      	b.n	8006788 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 ff9e 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e04c      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d118      	bne.n	8006788 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	2b00      	cmp	r3, #0
 800678e:	f47f aec2 	bne.w	8006516 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e000      	b.n	80067b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067ae:	2302      	movs	r3, #2
  }
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3728      	adds	r7, #40	; 0x28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	00010004 	.word	0x00010004

080067bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	4608      	mov	r0, r1
 80067c6:	4611      	mov	r1, r2
 80067c8:	461a      	mov	r2, r3
 80067ca:	4603      	mov	r3, r0
 80067cc:	817b      	strh	r3, [r7, #10]
 80067ce:	460b      	mov	r3, r1
 80067d0:	813b      	strh	r3, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067d6:	f7fe ff61 	bl	800569c <HAL_GetTick>
 80067da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	f040 80d9 	bne.w	800699c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2319      	movs	r3, #25
 80067f0:	2201      	movs	r2, #1
 80067f2:	496d      	ldr	r1, [pc, #436]	; (80069a8 <HAL_I2C_Mem_Write+0x1ec>)
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fdcf 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
 8006802:	e0cc      	b.n	800699e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_I2C_Mem_Write+0x56>
 800680e:	2302      	movs	r3, #2
 8006810:	e0c5      	b.n	800699e <HAL_I2C_Mem_Write+0x1e2>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b01      	cmp	r3, #1
 8006826:	d007      	beq.n	8006838 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2221      	movs	r2, #33	; 0x21
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2240      	movs	r2, #64	; 0x40
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a4d      	ldr	r2, [pc, #308]	; (80069ac <HAL_I2C_Mem_Write+0x1f0>)
 8006878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800687a:	88f8      	ldrh	r0, [r7, #6]
 800687c:	893a      	ldrh	r2, [r7, #8]
 800687e:	8979      	ldrh	r1, [r7, #10]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	4603      	mov	r3, r0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fc06 	bl	800709c <I2C_RequestMemoryWrite>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d052      	beq.n	800693c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e081      	b.n	800699e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fe50 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00d      	beq.n	80068c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d107      	bne.n	80068c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e06b      	b.n	800699e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b04      	cmp	r3, #4
 8006902:	d11b      	bne.n	800693c <HAL_I2C_Mem_Write+0x180>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006908:	2b00      	cmp	r3, #0
 800690a:	d017      	beq.n	800693c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1aa      	bne.n	800689a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fe3c 	bl	80075c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00d      	beq.n	8006970 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	2b04      	cmp	r3, #4
 800695a:	d107      	bne.n	800696c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800696a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e016      	b.n	800699e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e000      	b.n	800699e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800699c:	2302      	movs	r3, #2
  }
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	00100002 	.word	0x00100002
 80069ac:	ffff0000 	.word	0xffff0000

080069b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	4603      	mov	r3, r0
 80069c0:	817b      	strh	r3, [r7, #10]
 80069c2:	460b      	mov	r3, r1
 80069c4:	813b      	strh	r3, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069ca:	f7fe fe67 	bl	800569c <HAL_GetTick>
 80069ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b20      	cmp	r3, #32
 80069da:	f040 8208 	bne.w	8006dee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2319      	movs	r3, #25
 80069e4:	2201      	movs	r2, #1
 80069e6:	497b      	ldr	r1, [pc, #492]	; (8006bd4 <HAL_I2C_Mem_Read+0x224>)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fcd5 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e1fb      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_I2C_Mem_Read+0x56>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e1f4      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d007      	beq.n	8006a2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2222      	movs	r2, #34	; 0x22
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2240      	movs	r2, #64	; 0x40
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a5b      	ldr	r2, [pc, #364]	; (8006bd8 <HAL_I2C_Mem_Read+0x228>)
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a6e:	88f8      	ldrh	r0, [r7, #6]
 8006a70:	893a      	ldrh	r2, [r7, #8]
 8006a72:	8979      	ldrh	r1, [r7, #10]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fba2 	bl	80071c8 <I2C_RequestMemoryRead>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e1b0      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d113      	bne.n	8006abe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a96:	2300      	movs	r3, #0
 8006a98:	623b      	str	r3, [r7, #32]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	623b      	str	r3, [r7, #32]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e184      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d11b      	bne.n	8006afe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e164      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d11b      	bne.n	8006b3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	e144      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b54:	e138      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	f200 80f1 	bhi.w	8006d42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d123      	bne.n	8006bb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fd6b 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e139      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bae:	e10b      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d14e      	bne.n	8006c56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	4906      	ldr	r1, [pc, #24]	; (8006bdc <HAL_I2C_Mem_Read+0x22c>)
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fbe8 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d008      	beq.n	8006be0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e10e      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
 8006bd2:	bf00      	nop
 8006bd4:	00100002 	.word	0x00100002
 8006bd8:	ffff0000 	.word	0xffff0000
 8006bdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691a      	ldr	r2, [r3, #16]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c54:	e0b8      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4966      	ldr	r1, [pc, #408]	; (8006df8 <HAL_I2C_Mem_Read+0x448>)
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fb99 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0bf      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	2200      	movs	r2, #0
 8006cba:	494f      	ldr	r1, [pc, #316]	; (8006df8 <HAL_I2C_Mem_Read+0x448>)
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fb6b 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e091      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d40:	e042      	b.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fc7e 	bl	8007648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e04c      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d118      	bne.n	8006dc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f aec2 	bne.w	8006b56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e000      	b.n	8006df0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3728      	adds	r7, #40	; 0x28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	00010004 	.word	0x00010004

08006dfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d006      	beq.n	8006e26 <I2C_MasterRequestWrite+0x2a>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d003      	beq.n	8006e26 <I2C_MasterRequestWrite+0x2a>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e24:	d108      	bne.n	8006e38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e00b      	b.n	8006e50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	2b12      	cmp	r3, #18
 8006e3e:	d107      	bne.n	8006e50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fa9b 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	d103      	bne.n	8006e80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e035      	b.n	8006ef0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e8c:	d108      	bne.n	8006ea0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e9c:	611a      	str	r2, [r3, #16]
 8006e9e:	e01b      	b.n	8006ed8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ea0:	897b      	ldrh	r3, [r7, #10]
 8006ea2:	11db      	asrs	r3, r3, #7
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0306 	and.w	r3, r3, #6
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f063 030f 	orn	r3, r3, #15
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	490e      	ldr	r1, [pc, #56]	; (8006ef8 <I2C_MasterRequestWrite+0xfc>)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fac1 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e010      	b.n	8006ef0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4907      	ldr	r1, [pc, #28]	; (8006efc <I2C_MasterRequestWrite+0x100>)
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 fab1 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	00010008 	.word	0x00010008
 8006efc:	00010002 	.word	0x00010002

08006f00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	607a      	str	r2, [r7, #4]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d006      	beq.n	8006f3a <I2C_MasterRequestRead+0x3a>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d003      	beq.n	8006f3a <I2C_MasterRequestRead+0x3a>
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f38:	d108      	bne.n	8006f4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e00b      	b.n	8006f64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	2b11      	cmp	r3, #17
 8006f52:	d107      	bne.n	8006f64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fa11 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8a:	d103      	bne.n	8006f94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e079      	b.n	800708c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa0:	d108      	bne.n	8006fb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006fa2:	897b      	ldrh	r3, [r7, #10]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	611a      	str	r2, [r3, #16]
 8006fb2:	e05f      	b.n	8007074 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fb4:	897b      	ldrh	r3, [r7, #10]
 8006fb6:	11db      	asrs	r3, r3, #7
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 0306 	and.w	r3, r3, #6
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f063 030f 	orn	r3, r3, #15
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4930      	ldr	r1, [pc, #192]	; (8007094 <I2C_MasterRequestRead+0x194>)
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fa37 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e054      	b.n	800708c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006fe2:	897b      	ldrh	r3, [r7, #10]
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4929      	ldr	r1, [pc, #164]	; (8007098 <I2C_MasterRequestRead+0x198>)
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fa27 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e044      	b.n	800708c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007002:	2300      	movs	r3, #0
 8007004:	613b      	str	r3, [r7, #16]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007026:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f9af 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704e:	d103      	bne.n	8007058 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007056:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e017      	b.n	800708c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800705c:	897b      	ldrh	r3, [r7, #10]
 800705e:	11db      	asrs	r3, r3, #7
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0306 	and.w	r3, r3, #6
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f063 030e 	orn	r3, r3, #14
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4907      	ldr	r1, [pc, #28]	; (8007098 <I2C_MasterRequestRead+0x198>)
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f9e3 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	00010008 	.word	0x00010008
 8007098:	00010002 	.word	0x00010002

0800709c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	817b      	strh	r3, [r7, #10]
 80070ae:	460b      	mov	r3, r1
 80070b0:	813b      	strh	r3, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f960 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ec:	d103      	bne.n	80070f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e05f      	b.n	80071ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070fa:	897b      	ldrh	r3, [r7, #10]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	6a3a      	ldr	r2, [r7, #32]
 800710e:	492d      	ldr	r1, [pc, #180]	; (80071c4 <I2C_RequestMemoryWrite+0x128>)
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f998 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e04c      	b.n	80071ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	617b      	str	r3, [r7, #20]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007138:	6a39      	ldr	r1, [r7, #32]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 fa02 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00d      	beq.n	8007162 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	2b04      	cmp	r3, #4
 800714c:	d107      	bne.n	800715e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800715c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e02b      	b.n	80071ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d105      	bne.n	8007174 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007168:	893b      	ldrh	r3, [r7, #8]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	611a      	str	r2, [r3, #16]
 8007172:	e021      	b.n	80071b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007174:	893b      	ldrh	r3, [r7, #8]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	b29b      	uxth	r3, r3
 800717a:	b2da      	uxtb	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	6a39      	ldr	r1, [r7, #32]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f9dc 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	2b04      	cmp	r3, #4
 8007198:	d107      	bne.n	80071aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e005      	b.n	80071ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071ae:	893b      	ldrh	r3, [r7, #8]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	00010002 	.word	0x00010002

080071c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4603      	mov	r3, r0
 80071d8:	817b      	strh	r3, [r7, #10]
 80071da:	460b      	mov	r3, r1
 80071dc:	813b      	strh	r3, [r7, #8]
 80071de:	4613      	mov	r3, r2
 80071e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	2200      	movs	r2, #0
 800720a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f8c2 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00d      	beq.n	8007236 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007228:	d103      	bne.n	8007232 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e0aa      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007236:	897b      	ldrh	r3, [r7, #10]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	461a      	mov	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	4952      	ldr	r1, [pc, #328]	; (8007394 <I2C_RequestMemoryRead+0x1cc>)
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f8fa 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e097      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007274:	6a39      	ldr	r1, [r7, #32]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f964 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00d      	beq.n	800729e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	2b04      	cmp	r3, #4
 8007288:	d107      	bne.n	800729a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e076      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072a4:	893b      	ldrh	r3, [r7, #8]
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	611a      	str	r2, [r3, #16]
 80072ae:	e021      	b.n	80072f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80072b0:	893b      	ldrh	r3, [r7, #8]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c0:	6a39      	ldr	r1, [r7, #32]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f93e 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d107      	bne.n	80072e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e050      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ea:	893b      	ldrh	r3, [r7, #8]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f6:	6a39      	ldr	r1, [r7, #32]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f923 	bl	8007544 <I2C_WaitOnTXEFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00d      	beq.n	8007320 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	2b04      	cmp	r3, #4
 800730a:	d107      	bne.n	800731c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e035      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800732e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	2200      	movs	r2, #0
 8007338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f82b 	bl	8007398 <I2C_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00d      	beq.n	8007364 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007356:	d103      	bne.n	8007360 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e013      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007364:	897b      	ldrh	r3, [r7, #10]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	6a3a      	ldr	r2, [r7, #32]
 8007378:	4906      	ldr	r1, [pc, #24]	; (8007394 <I2C_RequestMemoryRead+0x1cc>)
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f863 	bl	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	00010002 	.word	0x00010002

08007398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073a8:	e025      	b.n	80073f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b0:	d021      	beq.n	80073f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b2:	f7fe f973 	bl	800569c <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d302      	bcc.n	80073c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d116      	bne.n	80073f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0220 	orr.w	r2, r3, #32
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e023      	b.n	800743e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d10d      	bne.n	800741c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	43da      	mvns	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	e00c      	b.n	8007436 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	43da      	mvns	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4013      	ands	r3, r2
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	429a      	cmp	r2, r3
 800743a:	d0b6      	beq.n	80073aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007454:	e051      	b.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007464:	d123      	bne.n	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007474:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800747e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e046      	b.n	800753c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d021      	beq.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fe f8f1 	bl	800569c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d116      	bne.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e020      	b.n	800753c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10c      	bne.n	800751e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	43da      	mvns	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4013      	ands	r3, r2
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf14      	ite	ne
 8007516:	2301      	movne	r3, #1
 8007518:	2300      	moveq	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	e00b      	b.n	8007536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	43da      	mvns	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4013      	ands	r3, r2
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf14      	ite	ne
 8007530:	2301      	movne	r3, #1
 8007532:	2300      	moveq	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d18d      	bne.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007550:	e02d      	b.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f8ce 	bl	80076f4 <I2C_IsAcknowledgeFailed>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e02d      	b.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d021      	beq.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756a:	f7fe f897 	bl	800569c <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d116      	bne.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0220 	orr.w	r2, r3, #32
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e007      	b.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d1ca      	bne.n	8007552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075d2:	e02d      	b.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f88d 	bl	80076f4 <I2C_IsAcknowledgeFailed>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e02d      	b.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d021      	beq.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ec:	f7fe f856 	bl	800569c <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d302      	bcc.n	8007602 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d116      	bne.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	f043 0220 	orr.w	r2, r3, #32
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e007      	b.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b04      	cmp	r3, #4
 800763c:	d1ca      	bne.n	80075d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007654:	e042      	b.n	80076dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b10      	cmp	r3, #16
 8007662:	d119      	bne.n	8007698 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0210 	mvn.w	r2, #16
 800766c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e029      	b.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007698:	f7fe f800 	bl	800569c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d116      	bne.n	80076dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e007      	b.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d1b5      	bne.n	8007656 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800770a:	d11b      	bne.n	8007744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	f043 0204 	orr.w	r2, r3, #4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e000      	b.n	8007746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e267      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d075      	beq.n	800785e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007772:	4b88      	ldr	r3, [pc, #544]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b04      	cmp	r3, #4
 800777c:	d00c      	beq.n	8007798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777e:	4b85      	ldr	r3, [pc, #532]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007786:	2b08      	cmp	r3, #8
 8007788:	d112      	bne.n	80077b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800778a:	4b82      	ldr	r3, [pc, #520]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007796:	d10b      	bne.n	80077b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007798:	4b7e      	ldr	r3, [pc, #504]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d05b      	beq.n	800785c <HAL_RCC_OscConfig+0x108>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d157      	bne.n	800785c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e242      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b8:	d106      	bne.n	80077c8 <HAL_RCC_OscConfig+0x74>
 80077ba:	4b76      	ldr	r3, [pc, #472]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a75      	ldr	r2, [pc, #468]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e01d      	b.n	8007804 <HAL_RCC_OscConfig+0xb0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d0:	d10c      	bne.n	80077ec <HAL_RCC_OscConfig+0x98>
 80077d2:	4b70      	ldr	r3, [pc, #448]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6f      	ldr	r2, [pc, #444]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	4b6d      	ldr	r3, [pc, #436]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a6c      	ldr	r2, [pc, #432]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	e00b      	b.n	8007804 <HAL_RCC_OscConfig+0xb0>
 80077ec:	4b69      	ldr	r3, [pc, #420]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a68      	ldr	r2, [pc, #416]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	4b66      	ldr	r3, [pc, #408]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a65      	ldr	r2, [pc, #404]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80077fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d013      	beq.n	8007834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780c:	f7fd ff46 	bl	800569c <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007812:	e008      	b.n	8007826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007814:	f7fd ff42 	bl	800569c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e207      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007826:	4b5b      	ldr	r3, [pc, #364]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0f0      	beq.n	8007814 <HAL_RCC_OscConfig+0xc0>
 8007832:	e014      	b.n	800785e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007834:	f7fd ff32 	bl	800569c <HAL_GetTick>
 8007838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800783c:	f7fd ff2e 	bl	800569c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b64      	cmp	r3, #100	; 0x64
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e1f3      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800784e:	4b51      	ldr	r3, [pc, #324]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f0      	bne.n	800783c <HAL_RCC_OscConfig+0xe8>
 800785a:	e000      	b.n	800785e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800785c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d063      	beq.n	8007932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800786a:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 030c 	and.w	r3, r3, #12
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007876:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800787e:	2b08      	cmp	r3, #8
 8007880:	d11c      	bne.n	80078bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007882:	4b44      	ldr	r3, [pc, #272]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d116      	bne.n	80078bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788e:	4b41      	ldr	r3, [pc, #260]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_RCC_OscConfig+0x152>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d001      	beq.n	80078a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e1c7      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a6:	4b3b      	ldr	r3, [pc, #236]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4937      	ldr	r1, [pc, #220]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ba:	e03a      	b.n	8007932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d020      	beq.n	8007906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078c4:	4b34      	ldr	r3, [pc, #208]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ca:	f7fd fee7 	bl	800569c <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078d2:	f7fd fee3 	bl	800569c <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e1a8      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e4:	4b2b      	ldr	r3, [pc, #172]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f0:	4b28      	ldr	r3, [pc, #160]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4925      	ldr	r1, [pc, #148]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007900:	4313      	orrs	r3, r2
 8007902:	600b      	str	r3, [r1, #0]
 8007904:	e015      	b.n	8007932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <HAL_RCC_OscConfig+0x244>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790c:	f7fd fec6 	bl	800569c <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007914:	f7fd fec2 	bl	800569c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e187      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007926:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f0      	bne.n	8007914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d036      	beq.n	80079ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <HAL_RCC_OscConfig+0x248>)
 8007948:	2201      	movs	r2, #1
 800794a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794c:	f7fd fea6 	bl	800569c <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007954:	f7fd fea2 	bl	800569c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e167      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <HAL_RCC_OscConfig+0x240>)
 8007968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f0      	beq.n	8007954 <HAL_RCC_OscConfig+0x200>
 8007972:	e01b      	b.n	80079ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCC_OscConfig+0x248>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800797a:	f7fd fe8f 	bl	800569c <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007980:	e00e      	b.n	80079a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007982:	f7fd fe8b 	bl	800569c <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d907      	bls.n	80079a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e150      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
 8007994:	40023800 	.word	0x40023800
 8007998:	42470000 	.word	0x42470000
 800799c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079a0:	4b88      	ldr	r3, [pc, #544]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 80079a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1ea      	bne.n	8007982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8097 	beq.w	8007ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079be:	4b81      	ldr	r3, [pc, #516]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10f      	bne.n	80079ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ca:	2300      	movs	r3, #0
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	4b7d      	ldr	r3, [pc, #500]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	4a7c      	ldr	r2, [pc, #496]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 80079d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d8:	6413      	str	r3, [r2, #64]	; 0x40
 80079da:	4b7a      	ldr	r3, [pc, #488]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079e2:	60bb      	str	r3, [r7, #8]
 80079e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ea:	4b77      	ldr	r3, [pc, #476]	; (8007bc8 <HAL_RCC_OscConfig+0x474>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d118      	bne.n	8007a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079f6:	4b74      	ldr	r3, [pc, #464]	; (8007bc8 <HAL_RCC_OscConfig+0x474>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a73      	ldr	r2, [pc, #460]	; (8007bc8 <HAL_RCC_OscConfig+0x474>)
 80079fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a02:	f7fd fe4b 	bl	800569c <HAL_GetTick>
 8007a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a08:	e008      	b.n	8007a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0a:	f7fd fe47 	bl	800569c <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d901      	bls.n	8007a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e10c      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a1c:	4b6a      	ldr	r3, [pc, #424]	; (8007bc8 <HAL_RCC_OscConfig+0x474>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0f0      	beq.n	8007a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d106      	bne.n	8007a3e <HAL_RCC_OscConfig+0x2ea>
 8007a30:	4b64      	ldr	r3, [pc, #400]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a34:	4a63      	ldr	r2, [pc, #396]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3c:	e01c      	b.n	8007a78 <HAL_RCC_OscConfig+0x324>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d10c      	bne.n	8007a60 <HAL_RCC_OscConfig+0x30c>
 8007a46:	4b5f      	ldr	r3, [pc, #380]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	4a5e      	ldr	r2, [pc, #376]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a4c:	f043 0304 	orr.w	r3, r3, #4
 8007a50:	6713      	str	r3, [r2, #112]	; 0x70
 8007a52:	4b5c      	ldr	r3, [pc, #368]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a56:	4a5b      	ldr	r2, [pc, #364]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a58:	f043 0301 	orr.w	r3, r3, #1
 8007a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a5e:	e00b      	b.n	8007a78 <HAL_RCC_OscConfig+0x324>
 8007a60:	4b58      	ldr	r3, [pc, #352]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	4a57      	ldr	r2, [pc, #348]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a66:	f023 0301 	bic.w	r3, r3, #1
 8007a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6c:	4b55      	ldr	r3, [pc, #340]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a70:	4a54      	ldr	r2, [pc, #336]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007a72:	f023 0304 	bic.w	r3, r3, #4
 8007a76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d015      	beq.n	8007aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a80:	f7fd fe0c 	bl	800569c <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a86:	e00a      	b.n	8007a9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a88:	f7fd fe08 	bl	800569c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e0cb      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a9e:	4b49      	ldr	r3, [pc, #292]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0ee      	beq.n	8007a88 <HAL_RCC_OscConfig+0x334>
 8007aaa:	e014      	b.n	8007ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aac:	f7fd fdf6 	bl	800569c <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ab2:	e00a      	b.n	8007aca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ab4:	f7fd fdf2 	bl	800569c <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e0b5      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aca:	4b3e      	ldr	r3, [pc, #248]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1ee      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d105      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007adc:	4b39      	ldr	r3, [pc, #228]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae0:	4a38      	ldr	r2, [pc, #224]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80a1 	beq.w	8007c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007af2:	4b34      	ldr	r3, [pc, #208]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 030c 	and.w	r3, r3, #12
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d05c      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d141      	bne.n	8007b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b06:	4b31      	ldr	r3, [pc, #196]	; (8007bcc <HAL_RCC_OscConfig+0x478>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0c:	f7fd fdc6 	bl	800569c <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b14:	f7fd fdc2 	bl	800569c <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e087      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b26:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f0      	bne.n	8007b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69da      	ldr	r2, [r3, #28]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	019b      	lsls	r3, r3, #6
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	085b      	lsrs	r3, r3, #1
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	041b      	lsls	r3, r3, #16
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	061b      	lsls	r3, r3, #24
 8007b56:	491b      	ldr	r1, [pc, #108]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <HAL_RCC_OscConfig+0x478>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b62:	f7fd fd9b 	bl	800569c <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b68:	e008      	b.n	8007b7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6a:	f7fd fd97 	bl	800569c <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d901      	bls.n	8007b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e05c      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7c:	4b11      	ldr	r3, [pc, #68]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d0f0      	beq.n	8007b6a <HAL_RCC_OscConfig+0x416>
 8007b88:	e054      	b.n	8007c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8a:	4b10      	ldr	r3, [pc, #64]	; (8007bcc <HAL_RCC_OscConfig+0x478>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b90:	f7fd fd84 	bl	800569c <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b98:	f7fd fd80 	bl	800569c <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e045      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <HAL_RCC_OscConfig+0x470>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f0      	bne.n	8007b98 <HAL_RCC_OscConfig+0x444>
 8007bb6:	e03d      	b.n	8007c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e038      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	40007000 	.word	0x40007000
 8007bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <HAL_RCC_OscConfig+0x4ec>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d028      	beq.n	8007c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d121      	bne.n	8007c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d11a      	bne.n	8007c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c00:	4013      	ands	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d111      	bne.n	8007c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d001      	beq.n	8007c34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40023800 	.word	0x40023800

08007c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e0cc      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c58:	4b68      	ldr	r3, [pc, #416]	; (8007dfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d90c      	bls.n	8007c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c66:	4b65      	ldr	r3, [pc, #404]	; (8007dfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6e:	4b63      	ldr	r3, [pc, #396]	; (8007dfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d001      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e0b8      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d020      	beq.n	8007cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c98:	4b59      	ldr	r3, [pc, #356]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a58      	ldr	r2, [pc, #352]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cb0:	4b53      	ldr	r3, [pc, #332]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	4a52      	ldr	r2, [pc, #328]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cbc:	4b50      	ldr	r3, [pc, #320]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	494d      	ldr	r1, [pc, #308]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d044      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d107      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ce2:	4b47      	ldr	r3, [pc, #284]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d119      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e07f      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d003      	beq.n	8007d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d107      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d02:	4b3f      	ldr	r3, [pc, #252]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e06f      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d12:	4b3b      	ldr	r3, [pc, #236]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e067      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d22:	4b37      	ldr	r3, [pc, #220]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f023 0203 	bic.w	r2, r3, #3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4934      	ldr	r1, [pc, #208]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d34:	f7fd fcb2 	bl	800569c <HAL_GetTick>
 8007d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d3c:	f7fd fcae 	bl	800569c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e04f      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d52:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 020c 	and.w	r2, r3, #12
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d1eb      	bne.n	8007d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d64:	4b25      	ldr	r3, [pc, #148]	; (8007dfc <HAL_RCC_ClockConfig+0x1b8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d20c      	bcs.n	8007d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d72:	4b22      	ldr	r3, [pc, #136]	; (8007dfc <HAL_RCC_ClockConfig+0x1b8>)
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7a:	4b20      	ldr	r3, [pc, #128]	; (8007dfc <HAL_RCC_ClockConfig+0x1b8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d001      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e032      	b.n	8007df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d008      	beq.n	8007daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d98:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	4916      	ldr	r1, [pc, #88]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007db6:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	490e      	ldr	r1, [pc, #56]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dca:	f000 f821 	bl	8007e10 <HAL_RCC_GetSysClockFreq>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	091b      	lsrs	r3, r3, #4
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	490a      	ldr	r1, [pc, #40]	; (8007e04 <HAL_RCC_ClockConfig+0x1c0>)
 8007ddc:	5ccb      	ldrb	r3, [r1, r3]
 8007dde:	fa22 f303 	lsr.w	r3, r2, r3
 8007de2:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <HAL_RCC_ClockConfig+0x1c4>)
 8007de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <HAL_RCC_ClockConfig+0x1c8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fd f948 	bl	8005080 <HAL_InitTick>

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40023c00 	.word	0x40023c00
 8007e00:	40023800 	.word	0x40023800
 8007e04:	08011b88 	.word	0x08011b88
 8007e08:	20000004 	.word	0x20000004
 8007e0c:	20000008 	.word	0x20000008

08007e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e14:	b094      	sub	sp, #80	; 0x50
 8007e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e20:	2300      	movs	r3, #0
 8007e22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e28:	4b79      	ldr	r3, [pc, #484]	; (8008010 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 030c 	and.w	r3, r3, #12
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d00d      	beq.n	8007e50 <HAL_RCC_GetSysClockFreq+0x40>
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	f200 80e1 	bhi.w	8007ffc <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <HAL_RCC_GetSysClockFreq+0x34>
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d003      	beq.n	8007e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e42:	e0db      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e44:	4b73      	ldr	r3, [pc, #460]	; (8008014 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e48:	e0db      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e4a:	4b73      	ldr	r3, [pc, #460]	; (8008018 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e4e:	e0d8      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e50:	4b6f      	ldr	r3, [pc, #444]	; (8008010 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e5a:	4b6d      	ldr	r3, [pc, #436]	; (8008010 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d063      	beq.n	8007f2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e66:	4b6a      	ldr	r3, [pc, #424]	; (8008010 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	099b      	lsrs	r3, r3, #6
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	f04f 0000 	mov.w	r0, #0
 8007e8a:	f04f 0100 	mov.w	r1, #0
 8007e8e:	0159      	lsls	r1, r3, #5
 8007e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e94:	0150      	lsls	r0, r2, #5
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	1a51      	subs	r1, r2, r1
 8007e9e:	6139      	str	r1, [r7, #16]
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	018b      	lsls	r3, r1, #6
 8007eb8:	4651      	mov	r1, sl
 8007eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ebe:	4651      	mov	r1, sl
 8007ec0:	018a      	lsls	r2, r1, #6
 8007ec2:	4651      	mov	r1, sl
 8007ec4:	ebb2 0801 	subs.w	r8, r2, r1
 8007ec8:	4659      	mov	r1, fp
 8007eca:	eb63 0901 	sbc.w	r9, r3, r1
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ee2:	4690      	mov	r8, r2
 8007ee4:	4699      	mov	r9, r3
 8007ee6:	4623      	mov	r3, r4
 8007ee8:	eb18 0303 	adds.w	r3, r8, r3
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	462b      	mov	r3, r5
 8007ef0:	eb49 0303 	adc.w	r3, r9, r3
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	f04f 0200 	mov.w	r2, #0
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f02:	4629      	mov	r1, r5
 8007f04:	024b      	lsls	r3, r1, #9
 8007f06:	4621      	mov	r1, r4
 8007f08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	024a      	lsls	r2, r1, #9
 8007f10:	4610      	mov	r0, r2
 8007f12:	4619      	mov	r1, r3
 8007f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f16:	2200      	movs	r2, #0
 8007f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f20:	f7f8 feba 	bl	8000c98 <__aeabi_uldivmod>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4613      	mov	r3, r2
 8007f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f2c:	e058      	b.n	8007fe0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f2e:	4b38      	ldr	r3, [pc, #224]	; (8008010 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	099b      	lsrs	r3, r3, #6
 8007f34:	2200      	movs	r2, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	4611      	mov	r1, r2
 8007f3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f3e:	623b      	str	r3, [r7, #32]
 8007f40:	2300      	movs	r3, #0
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
 8007f44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f48:	4642      	mov	r2, r8
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	f04f 0000 	mov.w	r0, #0
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	0159      	lsls	r1, r3, #5
 8007f56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f5a:	0150      	lsls	r0, r2, #5
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4641      	mov	r1, r8
 8007f62:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f66:	4649      	mov	r1, r9
 8007f68:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f80:	ebb2 040a 	subs.w	r4, r2, sl
 8007f84:	eb63 050b 	sbc.w	r5, r3, fp
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	00eb      	lsls	r3, r5, #3
 8007f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f96:	00e2      	lsls	r2, r4, #3
 8007f98:	4614      	mov	r4, r2
 8007f9a:	461d      	mov	r5, r3
 8007f9c:	4643      	mov	r3, r8
 8007f9e:	18e3      	adds	r3, r4, r3
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	eb45 0303 	adc.w	r3, r5, r3
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	028b      	lsls	r3, r1, #10
 8007fba:	4621      	mov	r1, r4
 8007fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	028a      	lsls	r2, r1, #10
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fca:	2200      	movs	r2, #0
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	61fa      	str	r2, [r7, #28]
 8007fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fd4:	f7f8 fe60 	bl	8000c98 <__aeabi_uldivmod>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4613      	mov	r3, r2
 8007fde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	3301      	adds	r3, #1
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ffa:	e002      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ffe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008004:	4618      	mov	r0, r3
 8008006:	3750      	adds	r7, #80	; 0x50
 8008008:	46bd      	mov	sp, r7
 800800a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800800e:	bf00      	nop
 8008010:	40023800 	.word	0x40023800
 8008014:	00f42400 	.word	0x00f42400
 8008018:	007a1200 	.word	0x007a1200

0800801c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <HAL_RCC_GetHCLKFreq+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000004 	.word	0x20000004

08008034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008038:	f7ff fff0 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800803c:	4602      	mov	r2, r0
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0a9b      	lsrs	r3, r3, #10
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4903      	ldr	r1, [pc, #12]	; (8008058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800804a:	5ccb      	ldrb	r3, [r1, r3]
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	08011b98 	.word	0x08011b98

0800805c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008060:	f7ff ffdc 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8008064:	4602      	mov	r2, r0
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	0b5b      	lsrs	r3, r3, #13
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4903      	ldr	r1, [pc, #12]	; (8008080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008072:	5ccb      	ldrb	r3, [r1, r3]
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40023800 	.word	0x40023800
 8008080:	08011b98 	.word	0x08011b98

08008084 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	220f      	movs	r2, #15
 8008092:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008094:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <HAL_RCC_GetClockConfig+0x5c>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 0203 	and.w	r2, r3, #3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080a0:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <HAL_RCC_GetClockConfig+0x5c>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80080ac:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <HAL_RCC_GetClockConfig+0x5c>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <HAL_RCC_GetClockConfig+0x5c>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <HAL_RCC_GetClockConfig+0x60>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0207 	and.w	r2, r3, #7
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	601a      	str	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40023800 	.word	0x40023800
 80080e4:	40023c00 	.word	0x40023c00

080080e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d105      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800810c:	2b00      	cmp	r3, #0
 800810e:	d038      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008110:	4b68      	ldr	r3, [pc, #416]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008116:	f7fd fac1 	bl	800569c <HAL_GetTick>
 800811a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800811c:	e008      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800811e:	f7fd fabd 	bl	800569c <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	2b02      	cmp	r3, #2
 800812a:	d901      	bls.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e0bd      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008130:	4b61      	ldr	r3, [pc, #388]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1f0      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	019b      	lsls	r3, r3, #6
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	071b      	lsls	r3, r3, #28
 800814e:	495a      	ldr	r1, [pc, #360]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008150:	4313      	orrs	r3, r2
 8008152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008156:	4b57      	ldr	r3, [pc, #348]	; (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008158:	2201      	movs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800815c:	f7fd fa9e 	bl	800569c <HAL_GetTick>
 8008160:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008164:	f7fd fa9a 	bl	800569c <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e09a      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008176:	4b50      	ldr	r3, [pc, #320]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8083 	beq.w	8008296 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	4b48      	ldr	r3, [pc, #288]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	4a47      	ldr	r2, [pc, #284]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819e:	6413      	str	r3, [r2, #64]	; 0x40
 80081a0:	4b45      	ldr	r3, [pc, #276]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80081ac:	4b43      	ldr	r3, [pc, #268]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a42      	ldr	r2, [pc, #264]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081b8:	f7fd fa70 	bl	800569c <HAL_GetTick>
 80081bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081c0:	f7fd fa6c 	bl	800569c <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e06c      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081d2:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f0      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081de:	4b36      	ldr	r3, [pc, #216]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02f      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d028      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081fc:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008204:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008206:	4b2e      	ldr	r3, [pc, #184]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800820c:	4b2c      	ldr	r3, [pc, #176]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008212:	4a29      	ldr	r2, [pc, #164]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008218:	4b27      	ldr	r3, [pc, #156]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d114      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008224:	f7fd fa3a 	bl	800569c <HAL_GetTick>
 8008228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800822a:	e00a      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800822c:	f7fd fa36 	bl	800569c <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	f241 3288 	movw	r2, #5000	; 0x1388
 800823a:	4293      	cmp	r3, r2
 800823c:	d901      	bls.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e034      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008242:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0ee      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800825a:	d10d      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800825c:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800826c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008270:	4911      	ldr	r1, [pc, #68]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008272:	4313      	orrs	r3, r2
 8008274:	608b      	str	r3, [r1, #8]
 8008276:	e005      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	4a0e      	ldr	r2, [pc, #56]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008282:	6093      	str	r3, [r2, #8]
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008290:	4909      	ldr	r1, [pc, #36]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008292:	4313      	orrs	r3, r2
 8008294:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7d1a      	ldrb	r2, [r3, #20]
 80082a6:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80082a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	42470068 	.word	0x42470068
 80082b8:	40023800 	.word	0x40023800
 80082bc:	40007000 	.word	0x40007000
 80082c0:	42470e40 	.word	0x42470e40
 80082c4:	424711e0 	.word	0x424711e0

080082c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e066      	b.n	80083ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7f5b      	ldrb	r3, [r3, #29]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d105      	bne.n	80082f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fc fe6e 	bl	8004fd0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	22ca      	movs	r2, #202	; 0xca
 8008300:	625a      	str	r2, [r3, #36]	; 0x24
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2253      	movs	r2, #83	; 0x53
 8008308:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fb6f 	bl	80089ee <RTC_EnterInitMode>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d12c      	bne.n	8008374 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800832c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6899      	ldr	r1, [r3, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	430a      	orrs	r2, r1
 800834a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	68d2      	ldr	r2, [r2, #12]
 8008354:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6919      	ldr	r1, [r3, #16]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	041a      	lsls	r2, r3, #16
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb76 	bl	8008a5c <RTC_ExitInitMode>
 8008370:	4603      	mov	r3, r0
 8008372:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d113      	bne.n	80083a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	22ff      	movs	r2, #255	; 0xff
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	7f1b      	ldrb	r3, [r3, #28]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_RTC_SetTime+0x1c>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e087      	b.n	80084e0 <HAL_RTC_SetTime+0x12c>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2202      	movs	r2, #2
 80083da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d126      	bne.n	8008430 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fb53 	bl	8008aa6 <RTC_ByteToBcd2>
 8008400:	4603      	mov	r3, r0
 8008402:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fb4c 	bl	8008aa6 <RTC_ByteToBcd2>
 800840e:	4603      	mov	r3, r0
 8008410:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008412:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	789b      	ldrb	r3, [r3, #2]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fb44 	bl	8008aa6 <RTC_ByteToBcd2>
 800841e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008420:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	78db      	ldrb	r3, [r3, #3]
 8008428:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	e018      	b.n	8008462 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2200      	movs	r2, #0
 8008442:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008450:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008456:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	78db      	ldrb	r3, [r3, #3]
 800845c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	22ca      	movs	r2, #202	; 0xca
 8008468:	625a      	str	r2, [r3, #36]	; 0x24
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2253      	movs	r2, #83	; 0x53
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fabb 	bl	80089ee <RTC_EnterInitMode>
 8008478:	4603      	mov	r3, r0
 800847a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800847c:	7cfb      	ldrb	r3, [r7, #19]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d120      	bne.n	80084c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800848c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008490:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6899      	ldr	r1, [r3, #8]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 face 	bl	8008a5c <RTC_ExitInitMode>
 80084c0:	4603      	mov	r3, r0
 80084c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80084c4:	7cfb      	ldrb	r3, [r7, #19]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	771a      	strb	r2, [r3, #28]

  return status;
 80084de:	7cfb      	ldrb	r3, [r7, #19]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd90      	pop	{r4, r7, pc}

080084e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800851a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800851e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800853a:	b2da      	uxtb	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008548:	b2da      	uxtb	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	0d9b      	lsrs	r3, r3, #22
 8008552:	b2db      	uxtb	r3, r3
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11a      	bne.n	800859a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fab9 	bl	8008ae0 <RTC_Bcd2ToByte>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	785b      	ldrb	r3, [r3, #1]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fab0 	bl	8008ae0 <RTC_Bcd2ToByte>
 8008580:	4603      	mov	r3, r0
 8008582:	461a      	mov	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	789b      	ldrb	r3, [r3, #2]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 faa7 	bl	8008ae0 <RTC_Bcd2ToByte>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085a4:	b590      	push	{r4, r7, lr}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	7f1b      	ldrb	r3, [r3, #28]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_RTC_SetDate+0x1c>
 80085bc:	2302      	movs	r3, #2
 80085be:	e071      	b.n	80086a4 <HAL_RTC_SetDate+0x100>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2202      	movs	r2, #2
 80085ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10e      	bne.n	80085f0 <HAL_RTC_SetDate+0x4c>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d008      	beq.n	80085f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	f023 0310 	bic.w	r3, r3, #16
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	330a      	adds	r3, #10
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d11c      	bne.n	8008630 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	78db      	ldrb	r3, [r3, #3]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fa53 	bl	8008aa6 <RTC_ByteToBcd2>
 8008600:	4603      	mov	r3, r0
 8008602:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fa4c 	bl	8008aa6 <RTC_ByteToBcd2>
 800860e:	4603      	mov	r3, r0
 8008610:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008612:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	789b      	ldrb	r3, [r3, #2]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fa44 	bl	8008aa6 <RTC_ByteToBcd2>
 800861e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008620:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800862a:	4313      	orrs	r3, r2
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	e00e      	b.n	800864e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	78db      	ldrb	r3, [r3, #3]
 8008634:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800863c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008642:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	22ca      	movs	r2, #202	; 0xca
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2253      	movs	r2, #83	; 0x53
 800865c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f9c5 	bl	80089ee <RTC_EnterInitMode>
 8008664:	4603      	mov	r3, r0
 8008666:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008668:	7cfb      	ldrb	r3, [r7, #19]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10c      	bne.n	8008688 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800867c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f9ec 	bl	8008a5c <RTC_ExitInitMode>
 8008684:	4603      	mov	r3, r0
 8008686:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008688:	7cfb      	ldrb	r3, [r7, #19]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	22ff      	movs	r2, #255	; 0xff
 800869a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	771a      	strb	r2, [r3, #28]

  return status;
 80086a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd90      	pop	{r4, r7, pc}

080086ac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	0c1b      	lsrs	r3, r3, #16
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	0b5b      	lsrs	r3, r3, #13
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d11a      	bne.n	8008740 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	78db      	ldrb	r3, [r3, #3]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f9e6 	bl	8008ae0 <RTC_Bcd2ToByte>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f9dd 	bl	8008ae0 <RTC_Bcd2ToByte>
 8008726:	4603      	mov	r3, r0
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	789b      	ldrb	r3, [r3, #2]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f9d4 	bl	8008ae0 <RTC_Bcd2ToByte>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800874a:	b590      	push	{r4, r7, lr}
 800874c:	b089      	sub	sp, #36	; 0x24
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	7f1b      	ldrb	r3, [r3, #28]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_RTC_SetAlarm+0x24>
 800876a:	2302      	movs	r3, #2
 800876c:	e113      	b.n	8008996 <HAL_RTC_SetAlarm+0x24c>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2202      	movs	r2, #2
 8008778:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d137      	bne.n	80087f0 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 f984 	bl	8008aa6 <RTC_ByteToBcd2>
 800879e:	4603      	mov	r3, r0
 80087a0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f97d 	bl	8008aa6 <RTC_ByteToBcd2>
 80087ac:	4603      	mov	r3, r0
 80087ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80087b0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	789b      	ldrb	r3, [r3, #2]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f975 	bl	8008aa6 <RTC_ByteToBcd2>
 80087bc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80087be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	78db      	ldrb	r3, [r3, #3]
 80087c6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80087c8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f967 	bl	8008aa6 <RTC_ByteToBcd2>
 80087d8:	4603      	mov	r3, r0
 80087da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80087dc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80087e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80087ea:	4313      	orrs	r3, r2
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	e023      	b.n	8008838 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008810:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008816:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800881e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008826:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008828:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800882e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008834:	4313      	orrs	r3, r2
 8008836:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	22ca      	movs	r2, #202	; 0xca
 800884a:	625a      	str	r2, [r3, #36]	; 0x24
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2253      	movs	r2, #83	; 0x53
 8008852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885c:	d148      	bne.n	80088f0 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800886c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800887c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	b2da      	uxtb	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800888e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008890:	f7fc ff04 	bl	800569c <HAL_GetTick>
 8008894:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008896:	e013      	b.n	80088c0 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008898:	f7fc ff00 	bl	800569c <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088a6:	d90b      	bls.n	80088c0 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	22ff      	movs	r2, #255	; 0xff
 80088ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2203      	movs	r2, #3
 80088b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e06a      	b.n	8008996 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0e4      	beq.n	8008898 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689a      	ldr	r2, [r3, #8]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088ec:	609a      	str	r2, [r3, #8]
 80088ee:	e047      	b.n	8008980 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088fe:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689a      	ldr	r2, [r3, #8]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800890e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008920:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008922:	f7fc febb 	bl	800569c <HAL_GetTick>
 8008926:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008928:	e013      	b.n	8008952 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800892a:	f7fc feb7 	bl	800569c <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008938:	d90b      	bls.n	8008952 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	22ff      	movs	r2, #255	; 0xff
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2203      	movs	r2, #3
 8008946:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e021      	b.n	8008996 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0e4      	beq.n	800892a <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800897e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	22ff      	movs	r2, #255	; 0xff
 8008986:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3724      	adds	r7, #36	; 0x24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd90      	pop	{r4, r7, pc}

0800899e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089b8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089ba:	f7fc fe6f 	bl	800569c <HAL_GetTick>
 80089be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089c0:	e009      	b.n	80089d6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089c2:	f7fc fe6b 	bl	800569c <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089d0:	d901      	bls.n	80089d6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e007      	b.n	80089e6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0ee      	beq.n	80089c2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d122      	bne.n	8008a52 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1c:	f7fc fe3e 	bl	800569c <HAL_GetTick>
 8008a20:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a22:	e00c      	b.n	8008a3e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a24:	f7fc fe3a 	bl	800569c <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a32:	d904      	bls.n	8008a3e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d102      	bne.n	8008a52 <RTC_EnterInitMode+0x64>
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d1e8      	bne.n	8008a24 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a76:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10a      	bne.n	8008a9c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff ff89 	bl	800899e <HAL_RTC_WaitForSynchro>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2204      	movs	r2, #4
 8008a96:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	4603      	mov	r3, r0
 8008aae:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008ab4:	e005      	b.n	8008ac2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	3b0a      	subs	r3, #10
 8008ac0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	2b09      	cmp	r3, #9
 8008ac6:	d8f6      	bhi.n	8008ab6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	b2db      	uxtb	r3, r3
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	0092      	lsls	r2, r2, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	4413      	add	r3, r2
 8008b0a:	b2db      	uxtb	r3, r3
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e041      	b.n	8008bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7fc fc7e 	bl	8005440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	f000 fc54 	bl	8009404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d001      	beq.n	8008bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e044      	b.n	8008c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0201 	orr.w	r2, r2, #1
 8008be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a1e      	ldr	r2, [pc, #120]	; (8008c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d018      	beq.n	8008c24 <HAL_TIM_Base_Start_IT+0x6c>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bfa:	d013      	beq.n	8008c24 <HAL_TIM_Base_Start_IT+0x6c>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a1a      	ldr	r2, [pc, #104]	; (8008c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00e      	beq.n	8008c24 <HAL_TIM_Base_Start_IT+0x6c>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a19      	ldr	r2, [pc, #100]	; (8008c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d009      	beq.n	8008c24 <HAL_TIM_Base_Start_IT+0x6c>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a17      	ldr	r2, [pc, #92]	; (8008c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d004      	beq.n	8008c24 <HAL_TIM_Base_Start_IT+0x6c>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d111      	bne.n	8008c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b06      	cmp	r3, #6
 8008c34:	d010      	beq.n	8008c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f042 0201 	orr.w	r2, r2, #1
 8008c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c46:	e007      	b.n	8008c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0201 	orr.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40010000 	.word	0x40010000
 8008c6c:	40000400 	.word	0x40000400
 8008c70:	40000800 	.word	0x40000800
 8008c74:	40000c00 	.word	0x40000c00
 8008c78:	40014000 	.word	0x40014000

08008c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e041      	b.n	8008d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f839 	bl	8008d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 fba2 	bl	8009404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_TIM_PWM_Start+0x24>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	bf14      	ite	ne
 8008d4c:	2301      	movne	r3, #1
 8008d4e:	2300      	moveq	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	e022      	b.n	8008d9a <HAL_TIM_PWM_Start+0x6a>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d109      	bne.n	8008d6e <HAL_TIM_PWM_Start+0x3e>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	bf14      	ite	ne
 8008d66:	2301      	movne	r3, #1
 8008d68:	2300      	moveq	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	e015      	b.n	8008d9a <HAL_TIM_PWM_Start+0x6a>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d109      	bne.n	8008d88 <HAL_TIM_PWM_Start+0x58>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	bf14      	ite	ne
 8008d80:	2301      	movne	r3, #1
 8008d82:	2300      	moveq	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	e008      	b.n	8008d9a <HAL_TIM_PWM_Start+0x6a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	bf14      	ite	ne
 8008d94:	2301      	movne	r3, #1
 8008d96:	2300      	moveq	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e068      	b.n	8008e74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <HAL_TIM_PWM_Start+0x82>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db0:	e013      	b.n	8008dda <HAL_TIM_PWM_Start+0xaa>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d104      	bne.n	8008dc2 <HAL_TIM_PWM_Start+0x92>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dc0:	e00b      	b.n	8008dda <HAL_TIM_PWM_Start+0xaa>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	d104      	bne.n	8008dd2 <HAL_TIM_PWM_Start+0xa2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dd0:	e003      	b.n	8008dda <HAL_TIM_PWM_Start+0xaa>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2201      	movs	r2, #1
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fdb4 	bl	8009950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a23      	ldr	r2, [pc, #140]	; (8008e7c <HAL_TIM_PWM_Start+0x14c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d107      	bne.n	8008e02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1d      	ldr	r2, [pc, #116]	; (8008e7c <HAL_TIM_PWM_Start+0x14c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d018      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x10e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e14:	d013      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x10e>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <HAL_TIM_PWM_Start+0x150>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x10e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a17      	ldr	r2, [pc, #92]	; (8008e84 <HAL_TIM_PWM_Start+0x154>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d009      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x10e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <HAL_TIM_PWM_Start+0x158>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <HAL_TIM_PWM_Start+0x10e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a14      	ldr	r2, [pc, #80]	; (8008e8c <HAL_TIM_PWM_Start+0x15c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d111      	bne.n	8008e62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b06      	cmp	r3, #6
 8008e4e:	d010      	beq.n	8008e72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0201 	orr.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e60:	e007      	b.n	8008e72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0201 	orr.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	40010000 	.word	0x40010000
 8008e80:	40000400 	.word	0x40000400
 8008e84:	40000800 	.word	0x40000800
 8008e88:	40000c00 	.word	0x40000c00
 8008e8c:	40014000 	.word	0x40014000

08008e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d122      	bne.n	8008eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d11b      	bne.n	8008eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f06f 0202 	mvn.w	r2, #2
 8008ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa77 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8008ed8:	e005      	b.n	8008ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa69 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa7a 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d122      	bne.n	8008f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d11b      	bne.n	8008f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0204 	mvn.w	r2, #4
 8008f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2202      	movs	r2, #2
 8008f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa4d 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa3f 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa50 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	d122      	bne.n	8008f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d11b      	bne.n	8008f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0208 	mvn.w	r2, #8
 8008f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2204      	movs	r2, #4
 8008f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa23 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8008f80:	e005      	b.n	8008f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa15 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa26 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f003 0310 	and.w	r3, r3, #16
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d122      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b10      	cmp	r3, #16
 8008fae:	d11b      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f06f 0210 	mvn.w	r2, #16
 8008fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f9f9 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8008fd4:	e005      	b.n	8008fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9eb 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9fc 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d10e      	bne.n	8009014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b01      	cmp	r3, #1
 8009002:	d107      	bne.n	8009014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f06f 0201 	mvn.w	r2, #1
 800900c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fa face 	bl	80035b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901e:	2b80      	cmp	r3, #128	; 0x80
 8009020:	d10e      	bne.n	8009040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902c:	2b80      	cmp	r3, #128	; 0x80
 800902e:	d107      	bne.n	8009040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fd26 	bl	8009a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b40      	cmp	r3, #64	; 0x40
 800904c:	d10e      	bne.n	800906c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d107      	bne.n	800906c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f9c1 	bl	80093ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b20      	cmp	r3, #32
 8009078:	d10e      	bne.n	8009098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b20      	cmp	r3, #32
 8009086:	d107      	bne.n	8009098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f06f 0220 	mvn.w	r2, #32
 8009090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fcf0 	bl	8009a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e0ae      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b0c      	cmp	r3, #12
 80090ca:	f200 809f 	bhi.w	800920c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090ce:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	08009109 	.word	0x08009109
 80090d8:	0800920d 	.word	0x0800920d
 80090dc:	0800920d 	.word	0x0800920d
 80090e0:	0800920d 	.word	0x0800920d
 80090e4:	08009149 	.word	0x08009149
 80090e8:	0800920d 	.word	0x0800920d
 80090ec:	0800920d 	.word	0x0800920d
 80090f0:	0800920d 	.word	0x0800920d
 80090f4:	0800918b 	.word	0x0800918b
 80090f8:	0800920d 	.word	0x0800920d
 80090fc:	0800920d 	.word	0x0800920d
 8009100:	0800920d 	.word	0x0800920d
 8009104:	080091cb 	.word	0x080091cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f9f8 	bl	8009504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699a      	ldr	r2, [r3, #24]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0208 	orr.w	r2, r2, #8
 8009122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0204 	bic.w	r2, r2, #4
 8009132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6999      	ldr	r1, [r3, #24]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	691a      	ldr	r2, [r3, #16]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	619a      	str	r2, [r3, #24]
      break;
 8009146:	e064      	b.n	8009212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 fa3e 	bl	80095d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6999      	ldr	r1, [r3, #24]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	021a      	lsls	r2, r3, #8
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	619a      	str	r2, [r3, #24]
      break;
 8009188:	e043      	b.n	8009212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fa89 	bl	80096a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f042 0208 	orr.w	r2, r2, #8
 80091a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0204 	bic.w	r2, r2, #4
 80091b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69d9      	ldr	r1, [r3, #28]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	61da      	str	r2, [r3, #28]
      break;
 80091c8:	e023      	b.n	8009212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68b9      	ldr	r1, [r7, #8]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fad3 	bl	800977c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69da      	ldr	r2, [r3, #28]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69d9      	ldr	r1, [r3, #28]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	021a      	lsls	r2, r3, #8
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	61da      	str	r2, [r3, #28]
      break;
 800920a:	e002      	b.n	8009212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]
      break;
 8009210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_TIM_ConfigClockSource+0x1c>
 800923c:	2302      	movs	r3, #2
 800923e:	e0b4      	b.n	80093aa <HAL_TIM_ConfigClockSource+0x186>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800925e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009266:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009278:	d03e      	beq.n	80092f8 <HAL_TIM_ConfigClockSource+0xd4>
 800927a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800927e:	f200 8087 	bhi.w	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 8009282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009286:	f000 8086 	beq.w	8009396 <HAL_TIM_ConfigClockSource+0x172>
 800928a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800928e:	d87f      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 8009290:	2b70      	cmp	r3, #112	; 0x70
 8009292:	d01a      	beq.n	80092ca <HAL_TIM_ConfigClockSource+0xa6>
 8009294:	2b70      	cmp	r3, #112	; 0x70
 8009296:	d87b      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 8009298:	2b60      	cmp	r3, #96	; 0x60
 800929a:	d050      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x11a>
 800929c:	2b60      	cmp	r3, #96	; 0x60
 800929e:	d877      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 80092a0:	2b50      	cmp	r3, #80	; 0x50
 80092a2:	d03c      	beq.n	800931e <HAL_TIM_ConfigClockSource+0xfa>
 80092a4:	2b50      	cmp	r3, #80	; 0x50
 80092a6:	d873      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	d058      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x13a>
 80092ac:	2b40      	cmp	r3, #64	; 0x40
 80092ae:	d86f      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 80092b0:	2b30      	cmp	r3, #48	; 0x30
 80092b2:	d064      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x15a>
 80092b4:	2b30      	cmp	r3, #48	; 0x30
 80092b6:	d86b      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d060      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x15a>
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d867      	bhi.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d05c      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x15a>
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d05a      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x15a>
 80092c8:	e062      	b.n	8009390 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6818      	ldr	r0, [r3, #0]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	6899      	ldr	r1, [r3, #8]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f000 fb19 	bl	8009910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	609a      	str	r2, [r3, #8]
      break;
 80092f6:	e04f      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6899      	ldr	r1, [r3, #8]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f000 fb02 	bl	8009910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800931a:	609a      	str	r2, [r3, #8]
      break;
 800931c:	e03c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6859      	ldr	r1, [r3, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	461a      	mov	r2, r3
 800932c:	f000 fa76 	bl	800981c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2150      	movs	r1, #80	; 0x50
 8009336:	4618      	mov	r0, r3
 8009338:	f000 facf 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 800933c:	e02c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6859      	ldr	r1, [r3, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	461a      	mov	r2, r3
 800934c:	f000 fa95 	bl	800987a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2160      	movs	r1, #96	; 0x60
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fabf 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 800935c:	e01c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6859      	ldr	r1, [r3, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	461a      	mov	r2, r3
 800936c:	f000 fa56 	bl	800981c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2140      	movs	r1, #64	; 0x40
 8009376:	4618      	mov	r0, r3
 8009378:	f000 faaf 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 800937c:	e00c      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f000 faa6 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 800938e:	e003      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	73fb      	strb	r3, [r7, #15]
      break;
 8009394:	e000      	b.n	8009398 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
	...

08009404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a34      	ldr	r2, [pc, #208]	; (80094e8 <TIM_Base_SetConfig+0xe4>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00f      	beq.n	800943c <TIM_Base_SetConfig+0x38>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009422:	d00b      	beq.n	800943c <TIM_Base_SetConfig+0x38>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a31      	ldr	r2, [pc, #196]	; (80094ec <TIM_Base_SetConfig+0xe8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d007      	beq.n	800943c <TIM_Base_SetConfig+0x38>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a30      	ldr	r2, [pc, #192]	; (80094f0 <TIM_Base_SetConfig+0xec>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_Base_SetConfig+0x38>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a2f      	ldr	r2, [pc, #188]	; (80094f4 <TIM_Base_SetConfig+0xf0>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d108      	bne.n	800944e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a25      	ldr	r2, [pc, #148]	; (80094e8 <TIM_Base_SetConfig+0xe4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d01b      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800945c:	d017      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a22      	ldr	r2, [pc, #136]	; (80094ec <TIM_Base_SetConfig+0xe8>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d013      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a21      	ldr	r2, [pc, #132]	; (80094f0 <TIM_Base_SetConfig+0xec>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d00f      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a20      	ldr	r2, [pc, #128]	; (80094f4 <TIM_Base_SetConfig+0xf0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00b      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1f      	ldr	r2, [pc, #124]	; (80094f8 <TIM_Base_SetConfig+0xf4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d007      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1e      	ldr	r2, [pc, #120]	; (80094fc <TIM_Base_SetConfig+0xf8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d003      	beq.n	800948e <TIM_Base_SetConfig+0x8a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a1d      	ldr	r2, [pc, #116]	; (8009500 <TIM_Base_SetConfig+0xfc>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d108      	bne.n	80094a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4313      	orrs	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a08      	ldr	r2, [pc, #32]	; (80094e8 <TIM_Base_SetConfig+0xe4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d103      	bne.n	80094d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	691a      	ldr	r2, [r3, #16]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	615a      	str	r2, [r3, #20]
}
 80094da:	bf00      	nop
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40000800 	.word	0x40000800
 80094f4:	40000c00 	.word	0x40000c00
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400
 8009500:	40014800 	.word	0x40014800

08009504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f023 0201 	bic.w	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f023 0302 	bic.w	r3, r3, #2
 800954c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	4313      	orrs	r3, r2
 8009556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1c      	ldr	r2, [pc, #112]	; (80095cc <TIM_OC1_SetConfig+0xc8>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d10c      	bne.n	800957a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f023 0308 	bic.w	r3, r3, #8
 8009566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	4313      	orrs	r3, r2
 8009570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f023 0304 	bic.w	r3, r3, #4
 8009578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a13      	ldr	r2, [pc, #76]	; (80095cc <TIM_OC1_SetConfig+0xc8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d111      	bne.n	80095a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	4313      	orrs	r3, r2
 800959a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	621a      	str	r2, [r3, #32]
}
 80095c0:	bf00      	nop
 80095c2:	371c      	adds	r7, #28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	40010000 	.word	0x40010000

080095d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	f023 0210 	bic.w	r2, r3, #16
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0320 	bic.w	r3, r3, #32
 800961a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a1e      	ldr	r2, [pc, #120]	; (80096a4 <TIM_OC2_SetConfig+0xd4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d10d      	bne.n	800964c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	4313      	orrs	r3, r2
 8009642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a15      	ldr	r2, [pc, #84]	; (80096a4 <TIM_OC2_SetConfig+0xd4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d113      	bne.n	800967c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800965a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	621a      	str	r2, [r3, #32]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000

080096a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a1d      	ldr	r2, [pc, #116]	; (8009778 <TIM_OC3_SetConfig+0xd0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d10d      	bne.n	8009722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800970c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a14      	ldr	r2, [pc, #80]	; (8009778 <TIM_OC3_SetConfig+0xd0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d113      	bne.n	8009752 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	011b      	lsls	r3, r3, #4
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	4313      	orrs	r3, r2
 8009744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	621a      	str	r2, [r3, #32]
}
 800976c:	bf00      	nop
 800976e:	371c      	adds	r7, #28
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	40010000 	.word	0x40010000

0800977c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	021b      	lsls	r3, r3, #8
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	4313      	orrs	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	031b      	lsls	r3, r3, #12
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a10      	ldr	r2, [pc, #64]	; (8009818 <TIM_OC4_SetConfig+0x9c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d109      	bne.n	80097f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	019b      	lsls	r3, r3, #6
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40010000 	.word	0x40010000

0800981c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f023 0201 	bic.w	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4313      	orrs	r3, r2
 8009850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f023 030a 	bic.w	r3, r3, #10
 8009858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	621a      	str	r2, [r3, #32]
}
 800986e:	bf00      	nop
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800987a:	b480      	push	{r7}
 800987c:	b087      	sub	sp, #28
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f023 0210 	bic.w	r2, r3, #16
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	031b      	lsls	r3, r3, #12
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	011b      	lsls	r3, r3, #4
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	621a      	str	r2, [r3, #32]
}
 80098ce:	bf00      	nop
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f043 0307 	orr.w	r3, r3, #7
 80098fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	609a      	str	r2, [r3, #8]
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800992a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	021a      	lsls	r2, r3, #8
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	431a      	orrs	r2, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4313      	orrs	r3, r2
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	609a      	str	r2, [r3, #8]
}
 8009944:	bf00      	nop
 8009946:	371c      	adds	r7, #28
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	2201      	movs	r2, #1
 8009964:	fa02 f303 	lsl.w	r3, r2, r3
 8009968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a1a      	ldr	r2, [r3, #32]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	43db      	mvns	r3, r3
 8009972:	401a      	ands	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1a      	ldr	r2, [r3, #32]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	fa01 f303 	lsl.w	r3, r1, r3
 8009988:	431a      	orrs	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	621a      	str	r2, [r3, #32]
}
 800998e:	bf00      	nop
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
	...

0800999c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d101      	bne.n	80099b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099b0:	2302      	movs	r3, #2
 80099b2:	e050      	b.n	8009a56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1c      	ldr	r2, [pc, #112]	; (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d018      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a00:	d013      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d00e      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a16      	ldr	r2, [pc, #88]	; (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d009      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a15      	ldr	r2, [pc, #84]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d004      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a13      	ldr	r2, [pc, #76]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d10c      	bne.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40010000 	.word	0x40010000
 8009a68:	40000400 	.word	0x40000400
 8009a6c:	40000800 	.word	0x40000800
 8009a70:	40000c00 	.word	0x40000c00
 8009a74:	40014000 	.word	0x40014000

08009a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e03f      	b.n	8009b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fb fd40 	bl	800554c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2224      	movs	r2, #36	; 0x24
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f929 	bl	8009d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691a      	ldr	r2, [r3, #16]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695a      	ldr	r2, [r3, #20]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b08a      	sub	sp, #40	; 0x28
 8009b3e:	af02      	add	r7, sp, #8
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	603b      	str	r3, [r7, #0]
 8009b46:	4613      	mov	r3, r2
 8009b48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b20      	cmp	r3, #32
 8009b58:	d17c      	bne.n	8009c54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <HAL_UART_Transmit+0x2c>
 8009b60:	88fb      	ldrh	r3, [r7, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e075      	b.n	8009c56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d101      	bne.n	8009b78 <HAL_UART_Transmit+0x3e>
 8009b74:	2302      	movs	r3, #2
 8009b76:	e06e      	b.n	8009c56 <HAL_UART_Transmit+0x11c>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2221      	movs	r2, #33	; 0x21
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b8e:	f7fb fd85 	bl	800569c <HAL_GetTick>
 8009b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	88fa      	ldrh	r2, [r7, #6]
 8009b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	88fa      	ldrh	r2, [r7, #6]
 8009b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba8:	d108      	bne.n	8009bbc <HAL_UART_Transmit+0x82>
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e003      	b.n	8009bc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009bcc:	e02a      	b.n	8009c24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2180      	movs	r1, #128	; 0x80
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f840 	bl	8009c5e <UART_WaitOnFlagUntilTimeout>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e036      	b.n	8009c56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	3302      	adds	r3, #2
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	e007      	b.n	8009c16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	781a      	ldrb	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	3301      	adds	r3, #1
 8009c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1cf      	bne.n	8009bce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2200      	movs	r2, #0
 8009c36:	2140      	movs	r1, #64	; 0x40
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f810 	bl	8009c5e <UART_WaitOnFlagUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e006      	b.n	8009c56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e000      	b.n	8009c56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009c54:	2302      	movs	r3, #2
  }
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b090      	sub	sp, #64	; 0x40
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c6e:	e050      	b.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d04c      	beq.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <UART_WaitOnFlagUntilTimeout+0x30>
 8009c7e:	f7fb fd0d 	bl	800569c <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d241      	bcs.n	8009d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	330c      	adds	r3, #12
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cae:	637a      	str	r2, [r7, #52]	; 0x34
 8009cb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3314      	adds	r3, #20
 8009cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f023 0301 	bic.w	r3, r3, #1
 8009cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3314      	adds	r3, #20
 8009ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ce2:	623a      	str	r2, [r7, #32]
 8009ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	69f9      	ldr	r1, [r7, #28]
 8009ce8:	6a3a      	ldr	r2, [r7, #32]
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1e5      	bne.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e00f      	b.n	8009d32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	bf0c      	ite	eq
 8009d22:	2301      	moveq	r3, #1
 8009d24:	2300      	movne	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d09f      	beq.n	8009c70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3740      	adds	r7, #64	; 0x40
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d40:	b0c0      	sub	sp, #256	; 0x100
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d58:	68d9      	ldr	r1, [r3, #12]
 8009d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	ea40 0301 	orr.w	r3, r0, r1
 8009d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6a:	689a      	ldr	r2, [r3, #8]
 8009d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d94:	f021 010c 	bic.w	r1, r1, #12
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009da2:	430b      	orrs	r3, r1
 8009da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db6:	6999      	ldr	r1, [r3, #24]
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	ea40 0301 	orr.w	r3, r0, r1
 8009dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4b8f      	ldr	r3, [pc, #572]	; (800a008 <UART_SetConfig+0x2cc>)
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d005      	beq.n	8009ddc <UART_SetConfig+0xa0>
 8009dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	4b8d      	ldr	r3, [pc, #564]	; (800a00c <UART_SetConfig+0x2d0>)
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d104      	bne.n	8009de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ddc:	f7fe f93e 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8009de0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009de4:	e003      	b.n	8009dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009de6:	f7fe f925 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8009dea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df8:	f040 810c 	bne.w	800a014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e0e:	4622      	mov	r2, r4
 8009e10:	462b      	mov	r3, r5
 8009e12:	1891      	adds	r1, r2, r2
 8009e14:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e16:	415b      	adcs	r3, r3
 8009e18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e1e:	4621      	mov	r1, r4
 8009e20:	eb12 0801 	adds.w	r8, r2, r1
 8009e24:	4629      	mov	r1, r5
 8009e26:	eb43 0901 	adc.w	r9, r3, r1
 8009e2a:	f04f 0200 	mov.w	r2, #0
 8009e2e:	f04f 0300 	mov.w	r3, #0
 8009e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e3e:	4690      	mov	r8, r2
 8009e40:	4699      	mov	r9, r3
 8009e42:	4623      	mov	r3, r4
 8009e44:	eb18 0303 	adds.w	r3, r8, r3
 8009e48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	eb49 0303 	adc.w	r3, r9, r3
 8009e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	18db      	adds	r3, r3, r3
 8009e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e70:	4613      	mov	r3, r2
 8009e72:	eb42 0303 	adc.w	r3, r2, r3
 8009e76:	657b      	str	r3, [r7, #84]	; 0x54
 8009e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e80:	f7f6 ff0a 	bl	8000c98 <__aeabi_uldivmod>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4b61      	ldr	r3, [pc, #388]	; (800a010 <UART_SetConfig+0x2d4>)
 8009e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e8e:	095b      	lsrs	r3, r3, #5
 8009e90:	011c      	lsls	r4, r3, #4
 8009e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	1891      	adds	r1, r2, r2
 8009eaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8009eac:	415b      	adcs	r3, r3
 8009eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8009eba:	4649      	mov	r1, r9
 8009ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ed4:	4692      	mov	sl, r2
 8009ed6:	469b      	mov	fp, r3
 8009ed8:	4643      	mov	r3, r8
 8009eda:	eb1a 0303 	adds.w	r3, sl, r3
 8009ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ee2:	464b      	mov	r3, r9
 8009ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8009ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f00:	460b      	mov	r3, r1
 8009f02:	18db      	adds	r3, r3, r3
 8009f04:	643b      	str	r3, [r7, #64]	; 0x40
 8009f06:	4613      	mov	r3, r2
 8009f08:	eb42 0303 	adc.w	r3, r2, r3
 8009f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f16:	f7f6 febf 	bl	8000c98 <__aeabi_uldivmod>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4b3b      	ldr	r3, [pc, #236]	; (800a010 <UART_SetConfig+0x2d4>)
 8009f22:	fba3 2301 	umull	r2, r3, r3, r1
 8009f26:	095b      	lsrs	r3, r3, #5
 8009f28:	2264      	movs	r2, #100	; 0x64
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
 8009f2e:	1acb      	subs	r3, r1, r3
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f36:	4b36      	ldr	r3, [pc, #216]	; (800a010 <UART_SetConfig+0x2d4>)
 8009f38:	fba3 2302 	umull	r2, r3, r3, r2
 8009f3c:	095b      	lsrs	r3, r3, #5
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f44:	441c      	add	r4, r3
 8009f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	1891      	adds	r1, r2, r2
 8009f5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f60:	415b      	adcs	r3, r3
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f68:	4641      	mov	r1, r8
 8009f6a:	1851      	adds	r1, r2, r1
 8009f6c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f6e:	4649      	mov	r1, r9
 8009f70:	414b      	adcs	r3, r1
 8009f72:	637b      	str	r3, [r7, #52]	; 0x34
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	f04f 0300 	mov.w	r3, #0
 8009f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f80:	4659      	mov	r1, fp
 8009f82:	00cb      	lsls	r3, r1, #3
 8009f84:	4651      	mov	r1, sl
 8009f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f8a:	4651      	mov	r1, sl
 8009f8c:	00ca      	lsls	r2, r1, #3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4619      	mov	r1, r3
 8009f92:	4603      	mov	r3, r0
 8009f94:	4642      	mov	r2, r8
 8009f96:	189b      	adds	r3, r3, r2
 8009f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	460a      	mov	r2, r1
 8009fa0:	eb42 0303 	adc.w	r3, r2, r3
 8009fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	18db      	adds	r3, r3, r3
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	eb42 0303 	adc.w	r3, r2, r3
 8009fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009fd2:	f7f6 fe61 	bl	8000c98 <__aeabi_uldivmod>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <UART_SetConfig+0x2d4>)
 8009fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	2164      	movs	r1, #100	; 0x64
 8009fe4:	fb01 f303 	mul.w	r3, r1, r3
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	3332      	adds	r3, #50	; 0x32
 8009fee:	4a08      	ldr	r2, [pc, #32]	; (800a010 <UART_SetConfig+0x2d4>)
 8009ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff4:	095b      	lsrs	r3, r3, #5
 8009ff6:	f003 0207 	and.w	r2, r3, #7
 8009ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4422      	add	r2, r4
 800a002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a004:	e106      	b.n	800a214 <UART_SetConfig+0x4d8>
 800a006:	bf00      	nop
 800a008:	40011000 	.word	0x40011000
 800a00c:	40011400 	.word	0x40011400
 800a010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a01e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a026:	4642      	mov	r2, r8
 800a028:	464b      	mov	r3, r9
 800a02a:	1891      	adds	r1, r2, r2
 800a02c:	6239      	str	r1, [r7, #32]
 800a02e:	415b      	adcs	r3, r3
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
 800a032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a036:	4641      	mov	r1, r8
 800a038:	1854      	adds	r4, r2, r1
 800a03a:	4649      	mov	r1, r9
 800a03c:	eb43 0501 	adc.w	r5, r3, r1
 800a040:	f04f 0200 	mov.w	r2, #0
 800a044:	f04f 0300 	mov.w	r3, #0
 800a048:	00eb      	lsls	r3, r5, #3
 800a04a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a04e:	00e2      	lsls	r2, r4, #3
 800a050:	4614      	mov	r4, r2
 800a052:	461d      	mov	r5, r3
 800a054:	4643      	mov	r3, r8
 800a056:	18e3      	adds	r3, r4, r3
 800a058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a05c:	464b      	mov	r3, r9
 800a05e:	eb45 0303 	adc.w	r3, r5, r3
 800a062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a076:	f04f 0200 	mov.w	r2, #0
 800a07a:	f04f 0300 	mov.w	r3, #0
 800a07e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a082:	4629      	mov	r1, r5
 800a084:	008b      	lsls	r3, r1, #2
 800a086:	4621      	mov	r1, r4
 800a088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a08c:	4621      	mov	r1, r4
 800a08e:	008a      	lsls	r2, r1, #2
 800a090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a094:	f7f6 fe00 	bl	8000c98 <__aeabi_uldivmod>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4b60      	ldr	r3, [pc, #384]	; (800a220 <UART_SetConfig+0x4e4>)
 800a09e:	fba3 2302 	umull	r2, r3, r3, r2
 800a0a2:	095b      	lsrs	r3, r3, #5
 800a0a4:	011c      	lsls	r4, r3, #4
 800a0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	1891      	adds	r1, r2, r2
 800a0be:	61b9      	str	r1, [r7, #24]
 800a0c0:	415b      	adcs	r3, r3
 800a0c2:	61fb      	str	r3, [r7, #28]
 800a0c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0c8:	4641      	mov	r1, r8
 800a0ca:	1851      	adds	r1, r2, r1
 800a0cc:	6139      	str	r1, [r7, #16]
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	414b      	adcs	r3, r1
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0e0:	4659      	mov	r1, fp
 800a0e2:	00cb      	lsls	r3, r1, #3
 800a0e4:	4651      	mov	r1, sl
 800a0e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ea:	4651      	mov	r1, sl
 800a0ec:	00ca      	lsls	r2, r1, #3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4642      	mov	r2, r8
 800a0f6:	189b      	adds	r3, r3, r2
 800a0f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	460a      	mov	r2, r1
 800a100:	eb42 0303 	adc.w	r3, r2, r3
 800a104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	67bb      	str	r3, [r7, #120]	; 0x78
 800a112:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a120:	4649      	mov	r1, r9
 800a122:	008b      	lsls	r3, r1, #2
 800a124:	4641      	mov	r1, r8
 800a126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a12a:	4641      	mov	r1, r8
 800a12c:	008a      	lsls	r2, r1, #2
 800a12e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a132:	f7f6 fdb1 	bl	8000c98 <__aeabi_uldivmod>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	4b38      	ldr	r3, [pc, #224]	; (800a220 <UART_SetConfig+0x4e4>)
 800a13e:	fba3 2301 	umull	r2, r3, r3, r1
 800a142:	095b      	lsrs	r3, r3, #5
 800a144:	2264      	movs	r2, #100	; 0x64
 800a146:	fb02 f303 	mul.w	r3, r2, r3
 800a14a:	1acb      	subs	r3, r1, r3
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	3332      	adds	r3, #50	; 0x32
 800a150:	4a33      	ldr	r2, [pc, #204]	; (800a220 <UART_SetConfig+0x4e4>)
 800a152:	fba2 2303 	umull	r2, r3, r2, r3
 800a156:	095b      	lsrs	r3, r3, #5
 800a158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a15c:	441c      	add	r4, r3
 800a15e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a162:	2200      	movs	r2, #0
 800a164:	673b      	str	r3, [r7, #112]	; 0x70
 800a166:	677a      	str	r2, [r7, #116]	; 0x74
 800a168:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a16c:	4642      	mov	r2, r8
 800a16e:	464b      	mov	r3, r9
 800a170:	1891      	adds	r1, r2, r2
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	415b      	adcs	r3, r3
 800a176:	60fb      	str	r3, [r7, #12]
 800a178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a17c:	4641      	mov	r1, r8
 800a17e:	1851      	adds	r1, r2, r1
 800a180:	6039      	str	r1, [r7, #0]
 800a182:	4649      	mov	r1, r9
 800a184:	414b      	adcs	r3, r1
 800a186:	607b      	str	r3, [r7, #4]
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a194:	4659      	mov	r1, fp
 800a196:	00cb      	lsls	r3, r1, #3
 800a198:	4651      	mov	r1, sl
 800a19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a19e:	4651      	mov	r1, sl
 800a1a0:	00ca      	lsls	r2, r1, #3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	189b      	adds	r3, r3, r2
 800a1ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1ae:	464b      	mov	r3, r9
 800a1b0:	460a      	mov	r2, r1
 800a1b2:	eb42 0303 	adc.w	r3, r2, r3
 800a1b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1c2:	667a      	str	r2, [r7, #100]	; 0x64
 800a1c4:	f04f 0200 	mov.w	r2, #0
 800a1c8:	f04f 0300 	mov.w	r3, #0
 800a1cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	008b      	lsls	r3, r1, #2
 800a1d4:	4641      	mov	r1, r8
 800a1d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1da:	4641      	mov	r1, r8
 800a1dc:	008a      	lsls	r2, r1, #2
 800a1de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a1e2:	f7f6 fd59 	bl	8000c98 <__aeabi_uldivmod>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <UART_SetConfig+0x4e4>)
 800a1ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a1f0:	095b      	lsrs	r3, r3, #5
 800a1f2:	2164      	movs	r1, #100	; 0x64
 800a1f4:	fb01 f303 	mul.w	r3, r1, r3
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	3332      	adds	r3, #50	; 0x32
 800a1fe:	4a08      	ldr	r2, [pc, #32]	; (800a220 <UART_SetConfig+0x4e4>)
 800a200:	fba2 2303 	umull	r2, r3, r2, r3
 800a204:	095b      	lsrs	r3, r3, #5
 800a206:	f003 020f 	and.w	r2, r3, #15
 800a20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4422      	add	r2, r4
 800a212:	609a      	str	r2, [r3, #8]
}
 800a214:	bf00      	nop
 800a216:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a21a:	46bd      	mov	sp, r7
 800a21c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a220:	51eb851f 	.word	0x51eb851f

0800a224 <__NVIC_SetPriority>:
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	6039      	str	r1, [r7, #0]
 800a22e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a234:	2b00      	cmp	r3, #0
 800a236:	db0a      	blt.n	800a24e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	490c      	ldr	r1, [pc, #48]	; (800a270 <__NVIC_SetPriority+0x4c>)
 800a23e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a242:	0112      	lsls	r2, r2, #4
 800a244:	b2d2      	uxtb	r2, r2
 800a246:	440b      	add	r3, r1
 800a248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a24c:	e00a      	b.n	800a264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	b2da      	uxtb	r2, r3
 800a252:	4908      	ldr	r1, [pc, #32]	; (800a274 <__NVIC_SetPriority+0x50>)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	f003 030f 	and.w	r3, r3, #15
 800a25a:	3b04      	subs	r3, #4
 800a25c:	0112      	lsls	r2, r2, #4
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	440b      	add	r3, r1
 800a262:	761a      	strb	r2, [r3, #24]
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	e000e100 	.word	0xe000e100
 800a274:	e000ed00 	.word	0xe000ed00

0800a278 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a278:	b580      	push	{r7, lr}
 800a27a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <SysTick_Handler+0x1c>)
 800a27e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a280:	f002 ff78 	bl	800d174 <xTaskGetSchedulerState>
 800a284:	4603      	mov	r3, r0
 800a286:	2b01      	cmp	r3, #1
 800a288:	d001      	beq.n	800a28e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a28a:	f004 f91d 	bl	800e4c8 <xPortSysTickHandler>
  }
}
 800a28e:	bf00      	nop
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	e000e010 	.word	0xe000e010

0800a298 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a29c:	2100      	movs	r1, #0
 800a29e:	f06f 0004 	mvn.w	r0, #4
 800a2a2:	f7ff ffbf 	bl	800a224 <__NVIC_SetPriority>
#endif
}
 800a2a6:	bf00      	nop
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2b2:	f3ef 8305 	mrs	r3, IPSR
 800a2b6:	603b      	str	r3, [r7, #0]
  return(result);
 800a2b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a2be:	f06f 0305 	mvn.w	r3, #5
 800a2c2:	607b      	str	r3, [r7, #4]
 800a2c4:	e00c      	b.n	800a2e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <osKernelInitialize+0x44>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d105      	bne.n	800a2da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <osKernelInitialize+0x44>)
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	607b      	str	r3, [r7, #4]
 800a2d8:	e002      	b.n	800a2e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295
 800a2de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2e0:	687b      	ldr	r3, [r7, #4]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	20000864 	.word	0x20000864

0800a2f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2fa:	f3ef 8305 	mrs	r3, IPSR
 800a2fe:	603b      	str	r3, [r7, #0]
  return(result);
 800a300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a306:	f06f 0305 	mvn.w	r3, #5
 800a30a:	607b      	str	r3, [r7, #4]
 800a30c:	e010      	b.n	800a330 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <osKernelStart+0x48>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d109      	bne.n	800a32a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a316:	f7ff ffbf 	bl	800a298 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a31a:	4b08      	ldr	r3, [pc, #32]	; (800a33c <osKernelStart+0x48>)
 800a31c:	2202      	movs	r2, #2
 800a31e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a320:	f002 faaa 	bl	800c878 <vTaskStartScheduler>
      stat = osOK;
 800a324:	2300      	movs	r3, #0
 800a326:	607b      	str	r3, [r7, #4]
 800a328:	e002      	b.n	800a330 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a32a:	f04f 33ff 	mov.w	r3, #4294967295
 800a32e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a330:	687b      	ldr	r3, [r7, #4]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000864 	.word	0x20000864

0800a340 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a346:	f3ef 8305 	mrs	r3, IPSR
 800a34a:	603b      	str	r3, [r7, #0]
  return(result);
 800a34c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a352:	f002 fbbd 	bl	800cad0 <xTaskGetTickCountFromISR>
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	e002      	b.n	800a360 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a35a:	f002 fba9 	bl	800cab0 <xTaskGetTickCount>
 800a35e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a360:	687b      	ldr	r3, [r7, #4]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800a36a:	b480      	push	{r7}
 800a36c:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a36e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a372:	4618      	mov	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08e      	sub	sp, #56	; 0x38
 800a380:	af04      	add	r7, sp, #16
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a38c:	f3ef 8305 	mrs	r3, IPSR
 800a390:	617b      	str	r3, [r7, #20]
  return(result);
 800a392:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a394:	2b00      	cmp	r3, #0
 800a396:	d17e      	bne.n	800a496 <osThreadNew+0x11a>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d07b      	beq.n	800a496 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a39e:	2380      	movs	r3, #128	; 0x80
 800a3a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a3a2:	2318      	movs	r3, #24
 800a3a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d045      	beq.n	800a442 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <osThreadNew+0x48>
        name = attr->name;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d008      	beq.n	800a3ea <osThreadNew+0x6e>
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2b38      	cmp	r3, #56	; 0x38
 800a3dc:	d805      	bhi.n	800a3ea <osThreadNew+0x6e>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <osThreadNew+0x72>
        return (NULL);
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e054      	b.n	800a498 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	089b      	lsrs	r3, r3, #2
 800a3fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00e      	beq.n	800a424 <osThreadNew+0xa8>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	2ba7      	cmp	r3, #167	; 0xa7
 800a40c:	d90a      	bls.n	800a424 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a412:	2b00      	cmp	r3, #0
 800a414:	d006      	beq.n	800a424 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <osThreadNew+0xa8>
        mem = 1;
 800a41e:	2301      	movs	r3, #1
 800a420:	61bb      	str	r3, [r7, #24]
 800a422:	e010      	b.n	800a446 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10c      	bne.n	800a446 <osThreadNew+0xca>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d108      	bne.n	800a446 <osThreadNew+0xca>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <osThreadNew+0xca>
          mem = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	61bb      	str	r3, [r7, #24]
 800a440:	e001      	b.n	800a446 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d110      	bne.n	800a46e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a454:	9202      	str	r2, [sp, #8]
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	6a3a      	ldr	r2, [r7, #32]
 800a460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f001 ffd2 	bl	800c40c <xTaskCreateStatic>
 800a468:	4603      	mov	r3, r0
 800a46a:	613b      	str	r3, [r7, #16]
 800a46c:	e013      	b.n	800a496 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d110      	bne.n	800a496 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	b29a      	uxth	r2, r3
 800a478:	f107 0310 	add.w	r3, r7, #16
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f002 f81d 	bl	800c4c6 <xTaskCreate>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d001      	beq.n	800a496 <osThreadNew+0x11a>
            hTask = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a496:	693b      	ldr	r3, [r7, #16]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3728      	adds	r7, #40	; 0x28
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4a6:	f3ef 8305 	mrs	r3, IPSR
 800a4aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a4ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <osThreadYield+0x1a>
    stat = osErrorISR;
 800a4b2:	f06f 0305 	mvn.w	r3, #5
 800a4b6:	607b      	str	r3, [r7, #4]
 800a4b8:	e009      	b.n	800a4ce <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a4be:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <osThreadYield+0x3c>)
 800a4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a4ce:	687b      	ldr	r3, [r7, #4]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <osThreadFlagsSet+0x1a>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	da03      	bge.n	800a502 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a4fa:	f06f 0303 	mvn.w	r3, #3
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	e035      	b.n	800a56e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a502:	f04f 33ff 	mov.w	r3, #4294967295
 800a506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a508:	f3ef 8305 	mrs	r3, IPSR
 800a50c:	613b      	str	r3, [r7, #16]
  return(result);
 800a50e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01f      	beq.n	800a554 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a518:	f107 0308 	add.w	r3, r7, #8
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	2300      	movs	r3, #0
 800a520:	2201      	movs	r2, #1
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6978      	ldr	r0, [r7, #20]
 800a526:	f003 f8cd 	bl	800d6c4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a52a:	f107 030c 	add.w	r3, r7, #12
 800a52e:	2200      	movs	r2, #0
 800a530:	9200      	str	r2, [sp, #0]
 800a532:	2200      	movs	r2, #0
 800a534:	2100      	movs	r1, #0
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	f003 f8c4 	bl	800d6c4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d015      	beq.n	800a56e <osThreadFlagsSet+0x8e>
 800a542:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <osThreadFlagsSet+0x98>)
 800a544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a548:	601a      	str	r2, [r3, #0]
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	e00c      	b.n	800a56e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a554:	2300      	movs	r3, #0
 800a556:	2201      	movs	r2, #1
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6978      	ldr	r0, [r7, #20]
 800a55c:	f002 fff4 	bl	800d548 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a560:	f107 030c 	add.w	r3, r7, #12
 800a564:	2200      	movs	r2, #0
 800a566:	2100      	movs	r1, #0
 800a568:	6978      	ldr	r0, [r7, #20]
 800a56a:	f002 ffed 	bl	800d548 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a56e:	68fb      	ldr	r3, [r7, #12]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a584:	f3ef 8305 	mrs	r3, IPSR
 800a588:	60fb      	str	r3, [r7, #12]
  return(result);
 800a58a:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800a590:	f06f 0305 	mvn.w	r3, #5
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	e02a      	b.n	800a5ee <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	da03      	bge.n	800a5a6 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a59e:	f06f 0303 	mvn.w	r3, #3
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	e023      	b.n	800a5ee <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800a5a6:	f002 fdd5 	bl	800d154 <xTaskGetCurrentTaskHandle>
 800a5aa:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800a5ac:	f107 0308 	add.w	r3, r7, #8
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	6938      	ldr	r0, [r7, #16]
 800a5b6:	f002 ffc7 	bl	800d548 <xTaskGenericNotify>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d113      	bne.n	800a5e8 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	43da      	mvns	r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	6938      	ldr	r0, [r7, #16]
 800a5d6:	f002 ffb7 	bl	800d548 <xTaskGenericNotify>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d006      	beq.n	800a5ee <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800a5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e002      	b.n	800a5ee <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800a5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ec:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800a5ee:	697b      	ldr	r3, [r7, #20]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08c      	sub	sp, #48	; 0x30
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a604:	f3ef 8305 	mrs	r3, IPSR
 800a608:	617b      	str	r3, [r7, #20]
  return(result);
 800a60a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a610:	f06f 0305 	mvn.w	r3, #5
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a616:	e06b      	b.n	800a6f0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da03      	bge.n	800a626 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a61e:	f06f 0303 	mvn.w	r3, #3
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a624:	e064      	b.n	800a6f0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
 800a634:	e001      	b.n	800a63a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800a642:	f002 fa35 	bl	800cab0 <xTaskGetTickCount>
 800a646:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a648:	f107 0210 	add.w	r2, r7, #16
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a650:	2000      	movs	r0, #0
 800a652:	f002 ff19 	bl	800d488 <xTaskNotifyWait>
 800a656:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d137      	bne.n	800a6ce <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4013      	ands	r3, r2
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66a:	4313      	orrs	r3, r2
 800a66c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00c      	beq.n	800a692 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	4013      	ands	r3, r2
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	429a      	cmp	r2, r3
 800a682:	d032      	beq.n	800a6ea <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10f      	bne.n	800a6aa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a68a:	f06f 0302 	mvn.w	r3, #2
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a690:	e02e      	b.n	800a6f0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	4013      	ands	r3, r2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d128      	bne.n	800a6ee <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d103      	bne.n	800a6aa <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a6a2:	f06f 0302 	mvn.w	r3, #2
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a6a8:	e022      	b.n	800a6f0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a6aa:	f002 fa01 	bl	800cab0 <xTaskGetTickCount>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d902      	bls.n	800a6c4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c2:	e00e      	b.n	800a6e2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a6cc:	e009      	b.n	800a6e2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a6d4:	f06f 0302 	mvn.w	r3, #2
 800a6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6da:	e002      	b.n	800a6e2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a6dc:	f06f 0301 	mvn.w	r3, #1
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1af      	bne.n	800a648 <osThreadFlagsWait+0x50>
 800a6e8:	e002      	b.n	800a6f0 <osThreadFlagsWait+0xf8>
            break;
 800a6ea:	bf00      	nop
 800a6ec:	e000      	b.n	800a6f0 <osThreadFlagsWait+0xf8>
            break;
 800a6ee:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3730      	adds	r7, #48	; 0x30
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a702:	f3ef 8305 	mrs	r3, IPSR
 800a706:	60fb      	str	r3, [r7, #12]
  return(result);
 800a708:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a70e:	f06f 0305 	mvn.w	r3, #5
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e019      	b.n	800a74a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a716:	2300      	movs	r3, #0
 800a718:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a71a:	f002 f9c9 	bl	800cab0 <xTaskGetTickCount>
 800a71e:	4603      	mov	r3, r0
 800a720:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <osDelayUntil+0x4a>
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	db06      	blt.n	800a744 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	6939      	ldr	r1, [r7, #16]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f002 f81d 	bl	800c77c <vTaskDelayUntil>
 800a742:	e002      	b.n	800a74a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a744:	f06f 0303 	mvn.w	r3, #3
 800a748:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a74a:	697b      	ldr	r3, [r7, #20]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3718      	adds	r7, #24
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f003 fcd1 	bl	800e104 <pvTimerGetTimerID>
 800a762:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	6852      	ldr	r2, [r2, #4]
 800a772:	4610      	mov	r0, r2
 800a774:	4798      	blx	r3
  }
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a780:	b580      	push	{r7, lr}
 800a782:	b08c      	sub	sp, #48	; 0x30
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	460b      	mov	r3, r1
 800a78e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a790:	2300      	movs	r3, #0
 800a792:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a794:	f3ef 8305 	mrs	r3, IPSR
 800a798:	613b      	str	r3, [r7, #16]
  return(result);
 800a79a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d163      	bne.n	800a868 <osTimerNew+0xe8>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d060      	beq.n	800a868 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a7a6:	2008      	movs	r0, #8
 800a7a8:	f003 ff1e 	bl	800e5e8 <pvPortMalloc>
 800a7ac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d059      	beq.n	800a868 <osTimerNew+0xe8>
      callb->func = func;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a7c0:	7afb      	ldrb	r3, [r7, #11]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <osTimerNew+0x4c>
        reload = pdFALSE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	61fb      	str	r3, [r7, #28]
 800a7ca:	e001      	b.n	800a7d0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01c      	beq.n	800a81a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <osTimerNew+0x6e>
          name = attr->name;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d006      	beq.n	800a804 <osTimerNew+0x84>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	2b2b      	cmp	r3, #43	; 0x2b
 800a7fc:	d902      	bls.n	800a804 <osTimerNew+0x84>
          mem = 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	e00c      	b.n	800a81e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d108      	bne.n	800a81e <osTimerNew+0x9e>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <osTimerNew+0x9e>
            mem = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	61bb      	str	r3, [r7, #24]
 800a818:	e001      	b.n	800a81e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d10c      	bne.n	800a83e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	4b12      	ldr	r3, [pc, #72]	; (800a874 <osTimerNew+0xf4>)
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	69fa      	ldr	r2, [r7, #28]
 800a832:	2101      	movs	r1, #1
 800a834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a836:	f003 f8e6 	bl	800da06 <xTimerCreateStatic>
 800a83a:	6238      	str	r0, [r7, #32]
 800a83c:	e00b      	b.n	800a856 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d108      	bne.n	800a856 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a844:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <osTimerNew+0xf4>)
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	2101      	movs	r1, #1
 800a84e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a850:	f003 f8b8 	bl	800d9c4 <xTimerCreate>
 800a854:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d105      	bne.n	800a868 <osTimerNew+0xe8>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <osTimerNew+0xe8>
        vPortFree (callb);
 800a862:	6978      	ldr	r0, [r7, #20]
 800a864:	f003 ff8c 	bl	800e780 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a868:	6a3b      	ldr	r3, [r7, #32]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3728      	adds	r7, #40	; 0x28
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	0800a755 	.word	0x0800a755

0800a878 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a886:	f3ef 8305 	mrs	r3, IPSR
 800a88a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a88c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <osTimerStart+0x22>
    stat = osErrorISR;
 800a892:	f06f 0305 	mvn.w	r3, #5
 800a896:	617b      	str	r3, [r7, #20]
 800a898:	e017      	b.n	800a8ca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d103      	bne.n	800a8a8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a8a0:	f06f 0303 	mvn.w	r3, #3
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	e010      	b.n	800a8ca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	2104      	movs	r1, #4
 800a8b2:	6938      	ldr	r0, [r7, #16]
 800a8b4:	f003 f920 	bl	800daf8 <xTimerGenericCommand>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d102      	bne.n	800a8c4 <osTimerStart+0x4c>
      stat = osOK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	e002      	b.n	800a8ca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a8c4:	f06f 0302 	mvn.w	r3, #2
 800a8c8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a8ca:	697b      	ldr	r3, [r7, #20]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8e0:	f3ef 8305 	mrs	r3, IPSR
 800a8e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d12d      	bne.n	800a948 <osEventFlagsNew+0x74>
    mem = -1;
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d015      	beq.n	800a924 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d006      	beq.n	800a90e <osEventFlagsNew+0x3a>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	2b1f      	cmp	r3, #31
 800a906:	d902      	bls.n	800a90e <osEventFlagsNew+0x3a>
        mem = 1;
 800a908:	2301      	movs	r3, #1
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	e00c      	b.n	800a928 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d108      	bne.n	800a928 <osEventFlagsNew+0x54>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <osEventFlagsNew+0x54>
          mem = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	613b      	str	r3, [r7, #16]
 800a922:	e001      	b.n	800a928 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d106      	bne.n	800a93c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 fba0 	bl	800b078 <xEventGroupCreateStatic>
 800a938:	6178      	str	r0, [r7, #20]
 800a93a:	e005      	b.n	800a948 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a942:	f000 fbd0 	bl	800b0e6 <xEventGroupCreate>
 800a946:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a948:	697b      	ldr	r3, [r7, #20]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a952:	b580      	push	{r7, lr}
 800a954:	b088      	sub	sp, #32
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a95e:	f3ef 8305 	mrs	r3, IPSR
 800a962:	60bb      	str	r3, [r7, #8]
  return(result);
 800a964:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a966:	2b00      	cmp	r3, #0
 800a968:	d174      	bne.n	800aa54 <osMutexNew+0x102>
    if (attr != NULL) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	61bb      	str	r3, [r7, #24]
 800a976:	e001      	b.n	800a97c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a978:	2300      	movs	r3, #0
 800a97a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <osMutexNew+0x3a>
      rmtx = 1U;
 800a986:	2301      	movs	r3, #1
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e001      	b.n	800a990 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	2b00      	cmp	r3, #0
 800a998:	d15c      	bne.n	800aa54 <osMutexNew+0x102>
      mem = -1;
 800a99a:	f04f 33ff 	mov.w	r3, #4294967295
 800a99e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d015      	beq.n	800a9d2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d006      	beq.n	800a9bc <osMutexNew+0x6a>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	2b4f      	cmp	r3, #79	; 0x4f
 800a9b4:	d902      	bls.n	800a9bc <osMutexNew+0x6a>
          mem = 1;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	e00c      	b.n	800a9d6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d108      	bne.n	800a9d6 <osMutexNew+0x84>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d104      	bne.n	800a9d6 <osMutexNew+0x84>
            mem = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	613b      	str	r3, [r7, #16]
 800a9d0:	e001      	b.n	800a9d6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d112      	bne.n	800aa02 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	2004      	movs	r0, #4
 800a9ea:	f000 fdba 	bl	800b562 <xQueueCreateMutexStatic>
 800a9ee:	61f8      	str	r0, [r7, #28]
 800a9f0:	e016      	b.n	800aa20 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	f000 fdb2 	bl	800b562 <xQueueCreateMutexStatic>
 800a9fe:	61f8      	str	r0, [r7, #28]
 800aa00:	e00e      	b.n	800aa20 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10b      	bne.n	800aa20 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800aa0e:	2004      	movs	r0, #4
 800aa10:	f000 fd8f 	bl	800b532 <xQueueCreateMutex>
 800aa14:	61f8      	str	r0, [r7, #28]
 800aa16:	e003      	b.n	800aa20 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800aa18:	2001      	movs	r0, #1
 800aa1a:	f000 fd8a 	bl	800b532 <xQueueCreateMutex>
 800aa1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00c      	beq.n	800aa40 <osMutexNew+0xee>
        if (attr != NULL) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <osMutexNew+0xe2>
          name = attr->name;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	e001      	b.n	800aa38 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800aa38:	68f9      	ldr	r1, [r7, #12]
 800aa3a:	69f8      	ldr	r0, [r7, #28]
 800aa3c:	f001 fc5e 	bl	800c2fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d006      	beq.n	800aa54 <osMutexNew+0x102>
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800aa54:	69fb      	ldr	r3, [r7, #28]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f023 0301 	bic.w	r3, r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa7c:	f3ef 8305 	mrs	r3, IPSR
 800aa80:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa82:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800aa88:	f06f 0305 	mvn.w	r3, #5
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e02c      	b.n	800aaea <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800aa96:	f06f 0303 	mvn.w	r3, #3
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	e025      	b.n	800aaea <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d011      	beq.n	800aac8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6938      	ldr	r0, [r7, #16]
 800aaa8:	f000 fdaa 	bl	800b600 <xQueueTakeMutexRecursive>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d01b      	beq.n	800aaea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800aab8:	f06f 0301 	mvn.w	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
 800aabe:	e014      	b.n	800aaea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800aac0:	f06f 0302 	mvn.w	r3, #2
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e010      	b.n	800aaea <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6938      	ldr	r0, [r7, #16]
 800aacc:	f001 f93e 	bl	800bd4c <xQueueSemaphoreTake>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d009      	beq.n	800aaea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800aadc:	f06f 0301 	mvn.w	r3, #1
 800aae0:	617b      	str	r3, [r7, #20]
 800aae2:	e002      	b.n	800aaea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800aae4:	f06f 0302 	mvn.w	r3, #2
 800aae8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800aaea:	697b      	ldr	r3, [r7, #20]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f023 0301 	bic.w	r3, r3, #1
 800ab02:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab10:	f3ef 8305 	mrs	r3, IPSR
 800ab14:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab16:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ab1c:	f06f 0305 	mvn.w	r3, #5
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	e01f      	b.n	800ab64 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d103      	bne.n	800ab32 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ab2a:	f06f 0303 	mvn.w	r3, #3
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	e018      	b.n	800ab64 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d009      	beq.n	800ab4c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ab38:	6938      	ldr	r0, [r7, #16]
 800ab3a:	f000 fd2d 	bl	800b598 <xQueueGiveMutexRecursive>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d00f      	beq.n	800ab64 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ab44:	f06f 0302 	mvn.w	r3, #2
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e00b      	b.n	800ab64 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	6938      	ldr	r0, [r7, #16]
 800ab54:	f000 fdf4 	bl	800b740 <xQueueGenericSend>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d002      	beq.n	800ab64 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ab5e:	f06f 0302 	mvn.w	r3, #2
 800ab62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ab64:	697b      	ldr	r3, [r7, #20]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b08a      	sub	sp, #40	; 0x28
 800ab72:	af02      	add	r7, sp, #8
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab7e:	f3ef 8305 	mrs	r3, IPSR
 800ab82:	613b      	str	r3, [r7, #16]
  return(result);
 800ab84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d175      	bne.n	800ac76 <osSemaphoreNew+0x108>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d072      	beq.n	800ac76 <osSemaphoreNew+0x108>
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d86e      	bhi.n	800ac76 <osSemaphoreNew+0x108>
    mem = -1;
 800ab98:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d015      	beq.n	800abd0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d006      	beq.n	800abba <osSemaphoreNew+0x4c>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	2b4f      	cmp	r3, #79	; 0x4f
 800abb2:	d902      	bls.n	800abba <osSemaphoreNew+0x4c>
        mem = 1;
 800abb4:	2301      	movs	r3, #1
 800abb6:	61bb      	str	r3, [r7, #24]
 800abb8:	e00c      	b.n	800abd4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d108      	bne.n	800abd4 <osSemaphoreNew+0x66>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d104      	bne.n	800abd4 <osSemaphoreNew+0x66>
          mem = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	61bb      	str	r3, [r7, #24]
 800abce:	e001      	b.n	800abd4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	d04c      	beq.n	800ac76 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d128      	bne.n	800ac34 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d10a      	bne.n	800abfe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	2203      	movs	r2, #3
 800abee:	9200      	str	r2, [sp, #0]
 800abf0:	2200      	movs	r2, #0
 800abf2:	2100      	movs	r1, #0
 800abf4:	2001      	movs	r0, #1
 800abf6:	f000 fbad 	bl	800b354 <xQueueGenericCreateStatic>
 800abfa:	61f8      	str	r0, [r7, #28]
 800abfc:	e005      	b.n	800ac0a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800abfe:	2203      	movs	r2, #3
 800ac00:	2100      	movs	r1, #0
 800ac02:	2001      	movs	r0, #1
 800ac04:	f000 fc1e 	bl	800b444 <xQueueGenericCreate>
 800ac08:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d022      	beq.n	800ac56 <osSemaphoreNew+0xe8>
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01f      	beq.n	800ac56 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ac16:	2300      	movs	r3, #0
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	69f8      	ldr	r0, [r7, #28]
 800ac1e:	f000 fd8f 	bl	800b740 <xQueueGenericSend>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d016      	beq.n	800ac56 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ac28:	69f8      	ldr	r0, [r7, #28]
 800ac2a:	f001 fa1b 	bl	800c064 <vQueueDelete>
            hSemaphore = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e010      	b.n	800ac56 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d108      	bne.n	800ac4c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fd12 	bl	800b66c <xQueueCreateCountingSemaphoreStatic>
 800ac48:	61f8      	str	r0, [r7, #28]
 800ac4a:	e004      	b.n	800ac56 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ac4c:	68b9      	ldr	r1, [r7, #8]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 fd43 	bl	800b6da <xQueueCreateCountingSemaphore>
 800ac54:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00c      	beq.n	800ac76 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <osSemaphoreNew+0xfc>
          name = attr->name;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	e001      	b.n	800ac6e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ac6e:	6979      	ldr	r1, [r7, #20]
 800ac70:	69f8      	ldr	r0, [r7, #28]
 800ac72:	f001 fb43 	bl	800c2fc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ac76:	69fb      	ldr	r3, [r7, #28]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3720      	adds	r7, #32
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d103      	bne.n	800aca0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ac98:	f06f 0303 	mvn.w	r3, #3
 800ac9c:	617b      	str	r3, [r7, #20]
 800ac9e:	e039      	b.n	800ad14 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca0:	f3ef 8305 	mrs	r3, IPSR
 800aca4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aca6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d022      	beq.n	800acf2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800acb2:	f06f 0303 	mvn.w	r3, #3
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	e02c      	b.n	800ad14 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800acba:	2300      	movs	r3, #0
 800acbc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800acbe:	f107 0308 	add.w	r3, r7, #8
 800acc2:	461a      	mov	r2, r3
 800acc4:	2100      	movs	r1, #0
 800acc6:	6938      	ldr	r0, [r7, #16]
 800acc8:	f001 f94c 	bl	800bf64 <xQueueReceiveFromISR>
 800accc:	4603      	mov	r3, r0
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d003      	beq.n	800acda <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800acd2:	f06f 0302 	mvn.w	r3, #2
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	e01c      	b.n	800ad14 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d019      	beq.n	800ad14 <osSemaphoreAcquire+0x94>
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <osSemaphoreAcquire+0xa0>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	e010      	b.n	800ad14 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6938      	ldr	r0, [r7, #16]
 800acf6:	f001 f829 	bl	800bd4c <xQueueSemaphoreTake>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d009      	beq.n	800ad14 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ad06:	f06f 0301 	mvn.w	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	e002      	b.n	800ad14 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ad0e:	f06f 0302 	mvn.w	r3, #2
 800ad12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ad14:	697b      	ldr	r3, [r7, #20]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ad3a:	f06f 0303 	mvn.w	r3, #3
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	e02c      	b.n	800ad9c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad42:	f3ef 8305 	mrs	r3, IPSR
 800ad46:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d01a      	beq.n	800ad84 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ad52:	f107 0308 	add.w	r3, r7, #8
 800ad56:	4619      	mov	r1, r3
 800ad58:	6938      	ldr	r0, [r7, #16]
 800ad5a:	f000 fe8a 	bl	800ba72 <xQueueGiveFromISR>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d003      	beq.n	800ad6c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ad64:	f06f 0302 	mvn.w	r3, #2
 800ad68:	617b      	str	r3, [r7, #20]
 800ad6a:	e017      	b.n	800ad9c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d014      	beq.n	800ad9c <osSemaphoreRelease+0x78>
 800ad72:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <osSemaphoreRelease+0x84>)
 800ad74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	e00b      	b.n	800ad9c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ad84:	2300      	movs	r3, #0
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6938      	ldr	r0, [r7, #16]
 800ad8c:	f000 fcd8 	bl	800b740 <xQueueGenericSend>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d002      	beq.n	800ad9c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ad96:	f06f 0302 	mvn.w	r3, #2
 800ad9a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ad9c:	697b      	ldr	r3, [r7, #20]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	; 0x28
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800adb8:	2300      	movs	r3, #0
 800adba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adbc:	f3ef 8305 	mrs	r3, IPSR
 800adc0:	613b      	str	r3, [r7, #16]
  return(result);
 800adc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d15f      	bne.n	800ae88 <osMessageQueueNew+0xdc>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d05c      	beq.n	800ae88 <osMessageQueueNew+0xdc>
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d059      	beq.n	800ae88 <osMessageQueueNew+0xdc>
    mem = -1;
 800add4:	f04f 33ff 	mov.w	r3, #4294967295
 800add8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d029      	beq.n	800ae34 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d012      	beq.n	800ae0e <osMessageQueueNew+0x62>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b4f      	cmp	r3, #79	; 0x4f
 800adee:	d90e      	bls.n	800ae0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00a      	beq.n	800ae0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	695a      	ldr	r2, [r3, #20]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	fb01 f303 	mul.w	r3, r1, r3
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d302      	bcc.n	800ae0e <osMessageQueueNew+0x62>
        mem = 1;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e014      	b.n	800ae38 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d110      	bne.n	800ae38 <osMessageQueueNew+0x8c>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10c      	bne.n	800ae38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d108      	bne.n	800ae38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d104      	bne.n	800ae38 <osMessageQueueNew+0x8c>
          mem = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61bb      	str	r3, [r7, #24]
 800ae32:	e001      	b.n	800ae38 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d10b      	bne.n	800ae56 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691a      	ldr	r2, [r3, #16]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2100      	movs	r1, #0
 800ae48:	9100      	str	r1, [sp, #0]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 fa81 	bl	800b354 <xQueueGenericCreateStatic>
 800ae52:	61f8      	str	r0, [r7, #28]
 800ae54:	e008      	b.n	800ae68 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d105      	bne.n	800ae68 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f000 faef 	bl	800b444 <xQueueGenericCreate>
 800ae66:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00c      	beq.n	800ae88 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <osMessageQueueNew+0xd0>
        name = attr->name;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	617b      	str	r3, [r7, #20]
 800ae7a:	e001      	b.n	800ae80 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ae80:	6979      	ldr	r1, [r7, #20]
 800ae82:	69f8      	ldr	r0, [r7, #28]
 800ae84:	f001 fa3a 	bl	800c2fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ae88:	69fb      	ldr	r3, [r7, #28]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	4613      	mov	r3, r2
 800aea2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeac:	f3ef 8305 	mrs	r3, IPSR
 800aeb0:	617b      	str	r3, [r7, #20]
  return(result);
 800aeb2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d028      	beq.n	800af0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <osMessageQueuePut+0x36>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <osMessageQueuePut+0x36>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800aeca:	f06f 0303 	mvn.w	r3, #3
 800aece:	61fb      	str	r3, [r7, #28]
 800aed0:	e038      	b.n	800af44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800aed2:	2300      	movs	r3, #0
 800aed4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800aed6:	f107 0210 	add.w	r2, r7, #16
 800aeda:	2300      	movs	r3, #0
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	69b8      	ldr	r0, [r7, #24]
 800aee0:	f000 fd2c 	bl	800b93c <xQueueGenericSendFromISR>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d003      	beq.n	800aef2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800aeea:	f06f 0302 	mvn.w	r3, #2
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	e028      	b.n	800af44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d025      	beq.n	800af44 <osMessageQueuePut+0xb0>
 800aef8:	4b15      	ldr	r3, [pc, #84]	; (800af50 <osMessageQueuePut+0xbc>)
 800aefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	e01c      	b.n	800af44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <osMessageQueuePut+0x82>
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d103      	bne.n	800af1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800af16:	f06f 0303 	mvn.w	r3, #3
 800af1a:	61fb      	str	r3, [r7, #28]
 800af1c:	e012      	b.n	800af44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800af1e:	2300      	movs	r3, #0
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	69b8      	ldr	r0, [r7, #24]
 800af26:	f000 fc0b 	bl	800b740 <xQueueGenericSend>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d009      	beq.n	800af44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800af36:	f06f 0301 	mvn.w	r3, #1
 800af3a:	61fb      	str	r3, [r7, #28]
 800af3c:	e002      	b.n	800af44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800af3e:	f06f 0302 	mvn.w	r3, #2
 800af42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800af44:	69fb      	ldr	r3, [r7, #28]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3720      	adds	r7, #32
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800af66:	2300      	movs	r3, #0
 800af68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af6a:	f3ef 8305 	mrs	r3, IPSR
 800af6e:	617b      	str	r3, [r7, #20]
  return(result);
 800af70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800af72:	2b00      	cmp	r3, #0
 800af74:	d028      	beq.n	800afc8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <osMessageQueueGet+0x34>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <osMessageQueueGet+0x34>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800af88:	f06f 0303 	mvn.w	r3, #3
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	e037      	b.n	800b000 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800af94:	f107 0310 	add.w	r3, r7, #16
 800af98:	461a      	mov	r2, r3
 800af9a:	68b9      	ldr	r1, [r7, #8]
 800af9c:	69b8      	ldr	r0, [r7, #24]
 800af9e:	f000 ffe1 	bl	800bf64 <xQueueReceiveFromISR>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d003      	beq.n	800afb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800afa8:	f06f 0302 	mvn.w	r3, #2
 800afac:	61fb      	str	r3, [r7, #28]
 800afae:	e027      	b.n	800b000 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d024      	beq.n	800b000 <osMessageQueueGet+0xac>
 800afb6:	4b15      	ldr	r3, [pc, #84]	; (800b00c <osMessageQueueGet+0xb8>)
 800afb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	e01b      	b.n	800b000 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <osMessageQueueGet+0x80>
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800afd4:	f06f 0303 	mvn.w	r3, #3
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	e011      	b.n	800b000 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	69b8      	ldr	r0, [r7, #24]
 800afe2:	f000 fdd3 	bl	800bb8c <xQueueReceive>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d009      	beq.n	800b000 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aff2:	f06f 0301 	mvn.w	r3, #1
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	e002      	b.n	800b000 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800affa:	f06f 0302 	mvn.w	r3, #2
 800affe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b000:	69fb      	ldr	r3, [r7, #28]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	e000ed04 	.word	0xe000ed04

0800b010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4a07      	ldr	r2, [pc, #28]	; (800b03c <vApplicationGetIdleTaskMemory+0x2c>)
 800b020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	4a06      	ldr	r2, [pc, #24]	; (800b040 <vApplicationGetIdleTaskMemory+0x30>)
 800b026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2280      	movs	r2, #128	; 0x80
 800b02c:	601a      	str	r2, [r3, #0]
}
 800b02e:	bf00      	nop
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	20000868 	.word	0x20000868
 800b040:	20000910 	.word	0x20000910

0800b044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4a07      	ldr	r2, [pc, #28]	; (800b070 <vApplicationGetTimerTaskMemory+0x2c>)
 800b054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	4a06      	ldr	r2, [pc, #24]	; (800b074 <vApplicationGetTimerTaskMemory+0x30>)
 800b05a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b062:	601a      	str	r2, [r3, #0]
}
 800b064:	bf00      	nop
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	20000b10 	.word	0x20000b10
 800b074:	20000bb8 	.word	0x20000bb8

0800b078 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10a      	bne.n	800b09c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b09c:	2320      	movs	r3, #32
 800b09e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d00a      	beq.n	800b0bc <xEventGroupCreateStatic+0x44>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	60fb      	str	r3, [r7, #12]
}
 800b0b8:	bf00      	nop
 800b0ba:	e7fe      	b.n	800b0ba <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f822 	bl	800b11a <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b0dc:	697b      	ldr	r3, [r7, #20]
	}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b0ec:	2020      	movs	r0, #32
 800b0ee:	f003 fa7b 	bl	800e5e8 <pvPortMalloc>
 800b0f2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	4618      	mov	r0, r3
 800b106:	f000 f808 	bl	800b11a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b110:	687b      	ldr	r3, [r7, #4]
	}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f103 0208 	add.w	r2, r3, #8
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f04f 32ff 	mov.w	r2, #4294967295
 800b132:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f103 0208 	add.w	r2, r3, #8
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f103 0208 	add.w	r2, r3, #8
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	689a      	ldr	r2, [r3, #8]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
}
 800b1b0:	bf00      	nop
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d2:	d103      	bne.n	800b1dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	e00c      	b.n	800b1f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3308      	adds	r3, #8
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	e002      	b.n	800b1ea <vListInsert+0x2e>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d2f6      	bcs.n	800b1e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	601a      	str	r2, [r3, #0]
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6892      	ldr	r2, [r2, #8]
 800b244:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	6852      	ldr	r2, [r2, #4]
 800b24e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	429a      	cmp	r2, r3
 800b258:	d103      	bne.n	800b262 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	1e5a      	subs	r2, r3, #1
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
	...

0800b284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10a      	bne.n	800b2ae <xQueueGenericReset+0x2a>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	60bb      	str	r3, [r7, #8]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2ae:	f003 f879 	bl	800e3a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ba:	68f9      	ldr	r1, [r7, #12]
 800b2bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2be:	fb01 f303 	mul.w	r3, r1, r3
 800b2c2:	441a      	add	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	68f9      	ldr	r1, [r7, #12]
 800b2e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2e4:	fb01 f303 	mul.w	r3, r1, r3
 800b2e8:	441a      	add	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	22ff      	movs	r2, #255	; 0xff
 800b2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	22ff      	movs	r2, #255	; 0xff
 800b2fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d114      	bne.n	800b32e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01a      	beq.n	800b342 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3310      	adds	r3, #16
 800b310:	4618      	mov	r0, r3
 800b312:	f001 fd5d 	bl	800cdd0 <xTaskRemoveFromEventList>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d012      	beq.n	800b342 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b31c:	4b0c      	ldr	r3, [pc, #48]	; (800b350 <xQueueGenericReset+0xcc>)
 800b31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	e009      	b.n	800b342 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3310      	adds	r3, #16
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff fef1 	bl	800b11a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3324      	adds	r3, #36	; 0x24
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff feec 	bl	800b11a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b342:	f003 f85f 	bl	800e404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b346:	2301      	movs	r3, #1
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	e000ed04 	.word	0xe000ed04

0800b354 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08e      	sub	sp, #56	; 0x38
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10a      	bne.n	800b37e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b37a:	bf00      	nop
 800b37c:	e7fe      	b.n	800b37c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <xQueueGenericCreateStatic+0x52>
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <xQueueGenericCreateStatic+0x56>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <xQueueGenericCreateStatic+0x58>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	623b      	str	r3, [r7, #32]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <xQueueGenericCreateStatic+0x7e>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <xQueueGenericCreateStatic+0x82>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <xQueueGenericCreateStatic+0x84>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10a      	bne.n	800b3f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	61fb      	str	r3, [r7, #28]
}
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b3f2:	2350      	movs	r3, #80	; 0x50
 800b3f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	2b50      	cmp	r3, #80	; 0x50
 800b3fa:	d00a      	beq.n	800b412 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	61bb      	str	r3, [r7, #24]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b412:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00d      	beq.n	800b43a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b426:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	4613      	mov	r3, r2
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	68b9      	ldr	r1, [r7, #8]
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f000 f83f 	bl	800b4b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3730      	adds	r7, #48	; 0x30
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	; 0x28
 800b448:	af02      	add	r7, sp, #8
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	613b      	str	r3, [r7, #16]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	fb02 f303 	mul.w	r3, r2, r3
 800b476:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	3350      	adds	r3, #80	; 0x50
 800b47c:	4618      	mov	r0, r3
 800b47e:	f003 f8b3 	bl	800e5e8 <pvPortMalloc>
 800b482:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d011      	beq.n	800b4ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	3350      	adds	r3, #80	; 0x50
 800b492:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b49c:	79fa      	ldrb	r2, [r7, #7]
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f805 	bl	800b4b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3720      	adds	r7, #32
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	e002      	b.n	800b4da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	69b8      	ldr	r0, [r7, #24]
 800b4ea:	f7ff fecb 	bl	800b284 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	78fa      	ldrb	r2, [r7, #3]
 800b4f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b4f6:	bf00      	nop
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00e      	beq.n	800b52a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 f90b 	bl	800b740 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b532:	b580      	push	{r7, lr}
 800b534:	b086      	sub	sp, #24
 800b536:	af00      	add	r7, sp, #0
 800b538:	4603      	mov	r3, r0
 800b53a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b53c:	2301      	movs	r3, #1
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	461a      	mov	r2, r3
 800b548:	6939      	ldr	r1, [r7, #16]
 800b54a:	6978      	ldr	r0, [r7, #20]
 800b54c:	f7ff ff7a 	bl	800b444 <xQueueGenericCreate>
 800b550:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7ff ffd3 	bl	800b4fe <prvInitialiseMutex>

		return xNewQueue;
 800b558:	68fb      	ldr	r3, [r7, #12]
	}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b562:	b580      	push	{r7, lr}
 800b564:	b088      	sub	sp, #32
 800b566:	af02      	add	r7, sp, #8
 800b568:	4603      	mov	r3, r0
 800b56a:	6039      	str	r1, [r7, #0]
 800b56c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b56e:	2301      	movs	r3, #1
 800b570:	617b      	str	r3, [r7, #20]
 800b572:	2300      	movs	r3, #0
 800b574:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2200      	movs	r2, #0
 800b57e:	6939      	ldr	r1, [r7, #16]
 800b580:	6978      	ldr	r0, [r7, #20]
 800b582:	f7ff fee7 	bl	800b354 <xQueueGenericCreateStatic>
 800b586:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff ffb8 	bl	800b4fe <prvInitialiseMutex>

		return xNewQueue;
 800b58e:	68fb      	ldr	r3, [r7, #12]
	}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b598:	b590      	push	{r4, r7, lr}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60fb      	str	r3, [r7, #12]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	689c      	ldr	r4, [r3, #8]
 800b5c4:	f001 fdc6 	bl	800d154 <xTaskGetCurrentTaskHandle>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d111      	bne.n	800b5f2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	1e5a      	subs	r2, r3, #1
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d105      	bne.n	800b5ec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	6938      	ldr	r0, [r7, #16]
 800b5e8:	f000 f8aa 	bl	800b740 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	e001      	b.n	800b5f6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b5f6:	697b      	ldr	r3, [r7, #20]
	}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}

0800b600 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b600:	b590      	push	{r4, r7, lr}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10a      	bne.n	800b62a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	60fb      	str	r3, [r7, #12]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	689c      	ldr	r4, [r3, #8]
 800b62e:	f001 fd91 	bl	800d154 <xTaskGetCurrentTaskHandle>
 800b632:	4603      	mov	r3, r0
 800b634:	429c      	cmp	r4, r3
 800b636:	d107      	bne.n	800b648 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b642:	2301      	movs	r3, #1
 800b644:	617b      	str	r3, [r7, #20]
 800b646:	e00c      	b.n	800b662 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6938      	ldr	r0, [r7, #16]
 800b64c:	f000 fb7e 	bl	800bd4c <xQueueSemaphoreTake>
 800b650:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b662:	697b      	ldr	r3, [r7, #20]
	}
 800b664:	4618      	mov	r0, r3
 800b666:	371c      	adds	r7, #28
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd90      	pop	{r4, r7, pc}

0800b66c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af02      	add	r7, sp, #8
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	61bb      	str	r3, [r7, #24]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d90a      	bls.n	800b6b2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	617b      	str	r3, [r7, #20]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff fe49 	bl	800b354 <xQueueGenericCreateStatic>
 800b6c2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b6d0:	69fb      	ldr	r3, [r7, #28]
	}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b086      	sub	sp, #24
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	613b      	str	r3, [r7, #16]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	d90a      	bls.n	800b71e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	60fb      	str	r3, [r7, #12]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b71e:	2202      	movs	r2, #2
 800b720:	2100      	movs	r1, #0
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fe8e 	bl	800b444 <xQueueGenericCreate>
 800b728:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b736:	697b      	ldr	r3, [r7, #20]
	}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08e      	sub	sp, #56	; 0x38
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b74e:	2300      	movs	r3, #0
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10a      	bne.n	800b772 <xQueueGenericSend+0x32>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <xQueueGenericSend+0x40>
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <xQueueGenericSend+0x44>
 800b780:	2301      	movs	r3, #1
 800b782:	e000      	b.n	800b786 <xQueueGenericSend+0x46>
 800b784:	2300      	movs	r3, #0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <xQueueGenericSend+0x60>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d103      	bne.n	800b7ae <xQueueGenericSend+0x6e>
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <xQueueGenericSend+0x72>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <xQueueGenericSend+0x74>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <xQueueGenericSend+0x8e>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	623b      	str	r3, [r7, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ce:	f001 fcd1 	bl	800d174 <xTaskGetSchedulerState>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d102      	bne.n	800b7de <xQueueGenericSend+0x9e>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <xQueueGenericSend+0xa2>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e000      	b.n	800b7e4 <xQueueGenericSend+0xa4>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <xQueueGenericSend+0xbe>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	61fb      	str	r3, [r7, #28]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fe:	f002 fdd1 	bl	800e3a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d302      	bcc.n	800b814 <xQueueGenericSend+0xd4>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b02      	cmp	r3, #2
 800b812:	d129      	bne.n	800b868 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	68b9      	ldr	r1, [r7, #8]
 800b818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b81a:	f000 fc5e 	bl	800c0da <prvCopyDataToQueue>
 800b81e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b824:	2b00      	cmp	r3, #0
 800b826:	d010      	beq.n	800b84a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	3324      	adds	r3, #36	; 0x24
 800b82c:	4618      	mov	r0, r3
 800b82e:	f001 facf 	bl	800cdd0 <xTaskRemoveFromEventList>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d013      	beq.n	800b860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b838:	4b3f      	ldr	r3, [pc, #252]	; (800b938 <xQueueGenericSend+0x1f8>)
 800b83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	e00a      	b.n	800b860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d007      	beq.n	800b860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b850:	4b39      	ldr	r3, [pc, #228]	; (800b938 <xQueueGenericSend+0x1f8>)
 800b852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b860:	f002 fdd0 	bl	800e404 <vPortExitCritical>
				return pdPASS;
 800b864:	2301      	movs	r3, #1
 800b866:	e063      	b.n	800b930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d103      	bne.n	800b876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86e:	f002 fdc9 	bl	800e404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b872:	2300      	movs	r3, #0
 800b874:	e05c      	b.n	800b930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d106      	bne.n	800b88a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b87c:	f107 0314 	add.w	r3, r7, #20
 800b880:	4618      	mov	r0, r3
 800b882:	f001 fb09 	bl	800ce98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b886:	2301      	movs	r3, #1
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b88a:	f002 fdbb 	bl	800e404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88e:	f001 f863 	bl	800c958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b892:	f002 fd87 	bl	800e3a4 <vPortEnterCritical>
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b89c:	b25b      	sxtb	r3, r3
 800b89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a2:	d103      	bne.n	800b8ac <xQueueGenericSend+0x16c>
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b2:	b25b      	sxtb	r3, r3
 800b8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b8:	d103      	bne.n	800b8c2 <xQueueGenericSend+0x182>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c2:	f002 fd9f 	bl	800e404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c6:	1d3a      	adds	r2, r7, #4
 800b8c8:	f107 0314 	add.w	r3, r7, #20
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f001 faf8 	bl	800cec4 <xTaskCheckForTimeOut>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d124      	bne.n	800b924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8dc:	f000 fcf5 	bl	800c2ca <prvIsQueueFull>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d018      	beq.n	800b918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	3310      	adds	r3, #16
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 fa1e 	bl	800cd30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f6:	f000 fc80 	bl	800c1fa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8fa:	f001 f83b 	bl	800c974 <xTaskResumeAll>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	f47f af7c 	bne.w	800b7fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b906:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <xQueueGenericSend+0x1f8>)
 800b908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	e772      	b.n	800b7fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91a:	f000 fc6e 	bl	800c1fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b91e:	f001 f829 	bl	800c974 <xTaskResumeAll>
 800b922:	e76c      	b.n	800b7fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b926:	f000 fc68 	bl	800c1fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b92a:	f001 f823 	bl	800c974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b92e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b930:	4618      	mov	r0, r3
 800b932:	3738      	adds	r7, #56	; 0x38
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b090      	sub	sp, #64	; 0x40
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10a      	bne.n	800b96a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d103      	bne.n	800b978 <xQueueGenericSendFromISR+0x3c>
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <xQueueGenericSendFromISR+0x40>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <xQueueGenericSendFromISR+0x42>
 800b97c:	2300      	movs	r3, #0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d103      	bne.n	800b9a6 <xQueueGenericSendFromISR+0x6a>
 800b99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <xQueueGenericSendFromISR+0x6e>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <xQueueGenericSendFromISR+0x70>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	623b      	str	r3, [r7, #32]
}
 800b9c2:	bf00      	nop
 800b9c4:	e7fe      	b.n	800b9c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9c6:	f002 fdcf 	bl	800e568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	61fa      	str	r2, [r7, #28]
 800b9e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d302      	bcc.n	800b9f8 <xQueueGenericSendFromISR+0xbc>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d12f      	bne.n	800ba58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba0e:	f000 fb64 	bl	800c0da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d112      	bne.n	800ba42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d016      	beq.n	800ba52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba26:	3324      	adds	r3, #36	; 0x24
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 f9d1 	bl	800cdd0 <xTaskRemoveFromEventList>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00e      	beq.n	800ba52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00b      	beq.n	800ba52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	e007      	b.n	800ba52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba46:	3301      	adds	r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	b25a      	sxtb	r2, r3
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba52:	2301      	movs	r3, #1
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba56:	e001      	b.n	800ba5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3740      	adds	r7, #64	; 0x40
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b08e      	sub	sp, #56	; 0x38
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	623b      	str	r3, [r7, #32]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00a      	beq.n	800baba <xQueueGiveFromISR+0x48>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	61fb      	str	r3, [r7, #28]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d103      	bne.n	800baca <xQueueGiveFromISR+0x58>
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <xQueueGiveFromISR+0x5c>
 800baca:	2301      	movs	r3, #1
 800bacc:	e000      	b.n	800bad0 <xQueueGiveFromISR+0x5e>
 800bace:	2300      	movs	r3, #0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10a      	bne.n	800baea <xQueueGiveFromISR+0x78>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	61bb      	str	r3, [r7, #24]
}
 800bae6:	bf00      	nop
 800bae8:	e7fe      	b.n	800bae8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800baea:	f002 fd3d 	bl	800e568 <vPortValidateInterruptPriority>
	__asm volatile
 800baee:	f3ef 8211 	mrs	r2, BASEPRI
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	617a      	str	r2, [r7, #20]
 800bb04:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb06:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d22b      	bcs.n	800bb72 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb34:	d112      	bne.n	800bb5c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d016      	beq.n	800bb6c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	3324      	adds	r3, #36	; 0x24
 800bb42:	4618      	mov	r0, r3
 800bb44:	f001 f944 	bl	800cdd0 <xTaskRemoveFromEventList>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00e      	beq.n	800bb6c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00b      	beq.n	800bb6c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	2201      	movs	r2, #1
 800bb58:	601a      	str	r2, [r3, #0]
 800bb5a:	e007      	b.n	800bb6c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb60:	3301      	adds	r3, #1
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	b25a      	sxtb	r2, r3
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb70:	e001      	b.n	800bb76 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	637b      	str	r3, [r7, #52]	; 0x34
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f383 8811 	msr	BASEPRI, r3
}
 800bb80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3738      	adds	r7, #56	; 0x38
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08c      	sub	sp, #48	; 0x30
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <xQueueReceive+0x30>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	623b      	str	r3, [r7, #32]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d103      	bne.n	800bbca <xQueueReceive+0x3e>
 800bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <xQueueReceive+0x42>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <xQueueReceive+0x44>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10a      	bne.n	800bbea <xQueueReceive+0x5e>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	61fb      	str	r3, [r7, #28]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbea:	f001 fac3 	bl	800d174 <xTaskGetSchedulerState>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d102      	bne.n	800bbfa <xQueueReceive+0x6e>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <xQueueReceive+0x72>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <xQueueReceive+0x74>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <xQueueReceive+0x8e>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	61bb      	str	r3, [r7, #24]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc1a:	f002 fbc3 	bl	800e3a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d01f      	beq.n	800bc6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc2e:	f000 fabe 	bl	800c1ae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	1e5a      	subs	r2, r3, #1
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00f      	beq.n	800bc62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	3310      	adds	r3, #16
 800bc46:	4618      	mov	r0, r3
 800bc48:	f001 f8c2 	bl	800cdd0 <xTaskRemoveFromEventList>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d007      	beq.n	800bc62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc52:	4b3d      	ldr	r3, [pc, #244]	; (800bd48 <xQueueReceive+0x1bc>)
 800bc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc62:	f002 fbcf 	bl	800e404 <vPortExitCritical>
				return pdPASS;
 800bc66:	2301      	movs	r3, #1
 800bc68:	e069      	b.n	800bd3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d103      	bne.n	800bc78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc70:	f002 fbc8 	bl	800e404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc74:	2300      	movs	r3, #0
 800bc76:	e062      	b.n	800bd3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc7e:	f107 0310 	add.w	r3, r7, #16
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 f908 	bl	800ce98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc8c:	f002 fbba 	bl	800e404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc90:	f000 fe62 	bl	800c958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc94:	f002 fb86 	bl	800e3a4 <vPortEnterCritical>
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d103      	bne.n	800bcae <xQueueReceive+0x122>
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d103      	bne.n	800bcc4 <xQueueReceive+0x138>
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcc4:	f002 fb9e 	bl	800e404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcc8:	1d3a      	adds	r2, r7, #4
 800bcca:	f107 0310 	add.w	r3, r7, #16
 800bcce:	4611      	mov	r1, r2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f001 f8f7 	bl	800cec4 <xTaskCheckForTimeOut>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d123      	bne.n	800bd24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcde:	f000 fade 	bl	800c29e <prvIsQueueEmpty>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d017      	beq.n	800bd18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	3324      	adds	r3, #36	; 0x24
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	4611      	mov	r1, r2
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 f81d 	bl	800cd30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf8:	f000 fa7f 	bl	800c1fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcfc:	f000 fe3a 	bl	800c974 <xTaskResumeAll>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d189      	bne.n	800bc1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd06:	4b10      	ldr	r3, [pc, #64]	; (800bd48 <xQueueReceive+0x1bc>)
 800bd08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	e780      	b.n	800bc1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd1a:	f000 fa6e 	bl	800c1fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd1e:	f000 fe29 	bl	800c974 <xTaskResumeAll>
 800bd22:	e77a      	b.n	800bc1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd26:	f000 fa68 	bl	800c1fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd2a:	f000 fe23 	bl	800c974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd30:	f000 fab5 	bl	800c29e <prvIsQueueEmpty>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f43f af6f 	beq.w	800bc1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3730      	adds	r7, #48	; 0x30
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08e      	sub	sp, #56	; 0x38
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd56:	2300      	movs	r3, #0
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	623b      	str	r3, [r7, #32]
}
 800bd7a:	bf00      	nop
 800bd7c:	e7fe      	b.n	800bd7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	61fb      	str	r3, [r7, #28]
}
 800bd98:	bf00      	nop
 800bd9a:	e7fe      	b.n	800bd9a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd9c:	f001 f9ea 	bl	800d174 <xTaskGetSchedulerState>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <xQueueSemaphoreTake+0x60>
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <xQueueSemaphoreTake+0x64>
 800bdac:	2301      	movs	r3, #1
 800bdae:	e000      	b.n	800bdb2 <xQueueSemaphoreTake+0x66>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10a      	bne.n	800bdcc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	61bb      	str	r3, [r7, #24]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdcc:	f002 faea 	bl	800e3a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d024      	beq.n	800be26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	1e5a      	subs	r2, r3, #1
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d104      	bne.n	800bdf6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bdec:	f001 fb38 	bl	800d460 <pvTaskIncrementMutexHeldCount>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00f      	beq.n	800be1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	3310      	adds	r3, #16
 800be02:	4618      	mov	r0, r3
 800be04:	f000 ffe4 	bl	800cdd0 <xTaskRemoveFromEventList>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be0e:	4b54      	ldr	r3, [pc, #336]	; (800bf60 <xQueueSemaphoreTake+0x214>)
 800be10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be1e:	f002 faf1 	bl	800e404 <vPortExitCritical>
				return pdPASS;
 800be22:	2301      	movs	r3, #1
 800be24:	e097      	b.n	800bf56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d111      	bne.n	800be50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00a      	beq.n	800be48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800be32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	617b      	str	r3, [r7, #20]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be48:	f002 fadc 	bl	800e404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be4c:	2300      	movs	r3, #0
 800be4e:	e082      	b.n	800bf56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be56:	f107 030c 	add.w	r3, r7, #12
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 f81c 	bl	800ce98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be64:	f002 face 	bl	800e404 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be68:	f000 fd76 	bl	800c958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be6c:	f002 fa9a 	bl	800e3a4 <vPortEnterCritical>
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be76:	b25b      	sxtb	r3, r3
 800be78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7c:	d103      	bne.n	800be86 <xQueueSemaphoreTake+0x13a>
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be92:	d103      	bne.n	800be9c <xQueueSemaphoreTake+0x150>
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be9c:	f002 fab2 	bl	800e404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bea0:	463a      	mov	r2, r7
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f001 f80b 	bl	800cec4 <xTaskCheckForTimeOut>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d132      	bne.n	800bf1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb6:	f000 f9f2 	bl	800c29e <prvIsQueueEmpty>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d026      	beq.n	800bf0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d109      	bne.n	800bedc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bec8:	f002 fa6c 	bl	800e3a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f001 f96d 	bl	800d1b0 <xTaskPriorityInherit>
 800bed6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bed8:	f002 fa94 	bl	800e404 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	3324      	adds	r3, #36	; 0x24
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 ff23 	bl	800cd30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beec:	f000 f985 	bl	800c1fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bef0:	f000 fd40 	bl	800c974 <xTaskResumeAll>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f47f af68 	bne.w	800bdcc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800befc:	4b18      	ldr	r3, [pc, #96]	; (800bf60 <xQueueSemaphoreTake+0x214>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	e75e      	b.n	800bdcc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf10:	f000 f973 	bl	800c1fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf14:	f000 fd2e 	bl	800c974 <xTaskResumeAll>
 800bf18:	e758      	b.n	800bdcc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf1c:	f000 f96d 	bl	800c1fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf20:	f000 fd28 	bl	800c974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf26:	f000 f9ba 	bl	800c29e <prvIsQueueEmpty>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f43f af4d 	beq.w	800bdcc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00d      	beq.n	800bf54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bf38:	f002 fa34 	bl	800e3a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf3e:	f000 f8b4 	bl	800c0aa <prvGetDisinheritPriorityAfterTimeout>
 800bf42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 fa06 	bl	800d35c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf50:	f002 fa58 	bl	800e404 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3738      	adds	r7, #56	; 0x38
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08e      	sub	sp, #56	; 0x38
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10a      	bne.n	800bf90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	623b      	str	r3, [r7, #32]
}
 800bf8c:	bf00      	nop
 800bf8e:	e7fe      	b.n	800bf8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d103      	bne.n	800bf9e <xQueueReceiveFromISR+0x3a>
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <xQueueReceiveFromISR+0x3e>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e000      	b.n	800bfa4 <xQueueReceiveFromISR+0x40>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	61fb      	str	r3, [r7, #28]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfbe:	f002 fad3 	bl	800e568 <vPortValidateInterruptPriority>
	__asm volatile
 800bfc2:	f3ef 8211 	mrs	r2, BASEPRI
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	61ba      	str	r2, [r7, #24]
 800bfd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bfda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d02f      	beq.n	800c04a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bff4:	68b9      	ldr	r1, [r7, #8]
 800bff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff8:	f000 f8d9 	bl	800c1ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	1e5a      	subs	r2, r3, #1
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00c:	d112      	bne.n	800c034 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d016      	beq.n	800c044 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	3310      	adds	r3, #16
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 fed8 	bl	800cdd0 <xTaskRemoveFromEventList>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00b      	beq.n	800c044 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	e007      	b.n	800c044 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c038:	3301      	adds	r3, #1
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	b25a      	sxtb	r2, r3
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c044:	2301      	movs	r3, #1
 800c046:	637b      	str	r3, [r7, #52]	; 0x34
 800c048:	e001      	b.n	800c04e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	637b      	str	r3, [r7, #52]	; 0x34
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	f383 8811 	msr	BASEPRI, r3
}
 800c058:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3738      	adds	r7, #56	; 0x38
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10a      	bne.n	800c08c <vQueueDelete+0x28>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	60bb      	str	r3, [r7, #8]
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f000 f95f 	bl	800c350 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d102      	bne.n	800c0a2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f002 fb6f 	bl	800e780 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c0a2:	bf00      	nop
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b085      	sub	sp, #20
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d006      	beq.n	800c0c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c0c4:	60fb      	str	r3, [r7, #12]
 800c0c6:	e001      	b.n	800c0cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3714      	adds	r7, #20
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b086      	sub	sp, #24
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10d      	bne.n	800c114 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d14d      	bne.n	800c19c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	4618      	mov	r0, r3
 800c106:	f001 f8bb 	bl	800d280 <xTaskPriorityDisinherit>
 800c10a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	609a      	str	r2, [r3, #8]
 800c112:	e043      	b.n	800c19c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d119      	bne.n	800c14e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6858      	ldr	r0, [r3, #4]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	461a      	mov	r2, r3
 800c124:	68b9      	ldr	r1, [r7, #8]
 800c126:	f003 fa77 	bl	800f618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c132:	441a      	add	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	429a      	cmp	r2, r3
 800c142:	d32b      	bcc.n	800c19c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	605a      	str	r2, [r3, #4]
 800c14c:	e026      	b.n	800c19c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68d8      	ldr	r0, [r3, #12]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c156:	461a      	mov	r2, r3
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	f003 fa5d 	bl	800f618 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68da      	ldr	r2, [r3, #12]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c166:	425b      	negs	r3, r3
 800c168:	441a      	add	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d207      	bcs.n	800c18a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	689a      	ldr	r2, [r3, #8]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	425b      	negs	r3, r3
 800c184:	441a      	add	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d105      	bne.n	800c19c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	3b01      	subs	r3, #1
 800c19a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c1a4:	697b      	ldr	r3, [r7, #20]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d018      	beq.n	800c1f2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c8:	441a      	add	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68da      	ldr	r2, [r3, #12]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d303      	bcc.n	800c1e2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68d9      	ldr	r1, [r3, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	6838      	ldr	r0, [r7, #0]
 800c1ee:	f003 fa13 	bl	800f618 <memcpy>
	}
}
 800c1f2:	bf00      	nop
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b084      	sub	sp, #16
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c202:	f002 f8cf 	bl	800e3a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c20c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c20e:	e011      	b.n	800c234 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d012      	beq.n	800c23e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3324      	adds	r3, #36	; 0x24
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fdd7 	bl	800cdd0 <xTaskRemoveFromEventList>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c228:	f000 feae 	bl	800cf88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	3b01      	subs	r3, #1
 800c230:	b2db      	uxtb	r3, r3
 800c232:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dce9      	bgt.n	800c210 <prvUnlockQueue+0x16>
 800c23c:	e000      	b.n	800c240 <prvUnlockQueue+0x46>
					break;
 800c23e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	22ff      	movs	r2, #255	; 0xff
 800c244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c248:	f002 f8dc 	bl	800e404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c24c:	f002 f8aa 	bl	800e3a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c256:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c258:	e011      	b.n	800c27e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d012      	beq.n	800c288 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3310      	adds	r3, #16
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fdb2 	bl	800cdd0 <xTaskRemoveFromEventList>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c272:	f000 fe89 	bl	800cf88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	3b01      	subs	r3, #1
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c27e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c282:	2b00      	cmp	r3, #0
 800c284:	dce9      	bgt.n	800c25a <prvUnlockQueue+0x60>
 800c286:	e000      	b.n	800c28a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c288:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	22ff      	movs	r2, #255	; 0xff
 800c28e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c292:	f002 f8b7 	bl	800e404 <vPortExitCritical>
}
 800c296:	bf00      	nop
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2a6:	f002 f87d 	bl	800e3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d102      	bne.n	800c2b8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]
 800c2b6:	e001      	b.n	800c2bc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2bc:	f002 f8a2 	bl	800e404 <vPortExitCritical>

	return xReturn;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2d2:	f002 f867 	bl	800e3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d102      	bne.n	800c2e8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	e001      	b.n	800c2ec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2ec:	f002 f88a 	bl	800e404 <vPortExitCritical>

	return xReturn;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	e014      	b.n	800c336 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c30c:	4a0f      	ldr	r2, [pc, #60]	; (800c34c <vQueueAddToRegistry+0x50>)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10b      	bne.n	800c330 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c318:	490c      	ldr	r1, [pc, #48]	; (800c34c <vQueueAddToRegistry+0x50>)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c322:	4a0a      	ldr	r2, [pc, #40]	; (800c34c <vQueueAddToRegistry+0x50>)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4413      	add	r3, r2
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c32e:	e006      	b.n	800c33e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	3301      	adds	r3, #1
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b07      	cmp	r3, #7
 800c33a:	d9e7      	bls.n	800c30c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c33c:	bf00      	nop
 800c33e:	bf00      	nop
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20000fb8 	.word	0x20000fb8

0800c350 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c358:	2300      	movs	r3, #0
 800c35a:	60fb      	str	r3, [r7, #12]
 800c35c:	e016      	b.n	800c38c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c35e:	4a10      	ldr	r2, [pc, #64]	; (800c3a0 <vQueueUnregisterQueue+0x50>)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	4413      	add	r3, r2
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d10b      	bne.n	800c386 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c36e:	4a0c      	ldr	r2, [pc, #48]	; (800c3a0 <vQueueUnregisterQueue+0x50>)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2100      	movs	r1, #0
 800c374:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c378:	4a09      	ldr	r2, [pc, #36]	; (800c3a0 <vQueueUnregisterQueue+0x50>)
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	4413      	add	r3, r2
 800c380:	2200      	movs	r2, #0
 800c382:	605a      	str	r2, [r3, #4]
				break;
 800c384:	e006      	b.n	800c394 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3301      	adds	r3, #1
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b07      	cmp	r3, #7
 800c390:	d9e5      	bls.n	800c35e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c392:	bf00      	nop
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	20000fb8 	.word	0x20000fb8

0800c3a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c3b4:	f001 fff6 	bl	800e3a4 <vPortEnterCritical>
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3be:	b25b      	sxtb	r3, r3
 800c3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c4:	d103      	bne.n	800c3ce <vQueueWaitForMessageRestricted+0x2a>
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3d4:	b25b      	sxtb	r3, r3
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d103      	bne.n	800c3e4 <vQueueWaitForMessageRestricted+0x40>
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3e4:	f002 f80e 	bl	800e404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d106      	bne.n	800c3fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	3324      	adds	r3, #36	; 0x24
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	68b9      	ldr	r1, [r7, #8]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fcbd 	bl	800cd78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c3fe:	6978      	ldr	r0, [r7, #20]
 800c400:	f7ff fefb 	bl	800c1fa <prvUnlockQueue>
	}
 800c404:	bf00      	nop
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08e      	sub	sp, #56	; 0x38
 800c410:	af04      	add	r7, sp, #16
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	623b      	str	r3, [r7, #32]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <xTaskCreateStatic+0x46>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	61fb      	str	r3, [r7, #28]
}
 800c44e:	bf00      	nop
 800c450:	e7fe      	b.n	800c450 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c452:	23a8      	movs	r3, #168	; 0xa8
 800c454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	2ba8      	cmp	r3, #168	; 0xa8
 800c45a:	d00a      	beq.n	800c472 <xTaskCreateStatic+0x66>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	61bb      	str	r3, [r7, #24]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c472:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	2b00      	cmp	r3, #0
 800c478:	d01e      	beq.n	800c4b8 <xTaskCreateStatic+0xac>
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d01b      	beq.n	800c4b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c488:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	2202      	movs	r2, #2
 800c48e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c492:	2300      	movs	r3, #0
 800c494:	9303      	str	r3, [sp, #12]
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	9302      	str	r3, [sp, #8]
 800c49a:	f107 0314 	add.w	r3, r7, #20
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 f850 	bl	800c550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4b2:	f000 f8f3 	bl	800c69c <prvAddNewTaskToReadyList>
 800c4b6:	e001      	b.n	800c4bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c4bc:	697b      	ldr	r3, [r7, #20]
	}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3728      	adds	r7, #40	; 0x28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b08c      	sub	sp, #48	; 0x30
 800c4ca:	af04      	add	r7, sp, #16
 800c4cc:	60f8      	str	r0, [r7, #12]
 800c4ce:	60b9      	str	r1, [r7, #8]
 800c4d0:	603b      	str	r3, [r7, #0]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f002 f884 	bl	800e5e8 <pvPortMalloc>
 800c4e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00e      	beq.n	800c506 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4e8:	20a8      	movs	r0, #168	; 0xa8
 800c4ea:	f002 f87d 	bl	800e5e8 <pvPortMalloc>
 800c4ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	697a      	ldr	r2, [r7, #20]
 800c4fa:	631a      	str	r2, [r3, #48]	; 0x30
 800c4fc:	e005      	b.n	800c50a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4fe:	6978      	ldr	r0, [r7, #20]
 800c500:	f002 f93e 	bl	800e780 <vPortFree>
 800c504:	e001      	b.n	800c50a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c506:	2300      	movs	r3, #0
 800c508:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d017      	beq.n	800c540 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c518:	88fa      	ldrh	r2, [r7, #6]
 800c51a:	2300      	movs	r3, #0
 800c51c:	9303      	str	r3, [sp, #12]
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	9302      	str	r3, [sp, #8]
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	68b9      	ldr	r1, [r7, #8]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 f80e 	bl	800c550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c534:	69f8      	ldr	r0, [r7, #28]
 800c536:	f000 f8b1 	bl	800c69c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c53a:	2301      	movs	r3, #1
 800c53c:	61bb      	str	r3, [r7, #24]
 800c53e:	e002      	b.n	800c546 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c540:	f04f 33ff 	mov.w	r3, #4294967295
 800c544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c546:	69bb      	ldr	r3, [r7, #24]
	}
 800c548:	4618      	mov	r0, r3
 800c54a:	3720      	adds	r7, #32
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c560:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	461a      	mov	r2, r3
 800c568:	21a5      	movs	r1, #165	; 0xa5
 800c56a:	f002 ff80 	bl	800f46e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c578:	3b01      	subs	r3, #1
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	f023 0307 	bic.w	r3, r3, #7
 800c586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00a      	beq.n	800c5a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	617b      	str	r3, [r7, #20]
}
 800c5a4:	bf00      	nop
 800c5a6:	e7fe      	b.n	800c5a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d01f      	beq.n	800c5ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61fb      	str	r3, [r7, #28]
 800c5b2:	e012      	b.n	800c5da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	7819      	ldrb	r1, [r3, #0]
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	3334      	adds	r3, #52	; 0x34
 800c5c4:	460a      	mov	r2, r1
 800c5c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d006      	beq.n	800c5e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	61fb      	str	r3, [r7, #28]
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	2b0f      	cmp	r3, #15
 800c5de:	d9e9      	bls.n	800c5b4 <prvInitialiseNewTask+0x64>
 800c5e0:	e000      	b.n	800c5e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c5e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5ec:	e003      	b.n	800c5f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f8:	2b37      	cmp	r3, #55	; 0x37
 800c5fa:	d901      	bls.n	800c600 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5fc:	2337      	movs	r3, #55	; 0x37
 800c5fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c604:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c60a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	2200      	movs	r2, #0
 800c610:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c614:	3304      	adds	r3, #4
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fd9f 	bl	800b15a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	3318      	adds	r3, #24
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fd9a 	bl	800b15a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c63a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	2200      	movs	r2, #0
 800c640:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	2200      	movs	r2, #0
 800c648:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	3354      	adds	r3, #84	; 0x54
 800c650:	224c      	movs	r2, #76	; 0x4c
 800c652:	2100      	movs	r1, #0
 800c654:	4618      	mov	r0, r3
 800c656:	f002 ff0a 	bl	800f46e <memset>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	4a0c      	ldr	r2, [pc, #48]	; (800c690 <prvInitialiseNewTask+0x140>)
 800c65e:	659a      	str	r2, [r3, #88]	; 0x58
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	4a0c      	ldr	r2, [pc, #48]	; (800c694 <prvInitialiseNewTask+0x144>)
 800c664:	65da      	str	r2, [r3, #92]	; 0x5c
 800c666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c668:	4a0b      	ldr	r2, [pc, #44]	; (800c698 <prvInitialiseNewTask+0x148>)
 800c66a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	68f9      	ldr	r1, [r7, #12]
 800c670:	69b8      	ldr	r0, [r7, #24]
 800c672:	f001 fd67 	bl	800e144 <pxPortInitialiseStack>
 800c676:	4602      	mov	r2, r0
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c686:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c688:	bf00      	nop
 800c68a:	3720      	adds	r7, #32
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	2000958c 	.word	0x2000958c
 800c694:	200095f4 	.word	0x200095f4
 800c698:	2000965c 	.word	0x2000965c

0800c69c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6a4:	f001 fe7e 	bl	800e3a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6a8:	4b2d      	ldr	r3, [pc, #180]	; (800c760 <prvAddNewTaskToReadyList+0xc4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4a2c      	ldr	r2, [pc, #176]	; (800c760 <prvAddNewTaskToReadyList+0xc4>)
 800c6b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6b2:	4b2c      	ldr	r3, [pc, #176]	; (800c764 <prvAddNewTaskToReadyList+0xc8>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d109      	bne.n	800c6ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6ba:	4a2a      	ldr	r2, [pc, #168]	; (800c764 <prvAddNewTaskToReadyList+0xc8>)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6c0:	4b27      	ldr	r3, [pc, #156]	; (800c760 <prvAddNewTaskToReadyList+0xc4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d110      	bne.n	800c6ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6c8:	f000 fc82 	bl	800cfd0 <prvInitialiseTaskLists>
 800c6cc:	e00d      	b.n	800c6ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6ce:	4b26      	ldr	r3, [pc, #152]	; (800c768 <prvAddNewTaskToReadyList+0xcc>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d109      	bne.n	800c6ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6d6:	4b23      	ldr	r3, [pc, #140]	; (800c764 <prvAddNewTaskToReadyList+0xc8>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d802      	bhi.n	800c6ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6e4:	4a1f      	ldr	r2, [pc, #124]	; (800c764 <prvAddNewTaskToReadyList+0xc8>)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6ea:	4b20      	ldr	r3, [pc, #128]	; (800c76c <prvAddNewTaskToReadyList+0xd0>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	4a1e      	ldr	r2, [pc, #120]	; (800c76c <prvAddNewTaskToReadyList+0xd0>)
 800c6f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6f4:	4b1d      	ldr	r3, [pc, #116]	; (800c76c <prvAddNewTaskToReadyList+0xd0>)
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c700:	4b1b      	ldr	r3, [pc, #108]	; (800c770 <prvAddNewTaskToReadyList+0xd4>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	429a      	cmp	r2, r3
 800c706:	d903      	bls.n	800c710 <prvAddNewTaskToReadyList+0x74>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70c:	4a18      	ldr	r2, [pc, #96]	; (800c770 <prvAddNewTaskToReadyList+0xd4>)
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4a15      	ldr	r2, [pc, #84]	; (800c774 <prvAddNewTaskToReadyList+0xd8>)
 800c71e:	441a      	add	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3304      	adds	r3, #4
 800c724:	4619      	mov	r1, r3
 800c726:	4610      	mov	r0, r2
 800c728:	f7fe fd24 	bl	800b174 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c72c:	f001 fe6a 	bl	800e404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c730:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <prvAddNewTaskToReadyList+0xcc>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00e      	beq.n	800c756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <prvAddNewTaskToReadyList+0xc8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c742:	429a      	cmp	r2, r3
 800c744:	d207      	bcs.n	800c756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c746:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <prvAddNewTaskToReadyList+0xdc>)
 800c748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	200014cc 	.word	0x200014cc
 800c764:	20000ff8 	.word	0x20000ff8
 800c768:	200014d8 	.word	0x200014d8
 800c76c:	200014e8 	.word	0x200014e8
 800c770:	200014d4 	.word	0x200014d4
 800c774:	20000ffc 	.word	0x20000ffc
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08a      	sub	sp, #40	; 0x28
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c786:	2300      	movs	r3, #0
 800c788:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	617b      	str	r3, [r7, #20]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <vTaskDelayUntil+0x46>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	613b      	str	r3, [r7, #16]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c7c2:	4b2a      	ldr	r3, [pc, #168]	; (800c86c <vTaskDelayUntil+0xf0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00a      	beq.n	800c7e0 <vTaskDelayUntil+0x64>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	60fb      	str	r3, [r7, #12]
}
 800c7dc:	bf00      	nop
 800c7de:	e7fe      	b.n	800c7de <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c7e0:	f000 f8ba 	bl	800c958 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c7e4:	4b22      	ldr	r3, [pc, #136]	; (800c870 <vTaskDelayUntil+0xf4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6a3a      	ldr	r2, [r7, #32]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d20b      	bcs.n	800c816 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	429a      	cmp	r2, r3
 800c806:	d211      	bcs.n	800c82c <vTaskDelayUntil+0xb0>
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d90d      	bls.n	800c82c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c810:	2301      	movs	r3, #1
 800c812:	627b      	str	r3, [r7, #36]	; 0x24
 800c814:	e00a      	b.n	800c82c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	69fa      	ldr	r2, [r7, #28]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d303      	bcc.n	800c828 <vTaskDelayUntil+0xac>
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	429a      	cmp	r2, r3
 800c826:	d901      	bls.n	800c82c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c828:	2301      	movs	r3, #1
 800c82a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	2b00      	cmp	r3, #0
 800c836:	d006      	beq.n	800c846 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c838:	69fa      	ldr	r2, [r7, #28]
 800c83a:	6a3b      	ldr	r3, [r7, #32]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	2100      	movs	r1, #0
 800c840:	4618      	mov	r0, r3
 800c842:	f001 f823 	bl	800d88c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c846:	f000 f895 	bl	800c974 <xTaskResumeAll>
 800c84a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d107      	bne.n	800c862 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c852:	4b08      	ldr	r3, [pc, #32]	; (800c874 <vTaskDelayUntil+0xf8>)
 800c854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c862:	bf00      	nop
 800c864:	3728      	adds	r7, #40	; 0x28
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	200014f4 	.word	0x200014f4
 800c870:	200014d0 	.word	0x200014d0
 800c874:	e000ed04 	.word	0xe000ed04

0800c878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08a      	sub	sp, #40	; 0x28
 800c87c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c882:	2300      	movs	r3, #0
 800c884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c886:	463a      	mov	r2, r7
 800c888:	1d39      	adds	r1, r7, #4
 800c88a:	f107 0308 	add.w	r3, r7, #8
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe fbbe 	bl	800b010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	9202      	str	r2, [sp, #8]
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	460a      	mov	r2, r1
 800c8a6:	4924      	ldr	r1, [pc, #144]	; (800c938 <vTaskStartScheduler+0xc0>)
 800c8a8:	4824      	ldr	r0, [pc, #144]	; (800c93c <vTaskStartScheduler+0xc4>)
 800c8aa:	f7ff fdaf 	bl	800c40c <xTaskCreateStatic>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	4a23      	ldr	r2, [pc, #140]	; (800c940 <vTaskStartScheduler+0xc8>)
 800c8b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8b4:	4b22      	ldr	r3, [pc, #136]	; (800c940 <vTaskStartScheduler+0xc8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e001      	b.n	800c8c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d102      	bne.n	800c8d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8cc:	f001 f832 	bl	800d934 <xTimerCreateTimerTask>
 800c8d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d11b      	bne.n	800c910 <vTaskStartScheduler+0x98>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	613b      	str	r3, [r7, #16]
}
 800c8ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c8ec:	4b15      	ldr	r3, [pc, #84]	; (800c944 <vTaskStartScheduler+0xcc>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	3354      	adds	r3, #84	; 0x54
 800c8f2:	4a15      	ldr	r2, [pc, #84]	; (800c948 <vTaskStartScheduler+0xd0>)
 800c8f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8f6:	4b15      	ldr	r3, [pc, #84]	; (800c94c <vTaskStartScheduler+0xd4>)
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8fe:	4b14      	ldr	r3, [pc, #80]	; (800c950 <vTaskStartScheduler+0xd8>)
 800c900:	2201      	movs	r2, #1
 800c902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c904:	4b13      	ldr	r3, [pc, #76]	; (800c954 <vTaskStartScheduler+0xdc>)
 800c906:	2200      	movs	r2, #0
 800c908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c90a:	f001 fca9 	bl	800e260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c90e:	e00e      	b.n	800c92e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c916:	d10a      	bne.n	800c92e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91c:	f383 8811 	msr	BASEPRI, r3
 800c920:	f3bf 8f6f 	isb	sy
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	60fb      	str	r3, [r7, #12]
}
 800c92a:	bf00      	nop
 800c92c:	e7fe      	b.n	800c92c <vTaskStartScheduler+0xb4>
}
 800c92e:	bf00      	nop
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	08011658 	.word	0x08011658
 800c93c:	0800cfa1 	.word	0x0800cfa1
 800c940:	200014f0 	.word	0x200014f0
 800c944:	20000ff8 	.word	0x20000ff8
 800c948:	2000006c 	.word	0x2000006c
 800c94c:	200014ec 	.word	0x200014ec
 800c950:	200014d8 	.word	0x200014d8
 800c954:	200014d0 	.word	0x200014d0

0800c958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c958:	b480      	push	{r7}
 800c95a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c95c:	4b04      	ldr	r3, [pc, #16]	; (800c970 <vTaskSuspendAll+0x18>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	3301      	adds	r3, #1
 800c962:	4a03      	ldr	r2, [pc, #12]	; (800c970 <vTaskSuspendAll+0x18>)
 800c964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c966:	bf00      	nop
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	200014f4 	.word	0x200014f4

0800c974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c97e:	2300      	movs	r3, #0
 800c980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c982:	4b42      	ldr	r3, [pc, #264]	; (800ca8c <xTaskResumeAll+0x118>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10a      	bne.n	800c9a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	603b      	str	r3, [r7, #0]
}
 800c99c:	bf00      	nop
 800c99e:	e7fe      	b.n	800c99e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c9a0:	f001 fd00 	bl	800e3a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9a4:	4b39      	ldr	r3, [pc, #228]	; (800ca8c <xTaskResumeAll+0x118>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	4a38      	ldr	r2, [pc, #224]	; (800ca8c <xTaskResumeAll+0x118>)
 800c9ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9ae:	4b37      	ldr	r3, [pc, #220]	; (800ca8c <xTaskResumeAll+0x118>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d162      	bne.n	800ca7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9b6:	4b36      	ldr	r3, [pc, #216]	; (800ca90 <xTaskResumeAll+0x11c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d05e      	beq.n	800ca7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9be:	e02f      	b.n	800ca20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9c0:	4b34      	ldr	r3, [pc, #208]	; (800ca94 <xTaskResumeAll+0x120>)
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3318      	adds	r3, #24
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fe fc2e 	bl	800b22e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fc29 	bl	800b22e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <xTaskResumeAll+0x124>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d903      	bls.n	800c9f0 <xTaskResumeAll+0x7c>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	4a2a      	ldr	r2, [pc, #168]	; (800ca98 <xTaskResumeAll+0x124>)
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4a27      	ldr	r2, [pc, #156]	; (800ca9c <xTaskResumeAll+0x128>)
 800c9fe:	441a      	add	r2, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3304      	adds	r3, #4
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f7fe fbb4 	bl	800b174 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca10:	4b23      	ldr	r3, [pc, #140]	; (800caa0 <xTaskResumeAll+0x12c>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d302      	bcc.n	800ca20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca1a:	4b22      	ldr	r3, [pc, #136]	; (800caa4 <xTaskResumeAll+0x130>)
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca20:	4b1c      	ldr	r3, [pc, #112]	; (800ca94 <xTaskResumeAll+0x120>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1cb      	bne.n	800c9c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca2e:	f000 fb71 	bl	800d114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca32:	4b1d      	ldr	r3, [pc, #116]	; (800caa8 <xTaskResumeAll+0x134>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d010      	beq.n	800ca60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca3e:	f000 f859 	bl	800caf4 <xTaskIncrementTick>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca48:	4b16      	ldr	r3, [pc, #88]	; (800caa4 <xTaskResumeAll+0x130>)
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1f1      	bne.n	800ca3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca5a:	4b13      	ldr	r3, [pc, #76]	; (800caa8 <xTaskResumeAll+0x134>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca60:	4b10      	ldr	r3, [pc, #64]	; (800caa4 <xTaskResumeAll+0x130>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d009      	beq.n	800ca7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca6c:	4b0f      	ldr	r3, [pc, #60]	; (800caac <xTaskResumeAll+0x138>)
 800ca6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca7c:	f001 fcc2 	bl	800e404 <vPortExitCritical>

	return xAlreadyYielded;
 800ca80:	68bb      	ldr	r3, [r7, #8]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	200014f4 	.word	0x200014f4
 800ca90:	200014cc 	.word	0x200014cc
 800ca94:	2000148c 	.word	0x2000148c
 800ca98:	200014d4 	.word	0x200014d4
 800ca9c:	20000ffc 	.word	0x20000ffc
 800caa0:	20000ff8 	.word	0x20000ff8
 800caa4:	200014e0 	.word	0x200014e0
 800caa8:	200014dc 	.word	0x200014dc
 800caac:	e000ed04 	.word	0xe000ed04

0800cab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cab6:	4b05      	ldr	r3, [pc, #20]	; (800cacc <xTaskGetTickCount+0x1c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cabc:	687b      	ldr	r3, [r7, #4]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	200014d0 	.word	0x200014d0

0800cad0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cad6:	f001 fd47 	bl	800e568 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cada:	2300      	movs	r3, #0
 800cadc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cade:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <xTaskGetTickCountFromISR+0x20>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cae4:	683b      	ldr	r3, [r7, #0]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200014d0 	.word	0x200014d0

0800caf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cafe:	4b4f      	ldr	r3, [pc, #316]	; (800cc3c <xTaskIncrementTick+0x148>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f040 808f 	bne.w	800cc26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb08:	4b4d      	ldr	r3, [pc, #308]	; (800cc40 <xTaskIncrementTick+0x14c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb10:	4a4b      	ldr	r2, [pc, #300]	; (800cc40 <xTaskIncrementTick+0x14c>)
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d120      	bne.n	800cb5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb1c:	4b49      	ldr	r3, [pc, #292]	; (800cc44 <xTaskIncrementTick+0x150>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <xTaskIncrementTick+0x48>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	603b      	str	r3, [r7, #0]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <xTaskIncrementTick+0x46>
 800cb3c:	4b41      	ldr	r3, [pc, #260]	; (800cc44 <xTaskIncrementTick+0x150>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	60fb      	str	r3, [r7, #12]
 800cb42:	4b41      	ldr	r3, [pc, #260]	; (800cc48 <xTaskIncrementTick+0x154>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a3f      	ldr	r2, [pc, #252]	; (800cc44 <xTaskIncrementTick+0x150>)
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	4a3f      	ldr	r2, [pc, #252]	; (800cc48 <xTaskIncrementTick+0x154>)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	4b3e      	ldr	r3, [pc, #248]	; (800cc4c <xTaskIncrementTick+0x158>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	4a3d      	ldr	r2, [pc, #244]	; (800cc4c <xTaskIncrementTick+0x158>)
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	f000 fadb 	bl	800d114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb5e:	4b3c      	ldr	r3, [pc, #240]	; (800cc50 <xTaskIncrementTick+0x15c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d349      	bcc.n	800cbfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb68:	4b36      	ldr	r3, [pc, #216]	; (800cc44 <xTaskIncrementTick+0x150>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d104      	bne.n	800cb7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb72:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <xTaskIncrementTick+0x15c>)
 800cb74:	f04f 32ff 	mov.w	r2, #4294967295
 800cb78:	601a      	str	r2, [r3, #0]
					break;
 800cb7a:	e03f      	b.n	800cbfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb7c:	4b31      	ldr	r3, [pc, #196]	; (800cc44 <xTaskIncrementTick+0x150>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d203      	bcs.n	800cb9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb94:	4a2e      	ldr	r2, [pc, #184]	; (800cc50 <xTaskIncrementTick+0x15c>)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb9a:	e02f      	b.n	800cbfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fe fb44 	bl	800b22e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d004      	beq.n	800cbb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	3318      	adds	r3, #24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fb3b 	bl	800b22e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbc:	4b25      	ldr	r3, [pc, #148]	; (800cc54 <xTaskIncrementTick+0x160>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d903      	bls.n	800cbcc <xTaskIncrementTick+0xd8>
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	4a22      	ldr	r2, [pc, #136]	; (800cc54 <xTaskIncrementTick+0x160>)
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4413      	add	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4a1f      	ldr	r2, [pc, #124]	; (800cc58 <xTaskIncrementTick+0x164>)
 800cbda:	441a      	add	r2, r3
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	f7fe fac6 	bl	800b174 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbec:	4b1b      	ldr	r3, [pc, #108]	; (800cc5c <xTaskIncrementTick+0x168>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d3b8      	bcc.n	800cb68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbfa:	e7b5      	b.n	800cb68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbfc:	4b17      	ldr	r3, [pc, #92]	; (800cc5c <xTaskIncrementTick+0x168>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc02:	4915      	ldr	r1, [pc, #84]	; (800cc58 <xTaskIncrementTick+0x164>)
 800cc04:	4613      	mov	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	4413      	add	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	440b      	add	r3, r1
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d901      	bls.n	800cc18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cc14:	2301      	movs	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc18:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <xTaskIncrementTick+0x16c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d007      	beq.n	800cc30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	617b      	str	r3, [r7, #20]
 800cc24:	e004      	b.n	800cc30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc26:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <xTaskIncrementTick+0x170>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	4a0d      	ldr	r2, [pc, #52]	; (800cc64 <xTaskIncrementTick+0x170>)
 800cc2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc30:	697b      	ldr	r3, [r7, #20]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	200014f4 	.word	0x200014f4
 800cc40:	200014d0 	.word	0x200014d0
 800cc44:	20001484 	.word	0x20001484
 800cc48:	20001488 	.word	0x20001488
 800cc4c:	200014e4 	.word	0x200014e4
 800cc50:	200014ec 	.word	0x200014ec
 800cc54:	200014d4 	.word	0x200014d4
 800cc58:	20000ffc 	.word	0x20000ffc
 800cc5c:	20000ff8 	.word	0x20000ff8
 800cc60:	200014e0 	.word	0x200014e0
 800cc64:	200014dc 	.word	0x200014dc

0800cc68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc6e:	4b2a      	ldr	r3, [pc, #168]	; (800cd18 <vTaskSwitchContext+0xb0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc76:	4b29      	ldr	r3, [pc, #164]	; (800cd1c <vTaskSwitchContext+0xb4>)
 800cc78:	2201      	movs	r2, #1
 800cc7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc7c:	e046      	b.n	800cd0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cc7e:	4b27      	ldr	r3, [pc, #156]	; (800cd1c <vTaskSwitchContext+0xb4>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc84:	4b26      	ldr	r3, [pc, #152]	; (800cd20 <vTaskSwitchContext+0xb8>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	60fb      	str	r3, [r7, #12]
 800cc8a:	e010      	b.n	800ccae <vTaskSwitchContext+0x46>
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10a      	bne.n	800cca8 <vTaskSwitchContext+0x40>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	607b      	str	r3, [r7, #4]
}
 800cca4:	bf00      	nop
 800cca6:	e7fe      	b.n	800cca6 <vTaskSwitchContext+0x3e>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	491d      	ldr	r1, [pc, #116]	; (800cd24 <vTaskSwitchContext+0xbc>)
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	440b      	add	r3, r1
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d0e4      	beq.n	800cc8c <vTaskSwitchContext+0x24>
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	4413      	add	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4a15      	ldr	r2, [pc, #84]	; (800cd24 <vTaskSwitchContext+0xbc>)
 800ccce:	4413      	add	r3, r2
 800ccd0:	60bb      	str	r3, [r7, #8]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	605a      	str	r2, [r3, #4]
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	3308      	adds	r3, #8
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d104      	bne.n	800ccf2 <vTaskSwitchContext+0x8a>
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	605a      	str	r2, [r3, #4]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	4a0b      	ldr	r2, [pc, #44]	; (800cd28 <vTaskSwitchContext+0xc0>)
 800ccfa:	6013      	str	r3, [r2, #0]
 800ccfc:	4a08      	ldr	r2, [pc, #32]	; (800cd20 <vTaskSwitchContext+0xb8>)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd02:	4b09      	ldr	r3, [pc, #36]	; (800cd28 <vTaskSwitchContext+0xc0>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3354      	adds	r3, #84	; 0x54
 800cd08:	4a08      	ldr	r2, [pc, #32]	; (800cd2c <vTaskSwitchContext+0xc4>)
 800cd0a:	6013      	str	r3, [r2, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	200014f4 	.word	0x200014f4
 800cd1c:	200014e0 	.word	0x200014e0
 800cd20:	200014d4 	.word	0x200014d4
 800cd24:	20000ffc 	.word	0x20000ffc
 800cd28:	20000ff8 	.word	0x20000ff8
 800cd2c:	2000006c 	.word	0x2000006c

0800cd30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10a      	bne.n	800cd56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60fb      	str	r3, [r7, #12]
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd56:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <vTaskPlaceOnEventList+0x44>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3318      	adds	r3, #24
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7fe fa2c 	bl	800b1bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd64:	2101      	movs	r1, #1
 800cd66:	6838      	ldr	r0, [r7, #0]
 800cd68:	f000 fd90 	bl	800d88c <prvAddCurrentTaskToDelayedList>
}
 800cd6c:	bf00      	nop
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20000ff8 	.word	0x20000ff8

0800cd78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	617b      	str	r3, [r7, #20]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cda0:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <vTaskPlaceOnEventListRestricted+0x54>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3318      	adds	r3, #24
 800cda6:	4619      	mov	r1, r3
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7fe f9e3 	bl	800b174 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d002      	beq.n	800cdba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cdb4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdba:	6879      	ldr	r1, [r7, #4]
 800cdbc:	68b8      	ldr	r0, [r7, #8]
 800cdbe:	f000 fd65 	bl	800d88c <prvAddCurrentTaskToDelayedList>
	}
 800cdc2:	bf00      	nop
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	20000ff8 	.word	0x20000ff8

0800cdd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10a      	bne.n	800cdfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	60fb      	str	r3, [r7, #12]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	3318      	adds	r3, #24
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fe fa14 	bl	800b22e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce06:	4b1e      	ldr	r3, [pc, #120]	; (800ce80 <xTaskRemoveFromEventList+0xb0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d11d      	bne.n	800ce4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	3304      	adds	r3, #4
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fe fa0b 	bl	800b22e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce1c:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <xTaskRemoveFromEventList+0xb4>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d903      	bls.n	800ce2c <xTaskRemoveFromEventList+0x5c>
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce28:	4a16      	ldr	r2, [pc, #88]	; (800ce84 <xTaskRemoveFromEventList+0xb4>)
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce30:	4613      	mov	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	4413      	add	r3, r2
 800ce36:	009b      	lsls	r3, r3, #2
 800ce38:	4a13      	ldr	r2, [pc, #76]	; (800ce88 <xTaskRemoveFromEventList+0xb8>)
 800ce3a:	441a      	add	r2, r3
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	3304      	adds	r3, #4
 800ce40:	4619      	mov	r1, r3
 800ce42:	4610      	mov	r0, r2
 800ce44:	f7fe f996 	bl	800b174 <vListInsertEnd>
 800ce48:	e005      	b.n	800ce56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	3318      	adds	r3, #24
 800ce4e:	4619      	mov	r1, r3
 800ce50:	480e      	ldr	r0, [pc, #56]	; (800ce8c <xTaskRemoveFromEventList+0xbc>)
 800ce52:	f7fe f98f 	bl	800b174 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	; (800ce90 <xTaskRemoveFromEventList+0xc0>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d905      	bls.n	800ce70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce64:	2301      	movs	r3, #1
 800ce66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce68:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <xTaskRemoveFromEventList+0xc4>)
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	e001      	b.n	800ce74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce74:	697b      	ldr	r3, [r7, #20]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	200014f4 	.word	0x200014f4
 800ce84:	200014d4 	.word	0x200014d4
 800ce88:	20000ffc 	.word	0x20000ffc
 800ce8c:	2000148c 	.word	0x2000148c
 800ce90:	20000ff8 	.word	0x20000ff8
 800ce94:	200014e0 	.word	0x200014e0

0800ce98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cea0:	4b06      	ldr	r3, [pc, #24]	; (800cebc <vTaskInternalSetTimeOutState+0x24>)
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cea8:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <vTaskInternalSetTimeOutState+0x28>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	605a      	str	r2, [r3, #4]
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	200014e4 	.word	0x200014e4
 800cec0:	200014d0 	.word	0x200014d0

0800cec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	613b      	str	r3, [r7, #16]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10a      	bne.n	800cf06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef4:	f383 8811 	msr	BASEPRI, r3
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	60fb      	str	r3, [r7, #12]
}
 800cf02:	bf00      	nop
 800cf04:	e7fe      	b.n	800cf04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf06:	f001 fa4d 	bl	800e3a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <xTaskCheckForTimeOut+0xbc>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf22:	d102      	bne.n	800cf2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61fb      	str	r3, [r7, #28]
 800cf28:	e023      	b.n	800cf72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b15      	ldr	r3, [pc, #84]	; (800cf84 <xTaskCheckForTimeOut+0xc0>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d007      	beq.n	800cf46 <xTaskCheckForTimeOut+0x82>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d302      	bcc.n	800cf46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf40:	2301      	movs	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e015      	b.n	800cf72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d20b      	bcs.n	800cf68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	1ad2      	subs	r2, r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff ff9b 	bl	800ce98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
 800cf66:	e004      	b.n	800cf72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf72:	f001 fa47 	bl	800e404 <vPortExitCritical>

	return xReturn;
 800cf76:	69fb      	ldr	r3, [r7, #28]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	200014d0 	.word	0x200014d0
 800cf84:	200014e4 	.word	0x200014e4

0800cf88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf88:	b480      	push	{r7}
 800cf8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf8c:	4b03      	ldr	r3, [pc, #12]	; (800cf9c <vTaskMissedYield+0x14>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	601a      	str	r2, [r3, #0]
}
 800cf92:	bf00      	nop
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	200014e0 	.word	0x200014e0

0800cfa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfa8:	f000 f852 	bl	800d050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <prvIdleTask+0x28>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d9f9      	bls.n	800cfa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfb4:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <prvIdleTask+0x2c>)
 800cfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	f3bf 8f4f 	dsb	sy
 800cfc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfc4:	e7f0      	b.n	800cfa8 <prvIdleTask+0x8>
 800cfc6:	bf00      	nop
 800cfc8:	20000ffc 	.word	0x20000ffc
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
 800cfda:	e00c      	b.n	800cff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4a12      	ldr	r2, [pc, #72]	; (800d030 <prvInitialiseTaskLists+0x60>)
 800cfe8:	4413      	add	r3, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe f895 	bl	800b11a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	3301      	adds	r3, #1
 800cff4:	607b      	str	r3, [r7, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b37      	cmp	r3, #55	; 0x37
 800cffa:	d9ef      	bls.n	800cfdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cffc:	480d      	ldr	r0, [pc, #52]	; (800d034 <prvInitialiseTaskLists+0x64>)
 800cffe:	f7fe f88c 	bl	800b11a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d002:	480d      	ldr	r0, [pc, #52]	; (800d038 <prvInitialiseTaskLists+0x68>)
 800d004:	f7fe f889 	bl	800b11a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d008:	480c      	ldr	r0, [pc, #48]	; (800d03c <prvInitialiseTaskLists+0x6c>)
 800d00a:	f7fe f886 	bl	800b11a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d00e:	480c      	ldr	r0, [pc, #48]	; (800d040 <prvInitialiseTaskLists+0x70>)
 800d010:	f7fe f883 	bl	800b11a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d014:	480b      	ldr	r0, [pc, #44]	; (800d044 <prvInitialiseTaskLists+0x74>)
 800d016:	f7fe f880 	bl	800b11a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <prvInitialiseTaskLists+0x78>)
 800d01c:	4a05      	ldr	r2, [pc, #20]	; (800d034 <prvInitialiseTaskLists+0x64>)
 800d01e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d020:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <prvInitialiseTaskLists+0x7c>)
 800d022:	4a05      	ldr	r2, [pc, #20]	; (800d038 <prvInitialiseTaskLists+0x68>)
 800d024:	601a      	str	r2, [r3, #0]
}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20000ffc 	.word	0x20000ffc
 800d034:	2000145c 	.word	0x2000145c
 800d038:	20001470 	.word	0x20001470
 800d03c:	2000148c 	.word	0x2000148c
 800d040:	200014a0 	.word	0x200014a0
 800d044:	200014b8 	.word	0x200014b8
 800d048:	20001484 	.word	0x20001484
 800d04c:	20001488 	.word	0x20001488

0800d050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d056:	e019      	b.n	800d08c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d058:	f001 f9a4 	bl	800e3a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <prvCheckTasksWaitingTermination+0x50>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3304      	adds	r3, #4
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe f8e0 	bl	800b22e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d06e:	4b0d      	ldr	r3, [pc, #52]	; (800d0a4 <prvCheckTasksWaitingTermination+0x54>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3b01      	subs	r3, #1
 800d074:	4a0b      	ldr	r2, [pc, #44]	; (800d0a4 <prvCheckTasksWaitingTermination+0x54>)
 800d076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <prvCheckTasksWaitingTermination+0x58>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4a0a      	ldr	r2, [pc, #40]	; (800d0a8 <prvCheckTasksWaitingTermination+0x58>)
 800d080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d082:	f001 f9bf 	bl	800e404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f810 	bl	800d0ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d08c:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <prvCheckTasksWaitingTermination+0x58>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e1      	bne.n	800d058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	200014a0 	.word	0x200014a0
 800d0a4:	200014cc 	.word	0x200014cc
 800d0a8:	200014b4 	.word	0x200014b4

0800d0ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3354      	adds	r3, #84	; 0x54
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f002 f9f5 	bl	800f4a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d108      	bne.n	800d0da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f001 fb57 	bl	800e780 <vPortFree>
				vPortFree( pxTCB );
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f001 fb54 	bl	800e780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0d8:	e018      	b.n	800d10c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d103      	bne.n	800d0ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 fb4b 	bl	800e780 <vPortFree>
	}
 800d0ea:	e00f      	b.n	800d10c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d00a      	beq.n	800d10c <prvDeleteTCB+0x60>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60fb      	str	r3, [r7, #12]
}
 800d108:	bf00      	nop
 800d10a:	e7fe      	b.n	800d10a <prvDeleteTCB+0x5e>
	}
 800d10c:	bf00      	nop
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d11a:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <prvResetNextTaskUnblockTime+0x38>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d104      	bne.n	800d12e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d124:	4b0a      	ldr	r3, [pc, #40]	; (800d150 <prvResetNextTaskUnblockTime+0x3c>)
 800d126:	f04f 32ff 	mov.w	r2, #4294967295
 800d12a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d12c:	e008      	b.n	800d140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d12e:	4b07      	ldr	r3, [pc, #28]	; (800d14c <prvResetNextTaskUnblockTime+0x38>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4a04      	ldr	r2, [pc, #16]	; (800d150 <prvResetNextTaskUnblockTime+0x3c>)
 800d13e:	6013      	str	r3, [r2, #0]
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	20001484 	.word	0x20001484
 800d150:	200014ec 	.word	0x200014ec

0800d154 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d15a:	4b05      	ldr	r3, [pc, #20]	; (800d170 <xTaskGetCurrentTaskHandle+0x1c>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d160:	687b      	ldr	r3, [r7, #4]
	}
 800d162:	4618      	mov	r0, r3
 800d164:	370c      	adds	r7, #12
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	20000ff8 	.word	0x20000ff8

0800d174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d17a:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <xTaskGetSchedulerState+0x34>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d102      	bne.n	800d188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d182:	2301      	movs	r3, #1
 800d184:	607b      	str	r3, [r7, #4]
 800d186:	e008      	b.n	800d19a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d188:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <xTaskGetSchedulerState+0x38>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d190:	2302      	movs	r3, #2
 800d192:	607b      	str	r3, [r7, #4]
 800d194:	e001      	b.n	800d19a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d196:	2300      	movs	r3, #0
 800d198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d19a:	687b      	ldr	r3, [r7, #4]
	}
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	200014d8 	.word	0x200014d8
 800d1ac:	200014f4 	.word	0x200014f4

0800d1b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d051      	beq.n	800d26a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ca:	4b2a      	ldr	r3, [pc, #168]	; (800d274 <xTaskPriorityInherit+0xc4>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d241      	bcs.n	800d258 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	db06      	blt.n	800d1ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1dc:	4b25      	ldr	r3, [pc, #148]	; (800d274 <xTaskPriorityInherit+0xc4>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	6959      	ldr	r1, [r3, #20]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	4413      	add	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4a1f      	ldr	r2, [pc, #124]	; (800d278 <xTaskPriorityInherit+0xc8>)
 800d1fc:	4413      	add	r3, r2
 800d1fe:	4299      	cmp	r1, r3
 800d200:	d122      	bne.n	800d248 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	3304      	adds	r3, #4
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe f811 	bl	800b22e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d20c:	4b19      	ldr	r3, [pc, #100]	; (800d274 <xTaskPriorityInherit+0xc4>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21a:	4b18      	ldr	r3, [pc, #96]	; (800d27c <xTaskPriorityInherit+0xcc>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d903      	bls.n	800d22a <xTaskPriorityInherit+0x7a>
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	4a15      	ldr	r2, [pc, #84]	; (800d27c <xTaskPriorityInherit+0xcc>)
 800d228:	6013      	str	r3, [r2, #0]
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	4a10      	ldr	r2, [pc, #64]	; (800d278 <xTaskPriorityInherit+0xc8>)
 800d238:	441a      	add	r2, r3
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	3304      	adds	r3, #4
 800d23e:	4619      	mov	r1, r3
 800d240:	4610      	mov	r0, r2
 800d242:	f7fd ff97 	bl	800b174 <vListInsertEnd>
 800d246:	e004      	b.n	800d252 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d248:	4b0a      	ldr	r3, [pc, #40]	; (800d274 <xTaskPriorityInherit+0xc4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d252:	2301      	movs	r3, #1
 800d254:	60fb      	str	r3, [r7, #12]
 800d256:	e008      	b.n	800d26a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d25c:	4b05      	ldr	r3, [pc, #20]	; (800d274 <xTaskPriorityInherit+0xc4>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d262:	429a      	cmp	r2, r3
 800d264:	d201      	bcs.n	800d26a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d266:	2301      	movs	r3, #1
 800d268:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d26a:	68fb      	ldr	r3, [r7, #12]
	}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20000ff8 	.word	0x20000ff8
 800d278:	20000ffc 	.word	0x20000ffc
 800d27c:	200014d4 	.word	0x200014d4

0800d280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d28c:	2300      	movs	r3, #0
 800d28e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d056      	beq.n	800d344 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d296:	4b2e      	ldr	r3, [pc, #184]	; (800d350 <xTaskPriorityDisinherit+0xd0>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d00a      	beq.n	800d2b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	60fb      	str	r3, [r7, #12]
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10a      	bne.n	800d2d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	60bb      	str	r3, [r7, #8]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2d8:	1e5a      	subs	r2, r3, #1
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d02c      	beq.n	800d344 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d128      	bne.n	800d344 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fd ff99 	bl	800b22e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d314:	4b0f      	ldr	r3, [pc, #60]	; (800d354 <xTaskPriorityDisinherit+0xd4>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d903      	bls.n	800d324 <xTaskPriorityDisinherit+0xa4>
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d320:	4a0c      	ldr	r2, [pc, #48]	; (800d354 <xTaskPriorityDisinherit+0xd4>)
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4a09      	ldr	r2, [pc, #36]	; (800d358 <xTaskPriorityDisinherit+0xd8>)
 800d332:	441a      	add	r2, r3
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3304      	adds	r3, #4
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f7fd ff1a 	bl	800b174 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d340:	2301      	movs	r3, #1
 800d342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d344:	697b      	ldr	r3, [r7, #20]
	}
 800d346:	4618      	mov	r0, r3
 800d348:	3718      	adds	r7, #24
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	20000ff8 	.word	0x20000ff8
 800d354:	200014d4 	.word	0x200014d4
 800d358:	20000ffc 	.word	0x20000ffc

0800d35c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b088      	sub	sp, #32
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d36a:	2301      	movs	r3, #1
 800d36c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d06a      	beq.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10a      	bne.n	800d392 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	60fb      	str	r3, [r7, #12]
}
 800d38e:	bf00      	nop
 800d390:	e7fe      	b.n	800d390 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d902      	bls.n	800d3a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	61fb      	str	r3, [r7, #28]
 800d3a0:	e002      	b.n	800d3a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ac:	69fa      	ldr	r2, [r7, #28]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d04b      	beq.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d146      	bne.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d3bc:	4b25      	ldr	r3, [pc, #148]	; (800d454 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d10a      	bne.n	800d3dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	60bb      	str	r3, [r7, #8]
}
 800d3d8:	bf00      	nop
 800d3da:	e7fe      	b.n	800d3da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	69fa      	ldr	r2, [r7, #28]
 800d3e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	db04      	blt.n	800d3fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	6959      	ldr	r1, [r3, #20]
 800d3fe:	693a      	ldr	r2, [r7, #16]
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4a13      	ldr	r2, [pc, #76]	; (800d458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d40a:	4413      	add	r3, r2
 800d40c:	4299      	cmp	r1, r3
 800d40e:	d11c      	bne.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	3304      	adds	r3, #4
 800d414:	4618      	mov	r0, r3
 800d416:	f7fd ff0a 	bl	800b22e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41e:	4b0f      	ldr	r3, [pc, #60]	; (800d45c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d903      	bls.n	800d42e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42a:	4a0c      	ldr	r2, [pc, #48]	; (800d45c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d432:	4613      	mov	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	4a07      	ldr	r2, [pc, #28]	; (800d458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d43c:	441a      	add	r2, r3
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	3304      	adds	r3, #4
 800d442:	4619      	mov	r1, r3
 800d444:	4610      	mov	r0, r2
 800d446:	f7fd fe95 	bl	800b174 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d44a:	bf00      	nop
 800d44c:	3720      	adds	r7, #32
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	20000ff8 	.word	0x20000ff8
 800d458:	20000ffc 	.word	0x20000ffc
 800d45c:	200014d4 	.word	0x200014d4

0800d460 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d464:	4b07      	ldr	r3, [pc, #28]	; (800d484 <pvTaskIncrementMutexHeldCount+0x24>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d004      	beq.n	800d476 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d46c:	4b05      	ldr	r3, [pc, #20]	; (800d484 <pvTaskIncrementMutexHeldCount+0x24>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d472:	3201      	adds	r2, #1
 800d474:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d476:	4b03      	ldr	r3, [pc, #12]	; (800d484 <pvTaskIncrementMutexHeldCount+0x24>)
 800d478:	681b      	ldr	r3, [r3, #0]
	}
 800d47a:	4618      	mov	r0, r3
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	20000ff8 	.word	0x20000ff8

0800d488 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d496:	f000 ff85 	bl	800e3a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d49a:	4b29      	ldr	r3, [pc, #164]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d01c      	beq.n	800d4e2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d4a8:	4b25      	ldr	r3, [pc, #148]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	43d2      	mvns	r2, r2
 800d4b4:	400a      	ands	r2, r1
 800d4b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d4ba:	4b21      	ldr	r3, [pc, #132]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00b      	beq.n	800d4e2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	6838      	ldr	r0, [r7, #0]
 800d4ce:	f000 f9dd 	bl	800d88c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d4d2:	4b1c      	ldr	r3, [pc, #112]	; (800d544 <xTaskNotifyWait+0xbc>)
 800d4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d4e2:	f000 ff8f 	bl	800e404 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d4e6:	f000 ff5d 	bl	800e3a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d005      	beq.n	800d4fc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d4f0:	4b13      	ldr	r3, [pc, #76]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d4fc:	4b10      	ldr	r3, [pc, #64]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b02      	cmp	r3, #2
 800d508:	d002      	beq.n	800d510 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d50a:	2300      	movs	r3, #0
 800d50c:	617b      	str	r3, [r7, #20]
 800d50e:	e00a      	b.n	800d526 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d510:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	43d2      	mvns	r2, r2
 800d51c:	400a      	ands	r2, r1
 800d51e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 800d522:	2301      	movs	r3, #1
 800d524:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d526:	4b06      	ldr	r3, [pc, #24]	; (800d540 <xTaskNotifyWait+0xb8>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800d530:	f000 ff68 	bl	800e404 <vPortExitCritical>

		return xReturn;
 800d534:	697b      	ldr	r3, [r7, #20]
	}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	20000ff8 	.word	0x20000ff8
 800d544:	e000ed04 	.word	0xe000ed04

0800d548 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08a      	sub	sp, #40	; 0x28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	4613      	mov	r3, r2
 800d556:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d558:	2301      	movs	r3, #1
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10a      	bne.n	800d578 <xTaskGenericNotify+0x30>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	61bb      	str	r3, [r7, #24]
}
 800d574:	bf00      	nop
 800d576:	e7fe      	b.n	800d576 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d57c:	f000 ff12 	bl	800e3a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d004      	beq.n	800d590 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d596:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	2202      	movs	r2, #2
 800d59c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	d82d      	bhi.n	800d602 <xTaskGenericNotify+0xba>
 800d5a6:	a201      	add	r2, pc, #4	; (adr r2, 800d5ac <xTaskGenericNotify+0x64>)
 800d5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ac:	0800d625 	.word	0x0800d625
 800d5b0:	0800d5c1 	.word	0x0800d5c1
 800d5b4:	0800d5d3 	.word	0x0800d5d3
 800d5b8:	0800d5e3 	.word	0x0800d5e3
 800d5bc:	0800d5ed 	.word	0x0800d5ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	431a      	orrs	r2, r3
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d5d0:	e02b      	b.n	800d62a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	6a3b      	ldr	r3, [r7, #32]
 800d5dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d5e0:	e023      	b.n	800d62a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d5e2:	6a3b      	ldr	r3, [r7, #32]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d5ea:	e01e      	b.n	800d62a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d5ec:	7ffb      	ldrb	r3, [r7, #31]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	d004      	beq.n	800d5fc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d5fa:	e016      	b.n	800d62a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d600:	e013      	b.n	800d62a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d00c      	beq.n	800d628 <xTaskGenericNotify+0xe0>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	617b      	str	r3, [r7, #20]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <xTaskGenericNotify+0xda>
					break;
 800d624:	bf00      	nop
 800d626:	e000      	b.n	800d62a <xTaskGenericNotify+0xe2>

					break;
 800d628:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d62a:	7ffb      	ldrb	r3, [r7, #31]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d13a      	bne.n	800d6a6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	3304      	adds	r3, #4
 800d634:	4618      	mov	r0, r3
 800d636:	f7fd fdfa 	bl	800b22e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d63a:	6a3b      	ldr	r3, [r7, #32]
 800d63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63e:	4b1d      	ldr	r3, [pc, #116]	; (800d6b4 <xTaskGenericNotify+0x16c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d903      	bls.n	800d64e <xTaskGenericNotify+0x106>
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64a:	4a1a      	ldr	r2, [pc, #104]	; (800d6b4 <xTaskGenericNotify+0x16c>)
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4a17      	ldr	r2, [pc, #92]	; (800d6b8 <xTaskGenericNotify+0x170>)
 800d65c:	441a      	add	r2, r3
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	3304      	adds	r3, #4
 800d662:	4619      	mov	r1, r3
 800d664:	4610      	mov	r0, r2
 800d666:	f7fd fd85 	bl	800b174 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d66a:	6a3b      	ldr	r3, [r7, #32]
 800d66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <xTaskGenericNotify+0x140>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	613b      	str	r3, [r7, #16]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	4b0b      	ldr	r3, [pc, #44]	; (800d6bc <xTaskGenericNotify+0x174>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	429a      	cmp	r2, r3
 800d694:	d907      	bls.n	800d6a6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d696:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <xTaskGenericNotify+0x178>)
 800d698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d6a6:	f000 fead 	bl	800e404 <vPortExitCritical>

		return xReturn;
 800d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3728      	adds	r7, #40	; 0x28
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	200014d4 	.word	0x200014d4
 800d6b8:	20000ffc 	.word	0x20000ffc
 800d6bc:	20000ff8 	.word	0x20000ff8
 800d6c0:	e000ed04 	.word	0xe000ed04

0800d6c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08e      	sub	sp, #56	; 0x38
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	603b      	str	r3, [r7, #0]
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10a      	bne.n	800d6f4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6f4:	f000 ff38 	bl	800e568 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d6fc:	f3ef 8211 	mrs	r2, BASEPRI
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	623a      	str	r2, [r7, #32]
 800d712:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d714:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d716:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d004      	beq.n	800d728 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	2202      	movs	r2, #2
 800d736:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800d73a:	79fb      	ldrb	r3, [r7, #7]
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d82f      	bhi.n	800d7a0 <xTaskGenericNotifyFromISR+0xdc>
 800d740:	a201      	add	r2, pc, #4	; (adr r2, 800d748 <xTaskGenericNotifyFromISR+0x84>)
 800d742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d746:	bf00      	nop
 800d748:	0800d7c3 	.word	0x0800d7c3
 800d74c:	0800d75d 	.word	0x0800d75d
 800d750:	0800d76f 	.word	0x0800d76f
 800d754:	0800d77f 	.word	0x0800d77f
 800d758:	0800d789 	.word	0x0800d789
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	431a      	orrs	r2, r3
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d76c:	e02c      	b.n	800d7c8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d774:	1c5a      	adds	r2, r3, #1
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d77c:	e024      	b.n	800d7c8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	68ba      	ldr	r2, [r7, #8]
 800d782:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d786:	e01f      	b.n	800d7c8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d788:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d004      	beq.n	800d79a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d798:	e016      	b.n	800d7c8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d79e:	e013      	b.n	800d7c8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7aa:	d00c      	beq.n	800d7c6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	61bb      	str	r3, [r7, #24]
}
 800d7be:	bf00      	nop
 800d7c0:	e7fe      	b.n	800d7c0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d7c2:	bf00      	nop
 800d7c4:	e000      	b.n	800d7c8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800d7c6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d7c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d146      	bne.n	800d85e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00a      	beq.n	800d7ee <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	617b      	str	r3, [r7, #20]
}
 800d7ea:	bf00      	nop
 800d7ec:	e7fe      	b.n	800d7ec <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ee:	4b21      	ldr	r3, [pc, #132]	; (800d874 <xTaskGenericNotifyFromISR+0x1b0>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d11d      	bne.n	800d832 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fd fd17 	bl	800b22e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d804:	4b1c      	ldr	r3, [pc, #112]	; (800d878 <xTaskGenericNotifyFromISR+0x1b4>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d903      	bls.n	800d814 <xTaskGenericNotifyFromISR+0x150>
 800d80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	4a19      	ldr	r2, [pc, #100]	; (800d878 <xTaskGenericNotifyFromISR+0x1b4>)
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d818:	4613      	mov	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4413      	add	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4a16      	ldr	r2, [pc, #88]	; (800d87c <xTaskGenericNotifyFromISR+0x1b8>)
 800d822:	441a      	add	r2, r3
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	3304      	adds	r3, #4
 800d828:	4619      	mov	r1, r3
 800d82a:	4610      	mov	r0, r2
 800d82c:	f7fd fca2 	bl	800b174 <vListInsertEnd>
 800d830:	e005      	b.n	800d83e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	3318      	adds	r3, #24
 800d836:	4619      	mov	r1, r3
 800d838:	4811      	ldr	r0, [pc, #68]	; (800d880 <xTaskGenericNotifyFromISR+0x1bc>)
 800d83a:	f7fd fc9b 	bl	800b174 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d842:	4b10      	ldr	r3, [pc, #64]	; (800d884 <xTaskGenericNotifyFromISR+0x1c0>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d848:	429a      	cmp	r2, r3
 800d84a:	d908      	bls.n	800d85e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d002      	beq.n	800d858 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d854:	2201      	movs	r2, #1
 800d856:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d858:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <xTaskGenericNotifyFromISR+0x1c4>)
 800d85a:	2201      	movs	r2, #1
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d860:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f383 8811 	msr	BASEPRI, r3
}
 800d868:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3738      	adds	r7, #56	; 0x38
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	200014f4 	.word	0x200014f4
 800d878:	200014d4 	.word	0x200014d4
 800d87c:	20000ffc 	.word	0x20000ffc
 800d880:	2000148c 	.word	0x2000148c
 800d884:	20000ff8 	.word	0x20000ff8
 800d888:	200014e0 	.word	0x200014e0

0800d88c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d896:	4b21      	ldr	r3, [pc, #132]	; (800d91c <prvAddCurrentTaskToDelayedList+0x90>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d89c:	4b20      	ldr	r3, [pc, #128]	; (800d920 <prvAddCurrentTaskToDelayedList+0x94>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fd fcc3 	bl	800b22e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ae:	d10a      	bne.n	800d8c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d007      	beq.n	800d8c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8b6:	4b1a      	ldr	r3, [pc, #104]	; (800d920 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4819      	ldr	r0, [pc, #100]	; (800d924 <prvAddCurrentTaskToDelayedList+0x98>)
 800d8c0:	f7fd fc58 	bl	800b174 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8c4:	e026      	b.n	800d914 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8ce:	4b14      	ldr	r3, [pc, #80]	; (800d920 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d209      	bcs.n	800d8f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8de:	4b12      	ldr	r3, [pc, #72]	; (800d928 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fd fc66 	bl	800b1bc <vListInsert>
}
 800d8f0:	e010      	b.n	800d914 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8f2:	4b0e      	ldr	r3, [pc, #56]	; (800d92c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	4b0a      	ldr	r3, [pc, #40]	; (800d920 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	4610      	mov	r0, r2
 800d900:	f7fd fc5c 	bl	800b1bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d904:	4b0a      	ldr	r3, [pc, #40]	; (800d930 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d202      	bcs.n	800d914 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d90e:	4a08      	ldr	r2, [pc, #32]	; (800d930 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	6013      	str	r3, [r2, #0]
}
 800d914:	bf00      	nop
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200014d0 	.word	0x200014d0
 800d920:	20000ff8 	.word	0x20000ff8
 800d924:	200014b8 	.word	0x200014b8
 800d928:	20001488 	.word	0x20001488
 800d92c:	20001484 	.word	0x20001484
 800d930:	200014ec 	.word	0x200014ec

0800d934 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	; 0x28
 800d938:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d93e:	f000 fba1 	bl	800e084 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d942:	4b1c      	ldr	r3, [pc, #112]	; (800d9b4 <xTimerCreateTimerTask+0x80>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d021      	beq.n	800d98e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d94e:	2300      	movs	r3, #0
 800d950:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d952:	1d3a      	adds	r2, r7, #4
 800d954:	f107 0108 	add.w	r1, r7, #8
 800d958:	f107 030c 	add.w	r3, r7, #12
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fd fb71 	bl	800b044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	68fa      	ldr	r2, [r7, #12]
 800d968:	9202      	str	r2, [sp, #8]
 800d96a:	9301      	str	r3, [sp, #4]
 800d96c:	2302      	movs	r3, #2
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	2300      	movs	r3, #0
 800d972:	460a      	mov	r2, r1
 800d974:	4910      	ldr	r1, [pc, #64]	; (800d9b8 <xTimerCreateTimerTask+0x84>)
 800d976:	4811      	ldr	r0, [pc, #68]	; (800d9bc <xTimerCreateTimerTask+0x88>)
 800d978:	f7fe fd48 	bl	800c40c <xTaskCreateStatic>
 800d97c:	4603      	mov	r3, r0
 800d97e:	4a10      	ldr	r2, [pc, #64]	; (800d9c0 <xTimerCreateTimerTask+0x8c>)
 800d980:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d982:	4b0f      	ldr	r3, [pc, #60]	; (800d9c0 <xTimerCreateTimerTask+0x8c>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d98a:	2301      	movs	r3, #1
 800d98c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	613b      	str	r3, [r7, #16]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9aa:	697b      	ldr	r3, [r7, #20]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20001528 	.word	0x20001528
 800d9b8:	08011660 	.word	0x08011660
 800d9bc:	0800dc2d 	.word	0x0800dc2d
 800d9c0:	2000152c 	.word	0x2000152c

0800d9c4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d9d2:	202c      	movs	r0, #44	; 0x2c
 800d9d4:	f000 fe08 	bl	800e5e8 <pvPortMalloc>
 800d9d8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00d      	beq.n	800d9fc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	9301      	str	r3, [sp, #4]
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 f843 	bl	800da82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d9fc:	697b      	ldr	r3, [r7, #20]
	}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800da06:	b580      	push	{r7, lr}
 800da08:	b08a      	sub	sp, #40	; 0x28
 800da0a:	af02      	add	r7, sp, #8
 800da0c:	60f8      	str	r0, [r7, #12]
 800da0e:	60b9      	str	r1, [r7, #8]
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800da14:	232c      	movs	r3, #44	; 0x2c
 800da16:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	2b2c      	cmp	r3, #44	; 0x2c
 800da1c:	d00a      	beq.n	800da34 <xTimerCreateStatic+0x2e>
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	61bb      	str	r3, [r7, #24]
}
 800da30:	bf00      	nop
 800da32:	e7fe      	b.n	800da32 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d10a      	bne.n	800da52 <xTimerCreateStatic+0x4c>
	__asm volatile
 800da3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	617b      	str	r3, [r7, #20]
}
 800da4e:	bf00      	nop
 800da50:	e7fe      	b.n	800da50 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800da52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da54:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00d      	beq.n	800da78 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	2202      	movs	r2, #2
 800da60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f000 f805 	bl	800da82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800da78:	69fb      	ldr	r3, [r7, #28]
	}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3720      	adds	r7, #32
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b086      	sub	sp, #24
 800da86:	af00      	add	r7, sp, #0
 800da88:	60f8      	str	r0, [r7, #12]
 800da8a:	60b9      	str	r1, [r7, #8]
 800da8c:	607a      	str	r2, [r7, #4]
 800da8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10a      	bne.n	800daac <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	617b      	str	r3, [r7, #20]
}
 800daa8:	bf00      	nop
 800daaa:	e7fe      	b.n	800daaa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d01e      	beq.n	800daf0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dab2:	f000 fae7 	bl	800e084 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	6a3a      	ldr	r2, [r7, #32]
 800dacc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	3304      	adds	r3, #4
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fd fb41 	bl	800b15a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d008      	beq.n	800daf0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dae4:	f043 0304 	orr.w	r3, r3, #4
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800daf0:	bf00      	nop
 800daf2:	3718      	adds	r7, #24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08a      	sub	sp, #40	; 0x28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
 800db04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800db06:	2300      	movs	r3, #0
 800db08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	623b      	str	r3, [r7, #32]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db26:	4b1a      	ldr	r3, [pc, #104]	; (800db90 <xTimerGenericCommand+0x98>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d02a      	beq.n	800db84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2b05      	cmp	r3, #5
 800db3e:	dc18      	bgt.n	800db72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db40:	f7ff fb18 	bl	800d174 <xTaskGetSchedulerState>
 800db44:	4603      	mov	r3, r0
 800db46:	2b02      	cmp	r3, #2
 800db48:	d109      	bne.n	800db5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db4a:	4b11      	ldr	r3, [pc, #68]	; (800db90 <xTimerGenericCommand+0x98>)
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	f107 0110 	add.w	r1, r7, #16
 800db52:	2300      	movs	r3, #0
 800db54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db56:	f7fd fdf3 	bl	800b740 <xQueueGenericSend>
 800db5a:	6278      	str	r0, [r7, #36]	; 0x24
 800db5c:	e012      	b.n	800db84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db5e:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <xTimerGenericCommand+0x98>)
 800db60:	6818      	ldr	r0, [r3, #0]
 800db62:	f107 0110 	add.w	r1, r7, #16
 800db66:	2300      	movs	r3, #0
 800db68:	2200      	movs	r2, #0
 800db6a:	f7fd fde9 	bl	800b740 <xQueueGenericSend>
 800db6e:	6278      	str	r0, [r7, #36]	; 0x24
 800db70:	e008      	b.n	800db84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db72:	4b07      	ldr	r3, [pc, #28]	; (800db90 <xTimerGenericCommand+0x98>)
 800db74:	6818      	ldr	r0, [r3, #0]
 800db76:	f107 0110 	add.w	r1, r7, #16
 800db7a:	2300      	movs	r3, #0
 800db7c:	683a      	ldr	r2, [r7, #0]
 800db7e:	f7fd fedd 	bl	800b93c <xQueueGenericSendFromISR>
 800db82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db86:	4618      	mov	r0, r3
 800db88:	3728      	adds	r7, #40	; 0x28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20001528 	.word	0x20001528

0800db94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af02      	add	r7, sp, #8
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db9e:	4b22      	ldr	r3, [pc, #136]	; (800dc28 <prvProcessExpiredTimer+0x94>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd fb3e 	bl	800b22e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbb8:	f003 0304 	and.w	r3, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d022      	beq.n	800dc06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	699a      	ldr	r2, [r3, #24]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	18d1      	adds	r1, r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	6978      	ldr	r0, [r7, #20]
 800dbce:	f000 f8d1 	bl	800dd74 <prvInsertTimerInActiveList>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d01f      	beq.n	800dc18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbd8:	2300      	movs	r3, #0
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	6978      	ldr	r0, [r7, #20]
 800dbe4:	f7ff ff88 	bl	800daf8 <xTimerGenericCommand>
 800dbe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d113      	bne.n	800dc18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	60fb      	str	r3, [r7, #12]
}
 800dc02:	bf00      	nop
 800dc04:	e7fe      	b.n	800dc04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc0c:	f023 0301 	bic.w	r3, r3, #1
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	6978      	ldr	r0, [r7, #20]
 800dc1e:	4798      	blx	r3
}
 800dc20:	bf00      	nop
 800dc22:	3718      	adds	r7, #24
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	20001520 	.word	0x20001520

0800dc2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc34:	f107 0308 	add.w	r3, r7, #8
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 f857 	bl	800dcec <prvGetNextExpireTime>
 800dc3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	4619      	mov	r1, r3
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f000 f803 	bl	800dc50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc4a:	f000 f8d5 	bl	800ddf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc4e:	e7f1      	b.n	800dc34 <prvTimerTask+0x8>

0800dc50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc5a:	f7fe fe7d 	bl	800c958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc5e:	f107 0308 	add.w	r3, r7, #8
 800dc62:	4618      	mov	r0, r3
 800dc64:	f000 f866 	bl	800dd34 <prvSampleTimeNow>
 800dc68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d130      	bne.n	800dcd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10a      	bne.n	800dc8c <prvProcessTimerOrBlockTask+0x3c>
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d806      	bhi.n	800dc8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc7e:	f7fe fe79 	bl	800c974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc82:	68f9      	ldr	r1, [r7, #12]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7ff ff85 	bl	800db94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc8a:	e024      	b.n	800dcd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d008      	beq.n	800dca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc92:	4b13      	ldr	r3, [pc, #76]	; (800dce0 <prvProcessTimerOrBlockTask+0x90>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d101      	bne.n	800dca0 <prvProcessTimerOrBlockTask+0x50>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e000      	b.n	800dca2 <prvProcessTimerOrBlockTask+0x52>
 800dca0:	2300      	movs	r3, #0
 800dca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <prvProcessTimerOrBlockTask+0x94>)
 800dca6:	6818      	ldr	r0, [r3, #0]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	f7fe fb77 	bl	800c3a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dcb6:	f7fe fe5d 	bl	800c974 <xTaskResumeAll>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10a      	bne.n	800dcd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dcc0:	4b09      	ldr	r3, [pc, #36]	; (800dce8 <prvProcessTimerOrBlockTask+0x98>)
 800dcc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc6:	601a      	str	r2, [r3, #0]
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	f3bf 8f6f 	isb	sy
}
 800dcd0:	e001      	b.n	800dcd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dcd2:	f7fe fe4f 	bl	800c974 <xTaskResumeAll>
}
 800dcd6:	bf00      	nop
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20001524 	.word	0x20001524
 800dce4:	20001528 	.word	0x20001528
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dcf4:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <prvGetNextExpireTime+0x44>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <prvGetNextExpireTime+0x16>
 800dcfe:	2201      	movs	r2, #1
 800dd00:	e000      	b.n	800dd04 <prvGetNextExpireTime+0x18>
 800dd02:	2200      	movs	r2, #0
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d105      	bne.n	800dd1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <prvGetNextExpireTime+0x44>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	60fb      	str	r3, [r7, #12]
 800dd1a:	e001      	b.n	800dd20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd20:	68fb      	ldr	r3, [r7, #12]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	20001520 	.word	0x20001520

0800dd34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd3c:	f7fe feb8 	bl	800cab0 <xTaskGetTickCount>
 800dd40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd42:	4b0b      	ldr	r3, [pc, #44]	; (800dd70 <prvSampleTimeNow+0x3c>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d205      	bcs.n	800dd58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd4c:	f000 f936 	bl	800dfbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	e002      	b.n	800dd5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd5e:	4a04      	ldr	r2, [pc, #16]	; (800dd70 <prvSampleTimeNow+0x3c>)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd64:	68fb      	ldr	r3, [r7, #12]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20001530 	.word	0x20001530

0800dd74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
 800dd80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd82:	2300      	movs	r3, #0
 800dd84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d812      	bhi.n	800ddc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	1ad2      	subs	r2, r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d302      	bcc.n	800ddae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	e01b      	b.n	800dde6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ddae:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <prvInsertTimerInActiveList+0x7c>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4610      	mov	r0, r2
 800ddba:	f7fd f9ff 	bl	800b1bc <vListInsert>
 800ddbe:	e012      	b.n	800dde6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d206      	bcs.n	800ddd6 <prvInsertTimerInActiveList+0x62>
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d302      	bcc.n	800ddd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	617b      	str	r3, [r7, #20]
 800ddd4:	e007      	b.n	800dde6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddd6:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <prvInsertTimerInActiveList+0x80>)
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3304      	adds	r3, #4
 800ddde:	4619      	mov	r1, r3
 800dde0:	4610      	mov	r0, r2
 800dde2:	f7fd f9eb 	bl	800b1bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dde6:	697b      	ldr	r3, [r7, #20]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	20001524 	.word	0x20001524
 800ddf4:	20001520 	.word	0x20001520

0800ddf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b08e      	sub	sp, #56	; 0x38
 800ddfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddfe:	e0ca      	b.n	800df96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	da18      	bge.n	800de38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800de06:	1d3b      	adds	r3, r7, #4
 800de08:	3304      	adds	r3, #4
 800de0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d10a      	bne.n	800de28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	61fb      	str	r3, [r7, #28]
}
 800de24:	bf00      	nop
 800de26:	e7fe      	b.n	800de26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de2e:	6850      	ldr	r0, [r2, #4]
 800de30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de32:	6892      	ldr	r2, [r2, #8]
 800de34:	4611      	mov	r1, r2
 800de36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f2c0 80ab 	blt.w	800df96 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d004      	beq.n	800de56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	3304      	adds	r3, #4
 800de50:	4618      	mov	r0, r3
 800de52:	f7fd f9ec 	bl	800b22e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de56:	463b      	mov	r3, r7
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff ff6b 	bl	800dd34 <prvSampleTimeNow>
 800de5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b09      	cmp	r3, #9
 800de64:	f200 8096 	bhi.w	800df94 <prvProcessReceivedCommands+0x19c>
 800de68:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <prvProcessReceivedCommands+0x78>)
 800de6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6e:	bf00      	nop
 800de70:	0800de99 	.word	0x0800de99
 800de74:	0800de99 	.word	0x0800de99
 800de78:	0800de99 	.word	0x0800de99
 800de7c:	0800df0d 	.word	0x0800df0d
 800de80:	0800df21 	.word	0x0800df21
 800de84:	0800df6b 	.word	0x0800df6b
 800de88:	0800de99 	.word	0x0800de99
 800de8c:	0800de99 	.word	0x0800de99
 800de90:	0800df0d 	.word	0x0800df0d
 800de94:	0800df21 	.word	0x0800df21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de9e:	f043 0301 	orr.w	r3, r3, #1
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	18d1      	adds	r1, r2, r3
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deb8:	f7ff ff5c 	bl	800dd74 <prvInsertTimerInActiveList>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d069      	beq.n	800df96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dec8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800decc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d05e      	beq.n	800df96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ded8:	68ba      	ldr	r2, [r7, #8]
 800deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dedc:	699b      	ldr	r3, [r3, #24]
 800dede:	441a      	add	r2, r3
 800dee0:	2300      	movs	r3, #0
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	2300      	movs	r3, #0
 800dee6:	2100      	movs	r1, #0
 800dee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deea:	f7ff fe05 	bl	800daf8 <xTimerGenericCommand>
 800deee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d14f      	bne.n	800df96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	61bb      	str	r3, [r7, #24]
}
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df12:	f023 0301 	bic.w	r3, r3, #1
 800df16:	b2da      	uxtb	r2, r3
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800df1e:	e03a      	b.n	800df96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df26:	f043 0301 	orr.w	r3, r3, #1
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10a      	bne.n	800df56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	617b      	str	r3, [r7, #20]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df58:	699a      	ldr	r2, [r3, #24]
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	18d1      	adds	r1, r2, r3
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df64:	f7ff ff06 	bl	800dd74 <prvInsertTimerInActiveList>
					break;
 800df68:	e015      	b.n	800df96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df70:	f003 0302 	and.w	r3, r3, #2
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df7a:	f000 fc01 	bl	800e780 <vPortFree>
 800df7e:	e00a      	b.n	800df96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df86:	f023 0301 	bic.w	r3, r3, #1
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df92:	e000      	b.n	800df96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800df94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df96:	4b08      	ldr	r3, [pc, #32]	; (800dfb8 <prvProcessReceivedCommands+0x1c0>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	1d39      	adds	r1, r7, #4
 800df9c:	2200      	movs	r2, #0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fd fdf4 	bl	800bb8c <xQueueReceive>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f47f af2a 	bne.w	800de00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	3730      	adds	r7, #48	; 0x30
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20001528 	.word	0x20001528

0800dfbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfc2:	e048      	b.n	800e056 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfc4:	4b2d      	ldr	r3, [pc, #180]	; (800e07c <prvSwitchTimerLists+0xc0>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfce:	4b2b      	ldr	r3, [pc, #172]	; (800e07c <prvSwitchTimerLists+0xc0>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3304      	adds	r3, #4
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fd f926 	bl	800b22e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dff0:	f003 0304 	and.w	r3, r3, #4
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d02e      	beq.n	800e056 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	699b      	ldr	r3, [r3, #24]
 800dffc:	693a      	ldr	r2, [r7, #16]
 800dffe:	4413      	add	r3, r2
 800e000:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	429a      	cmp	r2, r3
 800e008:	d90e      	bls.n	800e028 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e016:	4b19      	ldr	r3, [pc, #100]	; (800e07c <prvSwitchTimerLists+0xc0>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7fd f8cb 	bl	800b1bc <vListInsert>
 800e026:	e016      	b.n	800e056 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e028:	2300      	movs	r3, #0
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	2300      	movs	r3, #0
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	2100      	movs	r1, #0
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff fd60 	bl	800daf8 <xTimerGenericCommand>
 800e038:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	603b      	str	r3, [r7, #0]
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e056:	4b09      	ldr	r3, [pc, #36]	; (800e07c <prvSwitchTimerLists+0xc0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d1b1      	bne.n	800dfc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e060:	4b06      	ldr	r3, [pc, #24]	; (800e07c <prvSwitchTimerLists+0xc0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e066:	4b06      	ldr	r3, [pc, #24]	; (800e080 <prvSwitchTimerLists+0xc4>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a04      	ldr	r2, [pc, #16]	; (800e07c <prvSwitchTimerLists+0xc0>)
 800e06c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e06e:	4a04      	ldr	r2, [pc, #16]	; (800e080 <prvSwitchTimerLists+0xc4>)
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	6013      	str	r3, [r2, #0]
}
 800e074:	bf00      	nop
 800e076:	3718      	adds	r7, #24
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	20001520 	.word	0x20001520
 800e080:	20001524 	.word	0x20001524

0800e084 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e08a:	f000 f98b 	bl	800e3a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e08e:	4b15      	ldr	r3, [pc, #84]	; (800e0e4 <prvCheckForValidListAndQueue+0x60>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d120      	bne.n	800e0d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e096:	4814      	ldr	r0, [pc, #80]	; (800e0e8 <prvCheckForValidListAndQueue+0x64>)
 800e098:	f7fd f83f 	bl	800b11a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e09c:	4813      	ldr	r0, [pc, #76]	; (800e0ec <prvCheckForValidListAndQueue+0x68>)
 800e09e:	f7fd f83c 	bl	800b11a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0a2:	4b13      	ldr	r3, [pc, #76]	; (800e0f0 <prvCheckForValidListAndQueue+0x6c>)
 800e0a4:	4a10      	ldr	r2, [pc, #64]	; (800e0e8 <prvCheckForValidListAndQueue+0x64>)
 800e0a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e0a8:	4b12      	ldr	r3, [pc, #72]	; (800e0f4 <prvCheckForValidListAndQueue+0x70>)
 800e0aa:	4a10      	ldr	r2, [pc, #64]	; (800e0ec <prvCheckForValidListAndQueue+0x68>)
 800e0ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	4b11      	ldr	r3, [pc, #68]	; (800e0f8 <prvCheckForValidListAndQueue+0x74>)
 800e0b4:	4a11      	ldr	r2, [pc, #68]	; (800e0fc <prvCheckForValidListAndQueue+0x78>)
 800e0b6:	2110      	movs	r1, #16
 800e0b8:	200a      	movs	r0, #10
 800e0ba:	f7fd f94b 	bl	800b354 <xQueueGenericCreateStatic>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	4a08      	ldr	r2, [pc, #32]	; (800e0e4 <prvCheckForValidListAndQueue+0x60>)
 800e0c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e0c4:	4b07      	ldr	r3, [pc, #28]	; (800e0e4 <prvCheckForValidListAndQueue+0x60>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d005      	beq.n	800e0d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0cc:	4b05      	ldr	r3, [pc, #20]	; (800e0e4 <prvCheckForValidListAndQueue+0x60>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	490b      	ldr	r1, [pc, #44]	; (800e100 <prvCheckForValidListAndQueue+0x7c>)
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fe f912 	bl	800c2fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0d8:	f000 f994 	bl	800e404 <vPortExitCritical>
}
 800e0dc:	bf00      	nop
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20001528 	.word	0x20001528
 800e0e8:	200014f8 	.word	0x200014f8
 800e0ec:	2000150c 	.word	0x2000150c
 800e0f0:	20001520 	.word	0x20001520
 800e0f4:	20001524 	.word	0x20001524
 800e0f8:	200015d4 	.word	0x200015d4
 800e0fc:	20001534 	.word	0x20001534
 800e100:	08011668 	.word	0x08011668

0800e104 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d10a      	bne.n	800e12c <pvTimerGetTimerID+0x28>
	__asm volatile
 800e116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	60fb      	str	r3, [r7, #12]
}
 800e128:	bf00      	nop
 800e12a:	e7fe      	b.n	800e12a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e12c:	f000 f93a 	bl	800e3a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	69db      	ldr	r3, [r3, #28]
 800e134:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e136:	f000 f965 	bl	800e404 <vPortExitCritical>

	return pvReturn;
 800e13a:	693b      	ldr	r3, [r7, #16]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	3b04      	subs	r3, #4
 800e154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e15c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3b04      	subs	r3, #4
 800e162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f023 0201 	bic.w	r2, r3, #1
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3b04      	subs	r3, #4
 800e172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e174:	4a0c      	ldr	r2, [pc, #48]	; (800e1a8 <pxPortInitialiseStack+0x64>)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3b14      	subs	r3, #20
 800e17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3b04      	subs	r3, #4
 800e18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f06f 0202 	mvn.w	r2, #2
 800e192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	3b20      	subs	r3, #32
 800e198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e19a:	68fb      	ldr	r3, [r7, #12]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3714      	adds	r7, #20
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	0800e1ad 	.word	0x0800e1ad

0800e1ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1b6:	4b12      	ldr	r3, [pc, #72]	; (800e200 <prvTaskExitError+0x54>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1be:	d00a      	beq.n	800e1d6 <prvTaskExitError+0x2a>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	60fb      	str	r3, [r7, #12]
}
 800e1d2:	bf00      	nop
 800e1d4:	e7fe      	b.n	800e1d4 <prvTaskExitError+0x28>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	60bb      	str	r3, [r7, #8]
}
 800e1e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1ea:	bf00      	nop
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0fc      	beq.n	800e1ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1f2:	bf00      	nop
 800e1f4:	bf00      	nop
 800e1f6:	3714      	adds	r7, #20
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr
 800e200:	20000010 	.word	0x20000010
	...

0800e210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <pxCurrentTCBConst2>)
 800e212:	6819      	ldr	r1, [r3, #0]
 800e214:	6808      	ldr	r0, [r1, #0]
 800e216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21a:	f380 8809 	msr	PSP, r0
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f04f 0000 	mov.w	r0, #0
 800e226:	f380 8811 	msr	BASEPRI, r0
 800e22a:	4770      	bx	lr
 800e22c:	f3af 8000 	nop.w

0800e230 <pxCurrentTCBConst2>:
 800e230:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e234:	bf00      	nop
 800e236:	bf00      	nop

0800e238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e238:	4808      	ldr	r0, [pc, #32]	; (800e25c <prvPortStartFirstTask+0x24>)
 800e23a:	6800      	ldr	r0, [r0, #0]
 800e23c:	6800      	ldr	r0, [r0, #0]
 800e23e:	f380 8808 	msr	MSP, r0
 800e242:	f04f 0000 	mov.w	r0, #0
 800e246:	f380 8814 	msr	CONTROL, r0
 800e24a:	b662      	cpsie	i
 800e24c:	b661      	cpsie	f
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	df00      	svc	0
 800e258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e25a:	bf00      	nop
 800e25c:	e000ed08 	.word	0xe000ed08

0800e260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e266:	4b46      	ldr	r3, [pc, #280]	; (800e380 <xPortStartScheduler+0x120>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a46      	ldr	r2, [pc, #280]	; (800e384 <xPortStartScheduler+0x124>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d10a      	bne.n	800e286 <xPortStartScheduler+0x26>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	613b      	str	r3, [r7, #16]
}
 800e282:	bf00      	nop
 800e284:	e7fe      	b.n	800e284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e286:	4b3e      	ldr	r3, [pc, #248]	; (800e380 <xPortStartScheduler+0x120>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a3f      	ldr	r2, [pc, #252]	; (800e388 <xPortStartScheduler+0x128>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10a      	bne.n	800e2a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	60fb      	str	r3, [r7, #12]
}
 800e2a2:	bf00      	nop
 800e2a4:	e7fe      	b.n	800e2a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2a6:	4b39      	ldr	r3, [pc, #228]	; (800e38c <xPortStartScheduler+0x12c>)
 800e2a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	22ff      	movs	r2, #255	; 0xff
 800e2b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2c0:	78fb      	ldrb	r3, [r7, #3]
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	4b31      	ldr	r3, [pc, #196]	; (800e390 <xPortStartScheduler+0x130>)
 800e2cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2ce:	4b31      	ldr	r3, [pc, #196]	; (800e394 <xPortStartScheduler+0x134>)
 800e2d0:	2207      	movs	r2, #7
 800e2d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2d4:	e009      	b.n	800e2ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e2d6:	4b2f      	ldr	r3, [pc, #188]	; (800e394 <xPortStartScheduler+0x134>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	4a2d      	ldr	r2, [pc, #180]	; (800e394 <xPortStartScheduler+0x134>)
 800e2de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2f2:	2b80      	cmp	r3, #128	; 0x80
 800e2f4:	d0ef      	beq.n	800e2d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2f6:	4b27      	ldr	r3, [pc, #156]	; (800e394 <xPortStartScheduler+0x134>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f1c3 0307 	rsb	r3, r3, #7
 800e2fe:	2b04      	cmp	r3, #4
 800e300:	d00a      	beq.n	800e318 <xPortStartScheduler+0xb8>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	60bb      	str	r3, [r7, #8]
}
 800e314:	bf00      	nop
 800e316:	e7fe      	b.n	800e316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e318:	4b1e      	ldr	r3, [pc, #120]	; (800e394 <xPortStartScheduler+0x134>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	021b      	lsls	r3, r3, #8
 800e31e:	4a1d      	ldr	r2, [pc, #116]	; (800e394 <xPortStartScheduler+0x134>)
 800e320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e322:	4b1c      	ldr	r3, [pc, #112]	; (800e394 <xPortStartScheduler+0x134>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e32a:	4a1a      	ldr	r2, [pc, #104]	; (800e394 <xPortStartScheduler+0x134>)
 800e32c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	b2da      	uxtb	r2, r3
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e336:	4b18      	ldr	r3, [pc, #96]	; (800e398 <xPortStartScheduler+0x138>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a17      	ldr	r2, [pc, #92]	; (800e398 <xPortStartScheduler+0x138>)
 800e33c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e342:	4b15      	ldr	r3, [pc, #84]	; (800e398 <xPortStartScheduler+0x138>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a14      	ldr	r2, [pc, #80]	; (800e398 <xPortStartScheduler+0x138>)
 800e348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e34c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e34e:	f000 f8dd 	bl	800e50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e352:	4b12      	ldr	r3, [pc, #72]	; (800e39c <xPortStartScheduler+0x13c>)
 800e354:	2200      	movs	r2, #0
 800e356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e358:	f000 f8fc 	bl	800e554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e35c:	4b10      	ldr	r3, [pc, #64]	; (800e3a0 <xPortStartScheduler+0x140>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a0f      	ldr	r2, [pc, #60]	; (800e3a0 <xPortStartScheduler+0x140>)
 800e362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e368:	f7ff ff66 	bl	800e238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e36c:	f7fe fc7c 	bl	800cc68 <vTaskSwitchContext>
	prvTaskExitError();
 800e370:	f7ff ff1c 	bl	800e1ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3718      	adds	r7, #24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	e000ed00 	.word	0xe000ed00
 800e384:	410fc271 	.word	0x410fc271
 800e388:	410fc270 	.word	0x410fc270
 800e38c:	e000e400 	.word	0xe000e400
 800e390:	20001624 	.word	0x20001624
 800e394:	20001628 	.word	0x20001628
 800e398:	e000ed20 	.word	0xe000ed20
 800e39c:	20000010 	.word	0x20000010
 800e3a0:	e000ef34 	.word	0xe000ef34

0800e3a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	607b      	str	r3, [r7, #4]
}
 800e3bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3be:	4b0f      	ldr	r3, [pc, #60]	; (800e3fc <vPortEnterCritical+0x58>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	4a0d      	ldr	r2, [pc, #52]	; (800e3fc <vPortEnterCritical+0x58>)
 800e3c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3c8:	4b0c      	ldr	r3, [pc, #48]	; (800e3fc <vPortEnterCritical+0x58>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d10f      	bne.n	800e3f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3d0:	4b0b      	ldr	r3, [pc, #44]	; (800e400 <vPortEnterCritical+0x5c>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00a      	beq.n	800e3f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	603b      	str	r3, [r7, #0]
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <vPortEnterCritical+0x4a>
	}
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	20000010 	.word	0x20000010
 800e400:	e000ed04 	.word	0xe000ed04

0800e404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e40a:	4b12      	ldr	r3, [pc, #72]	; (800e454 <vPortExitCritical+0x50>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10a      	bne.n	800e428 <vPortExitCritical+0x24>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	607b      	str	r3, [r7, #4]
}
 800e424:	bf00      	nop
 800e426:	e7fe      	b.n	800e426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e428:	4b0a      	ldr	r3, [pc, #40]	; (800e454 <vPortExitCritical+0x50>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	4a09      	ldr	r2, [pc, #36]	; (800e454 <vPortExitCritical+0x50>)
 800e430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e432:	4b08      	ldr	r3, [pc, #32]	; (800e454 <vPortExitCritical+0x50>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d105      	bne.n	800e446 <vPortExitCritical+0x42>
 800e43a:	2300      	movs	r3, #0
 800e43c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	f383 8811 	msr	BASEPRI, r3
}
 800e444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e446:	bf00      	nop
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	20000010 	.word	0x20000010
	...

0800e460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e460:	f3ef 8009 	mrs	r0, PSP
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	4b15      	ldr	r3, [pc, #84]	; (800e4c0 <pxCurrentTCBConst>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	f01e 0f10 	tst.w	lr, #16
 800e470:	bf08      	it	eq
 800e472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47a:	6010      	str	r0, [r2, #0]
 800e47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e480:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e484:	f380 8811 	msr	BASEPRI, r0
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f7fe fbea 	bl	800cc68 <vTaskSwitchContext>
 800e494:	f04f 0000 	mov.w	r0, #0
 800e498:	f380 8811 	msr	BASEPRI, r0
 800e49c:	bc09      	pop	{r0, r3}
 800e49e:	6819      	ldr	r1, [r3, #0]
 800e4a0:	6808      	ldr	r0, [r1, #0]
 800e4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a6:	f01e 0f10 	tst.w	lr, #16
 800e4aa:	bf08      	it	eq
 800e4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4b0:	f380 8809 	msr	PSP, r0
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	f3af 8000 	nop.w

0800e4c0 <pxCurrentTCBConst>:
 800e4c0:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4c4:	bf00      	nop
 800e4c6:	bf00      	nop

0800e4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	607b      	str	r3, [r7, #4]
}
 800e4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e4e2:	f7fe fb07 	bl	800caf4 <xTaskIncrementTick>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d003      	beq.n	800e4f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4ec:	4b06      	ldr	r3, [pc, #24]	; (800e508 <xPortSysTickHandler+0x40>)
 800e4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	f383 8811 	msr	BASEPRI, r3
}
 800e4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	e000ed04 	.word	0xe000ed04

0800e50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e510:	4b0b      	ldr	r3, [pc, #44]	; (800e540 <vPortSetupTimerInterrupt+0x34>)
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e516:	4b0b      	ldr	r3, [pc, #44]	; (800e544 <vPortSetupTimerInterrupt+0x38>)
 800e518:	2200      	movs	r2, #0
 800e51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <vPortSetupTimerInterrupt+0x3c>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a0a      	ldr	r2, [pc, #40]	; (800e54c <vPortSetupTimerInterrupt+0x40>)
 800e522:	fba2 2303 	umull	r2, r3, r2, r3
 800e526:	099b      	lsrs	r3, r3, #6
 800e528:	4a09      	ldr	r2, [pc, #36]	; (800e550 <vPortSetupTimerInterrupt+0x44>)
 800e52a:	3b01      	subs	r3, #1
 800e52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e52e:	4b04      	ldr	r3, [pc, #16]	; (800e540 <vPortSetupTimerInterrupt+0x34>)
 800e530:	2207      	movs	r2, #7
 800e532:	601a      	str	r2, [r3, #0]
}
 800e534:	bf00      	nop
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	e000e010 	.word	0xe000e010
 800e544:	e000e018 	.word	0xe000e018
 800e548:	20000004 	.word	0x20000004
 800e54c:	10624dd3 	.word	0x10624dd3
 800e550:	e000e014 	.word	0xe000e014

0800e554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e564 <vPortEnableVFP+0x10>
 800e558:	6801      	ldr	r1, [r0, #0]
 800e55a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e55e:	6001      	str	r1, [r0, #0]
 800e560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e562:	bf00      	nop
 800e564:	e000ed88 	.word	0xe000ed88

0800e568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e56e:	f3ef 8305 	mrs	r3, IPSR
 800e572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b0f      	cmp	r3, #15
 800e578:	d914      	bls.n	800e5a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e57a:	4a17      	ldr	r2, [pc, #92]	; (800e5d8 <vPortValidateInterruptPriority+0x70>)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4413      	add	r3, r2
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e584:	4b15      	ldr	r3, [pc, #84]	; (800e5dc <vPortValidateInterruptPriority+0x74>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	7afa      	ldrb	r2, [r7, #11]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d20a      	bcs.n	800e5a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	607b      	str	r3, [r7, #4]
}
 800e5a0:	bf00      	nop
 800e5a2:	e7fe      	b.n	800e5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e5a4:	4b0e      	ldr	r3, [pc, #56]	; (800e5e0 <vPortValidateInterruptPriority+0x78>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e5ac:	4b0d      	ldr	r3, [pc, #52]	; (800e5e4 <vPortValidateInterruptPriority+0x7c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d90a      	bls.n	800e5ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	603b      	str	r3, [r7, #0]
}
 800e5c6:	bf00      	nop
 800e5c8:	e7fe      	b.n	800e5c8 <vPortValidateInterruptPriority+0x60>
	}
 800e5ca:	bf00      	nop
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	e000e3f0 	.word	0xe000e3f0
 800e5dc:	20001624 	.word	0x20001624
 800e5e0:	e000ed0c 	.word	0xe000ed0c
 800e5e4:	20001628 	.word	0x20001628

0800e5e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08a      	sub	sp, #40	; 0x28
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e5f4:	f7fe f9b0 	bl	800c958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e5f8:	4b5b      	ldr	r3, [pc, #364]	; (800e768 <pvPortMalloc+0x180>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e600:	f000 f920 	bl	800e844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e604:	4b59      	ldr	r3, [pc, #356]	; (800e76c <pvPortMalloc+0x184>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4013      	ands	r3, r2
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f040 8093 	bne.w	800e738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d01d      	beq.n	800e654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e618:	2208      	movs	r2, #8
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4413      	add	r3, r2
 800e61e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f003 0307 	and.w	r3, r3, #7
 800e626:	2b00      	cmp	r3, #0
 800e628:	d014      	beq.n	800e654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f023 0307 	bic.w	r3, r3, #7
 800e630:	3308      	adds	r3, #8
 800e632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f003 0307 	and.w	r3, r3, #7
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00a      	beq.n	800e654 <pvPortMalloc+0x6c>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	617b      	str	r3, [r7, #20]
}
 800e650:	bf00      	nop
 800e652:	e7fe      	b.n	800e652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d06e      	beq.n	800e738 <pvPortMalloc+0x150>
 800e65a:	4b45      	ldr	r3, [pc, #276]	; (800e770 <pvPortMalloc+0x188>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	429a      	cmp	r2, r3
 800e662:	d869      	bhi.n	800e738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e664:	4b43      	ldr	r3, [pc, #268]	; (800e774 <pvPortMalloc+0x18c>)
 800e666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e668:	4b42      	ldr	r3, [pc, #264]	; (800e774 <pvPortMalloc+0x18c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e66e:	e004      	b.n	800e67a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	429a      	cmp	r2, r3
 800e682:	d903      	bls.n	800e68c <pvPortMalloc+0xa4>
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1f1      	bne.n	800e670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e68c:	4b36      	ldr	r3, [pc, #216]	; (800e768 <pvPortMalloc+0x180>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e692:	429a      	cmp	r2, r3
 800e694:	d050      	beq.n	800e738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2208      	movs	r2, #8
 800e69c:	4413      	add	r3, r2
 800e69e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	1ad2      	subs	r2, r2, r3
 800e6b0:	2308      	movs	r3, #8
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d91f      	bls.n	800e6f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4413      	add	r3, r2
 800e6be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	f003 0307 	and.w	r3, r3, #7
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00a      	beq.n	800e6e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	613b      	str	r3, [r7, #16]
}
 800e6dc:	bf00      	nop
 800e6de:	e7fe      	b.n	800e6de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	685a      	ldr	r2, [r3, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	1ad2      	subs	r2, r2, r3
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e6f2:	69b8      	ldr	r0, [r7, #24]
 800e6f4:	f000 f908 	bl	800e908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e6f8:	4b1d      	ldr	r3, [pc, #116]	; (800e770 <pvPortMalloc+0x188>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	4a1b      	ldr	r2, [pc, #108]	; (800e770 <pvPortMalloc+0x188>)
 800e704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e706:	4b1a      	ldr	r3, [pc, #104]	; (800e770 <pvPortMalloc+0x188>)
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	4b1b      	ldr	r3, [pc, #108]	; (800e778 <pvPortMalloc+0x190>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d203      	bcs.n	800e71a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e712:	4b17      	ldr	r3, [pc, #92]	; (800e770 <pvPortMalloc+0x188>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a18      	ldr	r2, [pc, #96]	; (800e778 <pvPortMalloc+0x190>)
 800e718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	4b13      	ldr	r3, [pc, #76]	; (800e76c <pvPortMalloc+0x184>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	431a      	orrs	r2, r3
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	2200      	movs	r2, #0
 800e72c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e72e:	4b13      	ldr	r3, [pc, #76]	; (800e77c <pvPortMalloc+0x194>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	3301      	adds	r3, #1
 800e734:	4a11      	ldr	r2, [pc, #68]	; (800e77c <pvPortMalloc+0x194>)
 800e736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e738:	f7fe f91c 	bl	800c974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	f003 0307 	and.w	r3, r3, #7
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00a      	beq.n	800e75c <pvPortMalloc+0x174>
	__asm volatile
 800e746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	60fb      	str	r3, [r7, #12]
}
 800e758:	bf00      	nop
 800e75a:	e7fe      	b.n	800e75a <pvPortMalloc+0x172>
	return pvReturn;
 800e75c:	69fb      	ldr	r3, [r7, #28]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3728      	adds	r7, #40	; 0x28
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	20009574 	.word	0x20009574
 800e76c:	20009588 	.word	0x20009588
 800e770:	20009578 	.word	0x20009578
 800e774:	2000956c 	.word	0x2000956c
 800e778:	2000957c 	.word	0x2000957c
 800e77c:	20009580 	.word	0x20009580

0800e780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d04d      	beq.n	800e82e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e792:	2308      	movs	r3, #8
 800e794:	425b      	negs	r3, r3
 800e796:	697a      	ldr	r2, [r7, #20]
 800e798:	4413      	add	r3, r2
 800e79a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	685a      	ldr	r2, [r3, #4]
 800e7a4:	4b24      	ldr	r3, [pc, #144]	; (800e838 <vPortFree+0xb8>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d10a      	bne.n	800e7c4 <vPortFree+0x44>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	60fb      	str	r3, [r7, #12]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00a      	beq.n	800e7e2 <vPortFree+0x62>
	__asm volatile
 800e7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	60bb      	str	r3, [r7, #8]
}
 800e7de:	bf00      	nop
 800e7e0:	e7fe      	b.n	800e7e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	685a      	ldr	r2, [r3, #4]
 800e7e6:	4b14      	ldr	r3, [pc, #80]	; (800e838 <vPortFree+0xb8>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d01e      	beq.n	800e82e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d11a      	bne.n	800e82e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	685a      	ldr	r2, [r3, #4]
 800e7fc:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <vPortFree+0xb8>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	43db      	mvns	r3, r3
 800e802:	401a      	ands	r2, r3
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e808:	f7fe f8a6 	bl	800c958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	4b0a      	ldr	r3, [pc, #40]	; (800e83c <vPortFree+0xbc>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4413      	add	r3, r2
 800e816:	4a09      	ldr	r2, [pc, #36]	; (800e83c <vPortFree+0xbc>)
 800e818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e81a:	6938      	ldr	r0, [r7, #16]
 800e81c:	f000 f874 	bl	800e908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <vPortFree+0xc0>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	3301      	adds	r3, #1
 800e826:	4a06      	ldr	r2, [pc, #24]	; (800e840 <vPortFree+0xc0>)
 800e828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e82a:	f7fe f8a3 	bl	800c974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e82e:	bf00      	nop
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20009588 	.word	0x20009588
 800e83c:	20009578 	.word	0x20009578
 800e840:	20009584 	.word	0x20009584

0800e844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e84a:	f647 7340 	movw	r3, #32576	; 0x7f40
 800e84e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e850:	4b27      	ldr	r3, [pc, #156]	; (800e8f0 <prvHeapInit+0xac>)
 800e852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f003 0307 	and.w	r3, r3, #7
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00c      	beq.n	800e878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3307      	adds	r3, #7
 800e862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f023 0307 	bic.w	r3, r3, #7
 800e86a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	4a1f      	ldr	r2, [pc, #124]	; (800e8f0 <prvHeapInit+0xac>)
 800e874:	4413      	add	r3, r2
 800e876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e87c:	4a1d      	ldr	r2, [pc, #116]	; (800e8f4 <prvHeapInit+0xb0>)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e882:	4b1c      	ldr	r3, [pc, #112]	; (800e8f4 <prvHeapInit+0xb0>)
 800e884:	2200      	movs	r2, #0
 800e886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	4413      	add	r3, r2
 800e88e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e890:	2208      	movs	r2, #8
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	1a9b      	subs	r3, r3, r2
 800e896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f023 0307 	bic.w	r3, r3, #7
 800e89e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	4a15      	ldr	r2, [pc, #84]	; (800e8f8 <prvHeapInit+0xb4>)
 800e8a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8a6:	4b14      	ldr	r3, [pc, #80]	; (800e8f8 <prvHeapInit+0xb4>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8ae:	4b12      	ldr	r3, [pc, #72]	; (800e8f8 <prvHeapInit+0xb4>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e8c4:	4b0c      	ldr	r3, [pc, #48]	; (800e8f8 <prvHeapInit+0xb4>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	4a0a      	ldr	r2, [pc, #40]	; (800e8fc <prvHeapInit+0xb8>)
 800e8d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	4a09      	ldr	r2, [pc, #36]	; (800e900 <prvHeapInit+0xbc>)
 800e8da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e8dc:	4b09      	ldr	r3, [pc, #36]	; (800e904 <prvHeapInit+0xc0>)
 800e8de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e8e2:	601a      	str	r2, [r3, #0]
}
 800e8e4:	bf00      	nop
 800e8e6:	3714      	adds	r7, #20
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr
 800e8f0:	2000162c 	.word	0x2000162c
 800e8f4:	2000956c 	.word	0x2000956c
 800e8f8:	20009574 	.word	0x20009574
 800e8fc:	2000957c 	.word	0x2000957c
 800e900:	20009578 	.word	0x20009578
 800e904:	20009588 	.word	0x20009588

0800e908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e910:	4b28      	ldr	r3, [pc, #160]	; (800e9b4 <prvInsertBlockIntoFreeList+0xac>)
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	e002      	b.n	800e91c <prvInsertBlockIntoFreeList+0x14>
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	429a      	cmp	r2, r3
 800e924:	d8f7      	bhi.n	800e916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	4413      	add	r3, r2
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	429a      	cmp	r2, r3
 800e936:	d108      	bne.n	800e94a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	685a      	ldr	r2, [r3, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	441a      	add	r2, r3
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	441a      	add	r2, r3
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d118      	bne.n	800e990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4b15      	ldr	r3, [pc, #84]	; (800e9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	429a      	cmp	r2, r3
 800e968:	d00d      	beq.n	800e986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685a      	ldr	r2, [r3, #4]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	441a      	add	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	e008      	b.n	800e998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e986:	4b0c      	ldr	r3, [pc, #48]	; (800e9b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	e003      	b.n	800e998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d002      	beq.n	800e9a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9a6:	bf00      	nop
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	2000956c 	.word	0x2000956c
 800e9b8:	20009574 	.word	0x20009574

0800e9bc <__cvt>:
 800e9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c0:	ec55 4b10 	vmov	r4, r5, d0
 800e9c4:	2d00      	cmp	r5, #0
 800e9c6:	460e      	mov	r6, r1
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	462b      	mov	r3, r5
 800e9cc:	bfbb      	ittet	lt
 800e9ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e9d2:	461d      	movlt	r5, r3
 800e9d4:	2300      	movge	r3, #0
 800e9d6:	232d      	movlt	r3, #45	; 0x2d
 800e9d8:	700b      	strb	r3, [r1, #0]
 800e9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e9e0:	4691      	mov	r9, r2
 800e9e2:	f023 0820 	bic.w	r8, r3, #32
 800e9e6:	bfbc      	itt	lt
 800e9e8:	4622      	movlt	r2, r4
 800e9ea:	4614      	movlt	r4, r2
 800e9ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9f0:	d005      	beq.n	800e9fe <__cvt+0x42>
 800e9f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e9f6:	d100      	bne.n	800e9fa <__cvt+0x3e>
 800e9f8:	3601      	adds	r6, #1
 800e9fa:	2102      	movs	r1, #2
 800e9fc:	e000      	b.n	800ea00 <__cvt+0x44>
 800e9fe:	2103      	movs	r1, #3
 800ea00:	ab03      	add	r3, sp, #12
 800ea02:	9301      	str	r3, [sp, #4]
 800ea04:	ab02      	add	r3, sp, #8
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	ec45 4b10 	vmov	d0, r4, r5
 800ea0c:	4653      	mov	r3, sl
 800ea0e:	4632      	mov	r2, r6
 800ea10:	f000 fe9a 	bl	800f748 <_dtoa_r>
 800ea14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ea18:	4607      	mov	r7, r0
 800ea1a:	d102      	bne.n	800ea22 <__cvt+0x66>
 800ea1c:	f019 0f01 	tst.w	r9, #1
 800ea20:	d022      	beq.n	800ea68 <__cvt+0xac>
 800ea22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea26:	eb07 0906 	add.w	r9, r7, r6
 800ea2a:	d110      	bne.n	800ea4e <__cvt+0x92>
 800ea2c:	783b      	ldrb	r3, [r7, #0]
 800ea2e:	2b30      	cmp	r3, #48	; 0x30
 800ea30:	d10a      	bne.n	800ea48 <__cvt+0x8c>
 800ea32:	2200      	movs	r2, #0
 800ea34:	2300      	movs	r3, #0
 800ea36:	4620      	mov	r0, r4
 800ea38:	4629      	mov	r1, r5
 800ea3a:	f7f2 f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea3e:	b918      	cbnz	r0, 800ea48 <__cvt+0x8c>
 800ea40:	f1c6 0601 	rsb	r6, r6, #1
 800ea44:	f8ca 6000 	str.w	r6, [sl]
 800ea48:	f8da 3000 	ldr.w	r3, [sl]
 800ea4c:	4499      	add	r9, r3
 800ea4e:	2200      	movs	r2, #0
 800ea50:	2300      	movs	r3, #0
 800ea52:	4620      	mov	r0, r4
 800ea54:	4629      	mov	r1, r5
 800ea56:	f7f2 f83f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea5a:	b108      	cbz	r0, 800ea60 <__cvt+0xa4>
 800ea5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea60:	2230      	movs	r2, #48	; 0x30
 800ea62:	9b03      	ldr	r3, [sp, #12]
 800ea64:	454b      	cmp	r3, r9
 800ea66:	d307      	bcc.n	800ea78 <__cvt+0xbc>
 800ea68:	9b03      	ldr	r3, [sp, #12]
 800ea6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea6c:	1bdb      	subs	r3, r3, r7
 800ea6e:	4638      	mov	r0, r7
 800ea70:	6013      	str	r3, [r2, #0]
 800ea72:	b004      	add	sp, #16
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	1c59      	adds	r1, r3, #1
 800ea7a:	9103      	str	r1, [sp, #12]
 800ea7c:	701a      	strb	r2, [r3, #0]
 800ea7e:	e7f0      	b.n	800ea62 <__cvt+0xa6>

0800ea80 <__exponent>:
 800ea80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea82:	4603      	mov	r3, r0
 800ea84:	2900      	cmp	r1, #0
 800ea86:	bfb8      	it	lt
 800ea88:	4249      	neglt	r1, r1
 800ea8a:	f803 2b02 	strb.w	r2, [r3], #2
 800ea8e:	bfb4      	ite	lt
 800ea90:	222d      	movlt	r2, #45	; 0x2d
 800ea92:	222b      	movge	r2, #43	; 0x2b
 800ea94:	2909      	cmp	r1, #9
 800ea96:	7042      	strb	r2, [r0, #1]
 800ea98:	dd2a      	ble.n	800eaf0 <__exponent+0x70>
 800ea9a:	f10d 0207 	add.w	r2, sp, #7
 800ea9e:	4617      	mov	r7, r2
 800eaa0:	260a      	movs	r6, #10
 800eaa2:	4694      	mov	ip, r2
 800eaa4:	fb91 f5f6 	sdiv	r5, r1, r6
 800eaa8:	fb06 1415 	mls	r4, r6, r5, r1
 800eaac:	3430      	adds	r4, #48	; 0x30
 800eaae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800eab2:	460c      	mov	r4, r1
 800eab4:	2c63      	cmp	r4, #99	; 0x63
 800eab6:	f102 32ff 	add.w	r2, r2, #4294967295
 800eaba:	4629      	mov	r1, r5
 800eabc:	dcf1      	bgt.n	800eaa2 <__exponent+0x22>
 800eabe:	3130      	adds	r1, #48	; 0x30
 800eac0:	f1ac 0402 	sub.w	r4, ip, #2
 800eac4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eac8:	1c41      	adds	r1, r0, #1
 800eaca:	4622      	mov	r2, r4
 800eacc:	42ba      	cmp	r2, r7
 800eace:	d30a      	bcc.n	800eae6 <__exponent+0x66>
 800ead0:	f10d 0209 	add.w	r2, sp, #9
 800ead4:	eba2 020c 	sub.w	r2, r2, ip
 800ead8:	42bc      	cmp	r4, r7
 800eada:	bf88      	it	hi
 800eadc:	2200      	movhi	r2, #0
 800eade:	4413      	add	r3, r2
 800eae0:	1a18      	subs	r0, r3, r0
 800eae2:	b003      	add	sp, #12
 800eae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eae6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eaea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800eaee:	e7ed      	b.n	800eacc <__exponent+0x4c>
 800eaf0:	2330      	movs	r3, #48	; 0x30
 800eaf2:	3130      	adds	r1, #48	; 0x30
 800eaf4:	7083      	strb	r3, [r0, #2]
 800eaf6:	70c1      	strb	r1, [r0, #3]
 800eaf8:	1d03      	adds	r3, r0, #4
 800eafa:	e7f1      	b.n	800eae0 <__exponent+0x60>

0800eafc <_printf_float>:
 800eafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	ed2d 8b02 	vpush	{d8}
 800eb04:	b08d      	sub	sp, #52	; 0x34
 800eb06:	460c      	mov	r4, r1
 800eb08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb0c:	4616      	mov	r6, r2
 800eb0e:	461f      	mov	r7, r3
 800eb10:	4605      	mov	r5, r0
 800eb12:	f000 fcb5 	bl	800f480 <_localeconv_r>
 800eb16:	f8d0 a000 	ldr.w	sl, [r0]
 800eb1a:	4650      	mov	r0, sl
 800eb1c:	f7f1 fbb0 	bl	8000280 <strlen>
 800eb20:	2300      	movs	r3, #0
 800eb22:	930a      	str	r3, [sp, #40]	; 0x28
 800eb24:	6823      	ldr	r3, [r4, #0]
 800eb26:	9305      	str	r3, [sp, #20]
 800eb28:	f8d8 3000 	ldr.w	r3, [r8]
 800eb2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eb30:	3307      	adds	r3, #7
 800eb32:	f023 0307 	bic.w	r3, r3, #7
 800eb36:	f103 0208 	add.w	r2, r3, #8
 800eb3a:	f8c8 2000 	str.w	r2, [r8]
 800eb3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb46:	9307      	str	r3, [sp, #28]
 800eb48:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb4c:	ee08 0a10 	vmov	s16, r0
 800eb50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800eb54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb58:	4b9e      	ldr	r3, [pc, #632]	; (800edd4 <_printf_float+0x2d8>)
 800eb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb5e:	f7f1 ffed 	bl	8000b3c <__aeabi_dcmpun>
 800eb62:	bb88      	cbnz	r0, 800ebc8 <_printf_float+0xcc>
 800eb64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb68:	4b9a      	ldr	r3, [pc, #616]	; (800edd4 <_printf_float+0x2d8>)
 800eb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb6e:	f7f1 ffc7 	bl	8000b00 <__aeabi_dcmple>
 800eb72:	bb48      	cbnz	r0, 800ebc8 <_printf_float+0xcc>
 800eb74:	2200      	movs	r2, #0
 800eb76:	2300      	movs	r3, #0
 800eb78:	4640      	mov	r0, r8
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	f7f1 ffb6 	bl	8000aec <__aeabi_dcmplt>
 800eb80:	b110      	cbz	r0, 800eb88 <_printf_float+0x8c>
 800eb82:	232d      	movs	r3, #45	; 0x2d
 800eb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb88:	4a93      	ldr	r2, [pc, #588]	; (800edd8 <_printf_float+0x2dc>)
 800eb8a:	4b94      	ldr	r3, [pc, #592]	; (800eddc <_printf_float+0x2e0>)
 800eb8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eb90:	bf94      	ite	ls
 800eb92:	4690      	movls	r8, r2
 800eb94:	4698      	movhi	r8, r3
 800eb96:	2303      	movs	r3, #3
 800eb98:	6123      	str	r3, [r4, #16]
 800eb9a:	9b05      	ldr	r3, [sp, #20]
 800eb9c:	f023 0304 	bic.w	r3, r3, #4
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	f04f 0900 	mov.w	r9, #0
 800eba6:	9700      	str	r7, [sp, #0]
 800eba8:	4633      	mov	r3, r6
 800ebaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800ebac:	4621      	mov	r1, r4
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f000 f9da 	bl	800ef68 <_printf_common>
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	f040 8090 	bne.w	800ecda <_printf_float+0x1de>
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	b00d      	add	sp, #52	; 0x34
 800ebc0:	ecbd 8b02 	vpop	{d8}
 800ebc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc8:	4642      	mov	r2, r8
 800ebca:	464b      	mov	r3, r9
 800ebcc:	4640      	mov	r0, r8
 800ebce:	4649      	mov	r1, r9
 800ebd0:	f7f1 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 800ebd4:	b140      	cbz	r0, 800ebe8 <_printf_float+0xec>
 800ebd6:	464b      	mov	r3, r9
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	bfbc      	itt	lt
 800ebdc:	232d      	movlt	r3, #45	; 0x2d
 800ebde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ebe2:	4a7f      	ldr	r2, [pc, #508]	; (800ede0 <_printf_float+0x2e4>)
 800ebe4:	4b7f      	ldr	r3, [pc, #508]	; (800ede4 <_printf_float+0x2e8>)
 800ebe6:	e7d1      	b.n	800eb8c <_printf_float+0x90>
 800ebe8:	6863      	ldr	r3, [r4, #4]
 800ebea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ebee:	9206      	str	r2, [sp, #24]
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	d13f      	bne.n	800ec74 <_printf_float+0x178>
 800ebf4:	2306      	movs	r3, #6
 800ebf6:	6063      	str	r3, [r4, #4]
 800ebf8:	9b05      	ldr	r3, [sp, #20]
 800ebfa:	6861      	ldr	r1, [r4, #4]
 800ebfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ec00:	2300      	movs	r3, #0
 800ec02:	9303      	str	r3, [sp, #12]
 800ec04:	ab0a      	add	r3, sp, #40	; 0x28
 800ec06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ec0a:	ab09      	add	r3, sp, #36	; 0x24
 800ec0c:	ec49 8b10 	vmov	d0, r8, r9
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	6022      	str	r2, [r4, #0]
 800ec14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec18:	4628      	mov	r0, r5
 800ec1a:	f7ff fecf 	bl	800e9bc <__cvt>
 800ec1e:	9b06      	ldr	r3, [sp, #24]
 800ec20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec22:	2b47      	cmp	r3, #71	; 0x47
 800ec24:	4680      	mov	r8, r0
 800ec26:	d108      	bne.n	800ec3a <_printf_float+0x13e>
 800ec28:	1cc8      	adds	r0, r1, #3
 800ec2a:	db02      	blt.n	800ec32 <_printf_float+0x136>
 800ec2c:	6863      	ldr	r3, [r4, #4]
 800ec2e:	4299      	cmp	r1, r3
 800ec30:	dd41      	ble.n	800ecb6 <_printf_float+0x1ba>
 800ec32:	f1ab 0302 	sub.w	r3, fp, #2
 800ec36:	fa5f fb83 	uxtb.w	fp, r3
 800ec3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec3e:	d820      	bhi.n	800ec82 <_printf_float+0x186>
 800ec40:	3901      	subs	r1, #1
 800ec42:	465a      	mov	r2, fp
 800ec44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec48:	9109      	str	r1, [sp, #36]	; 0x24
 800ec4a:	f7ff ff19 	bl	800ea80 <__exponent>
 800ec4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec50:	1813      	adds	r3, r2, r0
 800ec52:	2a01      	cmp	r2, #1
 800ec54:	4681      	mov	r9, r0
 800ec56:	6123      	str	r3, [r4, #16]
 800ec58:	dc02      	bgt.n	800ec60 <_printf_float+0x164>
 800ec5a:	6822      	ldr	r2, [r4, #0]
 800ec5c:	07d2      	lsls	r2, r2, #31
 800ec5e:	d501      	bpl.n	800ec64 <_printf_float+0x168>
 800ec60:	3301      	adds	r3, #1
 800ec62:	6123      	str	r3, [r4, #16]
 800ec64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d09c      	beq.n	800eba6 <_printf_float+0xaa>
 800ec6c:	232d      	movs	r3, #45	; 0x2d
 800ec6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec72:	e798      	b.n	800eba6 <_printf_float+0xaa>
 800ec74:	9a06      	ldr	r2, [sp, #24]
 800ec76:	2a47      	cmp	r2, #71	; 0x47
 800ec78:	d1be      	bne.n	800ebf8 <_printf_float+0xfc>
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1bc      	bne.n	800ebf8 <_printf_float+0xfc>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e7b9      	b.n	800ebf6 <_printf_float+0xfa>
 800ec82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ec86:	d118      	bne.n	800ecba <_printf_float+0x1be>
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	6863      	ldr	r3, [r4, #4]
 800ec8c:	dd0b      	ble.n	800eca6 <_printf_float+0x1aa>
 800ec8e:	6121      	str	r1, [r4, #16]
 800ec90:	b913      	cbnz	r3, 800ec98 <_printf_float+0x19c>
 800ec92:	6822      	ldr	r2, [r4, #0]
 800ec94:	07d0      	lsls	r0, r2, #31
 800ec96:	d502      	bpl.n	800ec9e <_printf_float+0x1a2>
 800ec98:	3301      	adds	r3, #1
 800ec9a:	440b      	add	r3, r1
 800ec9c:	6123      	str	r3, [r4, #16]
 800ec9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800eca0:	f04f 0900 	mov.w	r9, #0
 800eca4:	e7de      	b.n	800ec64 <_printf_float+0x168>
 800eca6:	b913      	cbnz	r3, 800ecae <_printf_float+0x1b2>
 800eca8:	6822      	ldr	r2, [r4, #0]
 800ecaa:	07d2      	lsls	r2, r2, #31
 800ecac:	d501      	bpl.n	800ecb2 <_printf_float+0x1b6>
 800ecae:	3302      	adds	r3, #2
 800ecb0:	e7f4      	b.n	800ec9c <_printf_float+0x1a0>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e7f2      	b.n	800ec9c <_printf_float+0x1a0>
 800ecb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ecba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecbc:	4299      	cmp	r1, r3
 800ecbe:	db05      	blt.n	800eccc <_printf_float+0x1d0>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	6121      	str	r1, [r4, #16]
 800ecc4:	07d8      	lsls	r0, r3, #31
 800ecc6:	d5ea      	bpl.n	800ec9e <_printf_float+0x1a2>
 800ecc8:	1c4b      	adds	r3, r1, #1
 800ecca:	e7e7      	b.n	800ec9c <_printf_float+0x1a0>
 800eccc:	2900      	cmp	r1, #0
 800ecce:	bfd4      	ite	le
 800ecd0:	f1c1 0202 	rsble	r2, r1, #2
 800ecd4:	2201      	movgt	r2, #1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	e7e0      	b.n	800ec9c <_printf_float+0x1a0>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	055a      	lsls	r2, r3, #21
 800ecde:	d407      	bmi.n	800ecf0 <_printf_float+0x1f4>
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	4642      	mov	r2, r8
 800ece4:	4631      	mov	r1, r6
 800ece6:	4628      	mov	r0, r5
 800ece8:	47b8      	blx	r7
 800ecea:	3001      	adds	r0, #1
 800ecec:	d12c      	bne.n	800ed48 <_printf_float+0x24c>
 800ecee:	e764      	b.n	800ebba <_printf_float+0xbe>
 800ecf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ecf4:	f240 80e0 	bls.w	800eeb8 <_printf_float+0x3bc>
 800ecf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f7f1 feea 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d034      	beq.n	800ed72 <_printf_float+0x276>
 800ed08:	4a37      	ldr	r2, [pc, #220]	; (800ede8 <_printf_float+0x2ec>)
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	4628      	mov	r0, r5
 800ed10:	47b8      	blx	r7
 800ed12:	3001      	adds	r0, #1
 800ed14:	f43f af51 	beq.w	800ebba <_printf_float+0xbe>
 800ed18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	db02      	blt.n	800ed26 <_printf_float+0x22a>
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	07d8      	lsls	r0, r3, #31
 800ed24:	d510      	bpl.n	800ed48 <_printf_float+0x24c>
 800ed26:	ee18 3a10 	vmov	r3, s16
 800ed2a:	4652      	mov	r2, sl
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4628      	mov	r0, r5
 800ed30:	47b8      	blx	r7
 800ed32:	3001      	adds	r0, #1
 800ed34:	f43f af41 	beq.w	800ebba <_printf_float+0xbe>
 800ed38:	f04f 0800 	mov.w	r8, #0
 800ed3c:	f104 091a 	add.w	r9, r4, #26
 800ed40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed42:	3b01      	subs	r3, #1
 800ed44:	4543      	cmp	r3, r8
 800ed46:	dc09      	bgt.n	800ed5c <_printf_float+0x260>
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	079b      	lsls	r3, r3, #30
 800ed4c:	f100 8107 	bmi.w	800ef5e <_printf_float+0x462>
 800ed50:	68e0      	ldr	r0, [r4, #12]
 800ed52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed54:	4298      	cmp	r0, r3
 800ed56:	bfb8      	it	lt
 800ed58:	4618      	movlt	r0, r3
 800ed5a:	e730      	b.n	800ebbe <_printf_float+0xc2>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	464a      	mov	r2, r9
 800ed60:	4631      	mov	r1, r6
 800ed62:	4628      	mov	r0, r5
 800ed64:	47b8      	blx	r7
 800ed66:	3001      	adds	r0, #1
 800ed68:	f43f af27 	beq.w	800ebba <_printf_float+0xbe>
 800ed6c:	f108 0801 	add.w	r8, r8, #1
 800ed70:	e7e6      	b.n	800ed40 <_printf_float+0x244>
 800ed72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dc39      	bgt.n	800edec <_printf_float+0x2f0>
 800ed78:	4a1b      	ldr	r2, [pc, #108]	; (800ede8 <_printf_float+0x2ec>)
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	4628      	mov	r0, r5
 800ed80:	47b8      	blx	r7
 800ed82:	3001      	adds	r0, #1
 800ed84:	f43f af19 	beq.w	800ebba <_printf_float+0xbe>
 800ed88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	d102      	bne.n	800ed96 <_printf_float+0x29a>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	07d9      	lsls	r1, r3, #31
 800ed94:	d5d8      	bpl.n	800ed48 <_printf_float+0x24c>
 800ed96:	ee18 3a10 	vmov	r3, s16
 800ed9a:	4652      	mov	r2, sl
 800ed9c:	4631      	mov	r1, r6
 800ed9e:	4628      	mov	r0, r5
 800eda0:	47b8      	blx	r7
 800eda2:	3001      	adds	r0, #1
 800eda4:	f43f af09 	beq.w	800ebba <_printf_float+0xbe>
 800eda8:	f04f 0900 	mov.w	r9, #0
 800edac:	f104 0a1a 	add.w	sl, r4, #26
 800edb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edb2:	425b      	negs	r3, r3
 800edb4:	454b      	cmp	r3, r9
 800edb6:	dc01      	bgt.n	800edbc <_printf_float+0x2c0>
 800edb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edba:	e792      	b.n	800ece2 <_printf_float+0x1e6>
 800edbc:	2301      	movs	r3, #1
 800edbe:	4652      	mov	r2, sl
 800edc0:	4631      	mov	r1, r6
 800edc2:	4628      	mov	r0, r5
 800edc4:	47b8      	blx	r7
 800edc6:	3001      	adds	r0, #1
 800edc8:	f43f aef7 	beq.w	800ebba <_printf_float+0xbe>
 800edcc:	f109 0901 	add.w	r9, r9, #1
 800edd0:	e7ee      	b.n	800edb0 <_printf_float+0x2b4>
 800edd2:	bf00      	nop
 800edd4:	7fefffff 	.word	0x7fefffff
 800edd8:	08011ba8 	.word	0x08011ba8
 800eddc:	08011bac 	.word	0x08011bac
 800ede0:	08011bb0 	.word	0x08011bb0
 800ede4:	08011bb4 	.word	0x08011bb4
 800ede8:	08011bb8 	.word	0x08011bb8
 800edec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edf0:	429a      	cmp	r2, r3
 800edf2:	bfa8      	it	ge
 800edf4:	461a      	movge	r2, r3
 800edf6:	2a00      	cmp	r2, #0
 800edf8:	4691      	mov	r9, r2
 800edfa:	dc37      	bgt.n	800ee6c <_printf_float+0x370>
 800edfc:	f04f 0b00 	mov.w	fp, #0
 800ee00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee04:	f104 021a 	add.w	r2, r4, #26
 800ee08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee0a:	9305      	str	r3, [sp, #20]
 800ee0c:	eba3 0309 	sub.w	r3, r3, r9
 800ee10:	455b      	cmp	r3, fp
 800ee12:	dc33      	bgt.n	800ee7c <_printf_float+0x380>
 800ee14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	db3b      	blt.n	800ee94 <_printf_float+0x398>
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	07da      	lsls	r2, r3, #31
 800ee20:	d438      	bmi.n	800ee94 <_printf_float+0x398>
 800ee22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ee26:	eba2 0903 	sub.w	r9, r2, r3
 800ee2a:	9b05      	ldr	r3, [sp, #20]
 800ee2c:	1ad2      	subs	r2, r2, r3
 800ee2e:	4591      	cmp	r9, r2
 800ee30:	bfa8      	it	ge
 800ee32:	4691      	movge	r9, r2
 800ee34:	f1b9 0f00 	cmp.w	r9, #0
 800ee38:	dc35      	bgt.n	800eea6 <_printf_float+0x3aa>
 800ee3a:	f04f 0800 	mov.w	r8, #0
 800ee3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee42:	f104 0a1a 	add.w	sl, r4, #26
 800ee46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee4a:	1a9b      	subs	r3, r3, r2
 800ee4c:	eba3 0309 	sub.w	r3, r3, r9
 800ee50:	4543      	cmp	r3, r8
 800ee52:	f77f af79 	ble.w	800ed48 <_printf_float+0x24c>
 800ee56:	2301      	movs	r3, #1
 800ee58:	4652      	mov	r2, sl
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	47b8      	blx	r7
 800ee60:	3001      	adds	r0, #1
 800ee62:	f43f aeaa 	beq.w	800ebba <_printf_float+0xbe>
 800ee66:	f108 0801 	add.w	r8, r8, #1
 800ee6a:	e7ec      	b.n	800ee46 <_printf_float+0x34a>
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	4631      	mov	r1, r6
 800ee70:	4642      	mov	r2, r8
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b8      	blx	r7
 800ee76:	3001      	adds	r0, #1
 800ee78:	d1c0      	bne.n	800edfc <_printf_float+0x300>
 800ee7a:	e69e      	b.n	800ebba <_printf_float+0xbe>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	4631      	mov	r1, r6
 800ee80:	4628      	mov	r0, r5
 800ee82:	9205      	str	r2, [sp, #20]
 800ee84:	47b8      	blx	r7
 800ee86:	3001      	adds	r0, #1
 800ee88:	f43f ae97 	beq.w	800ebba <_printf_float+0xbe>
 800ee8c:	9a05      	ldr	r2, [sp, #20]
 800ee8e:	f10b 0b01 	add.w	fp, fp, #1
 800ee92:	e7b9      	b.n	800ee08 <_printf_float+0x30c>
 800ee94:	ee18 3a10 	vmov	r3, s16
 800ee98:	4652      	mov	r2, sl
 800ee9a:	4631      	mov	r1, r6
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	47b8      	blx	r7
 800eea0:	3001      	adds	r0, #1
 800eea2:	d1be      	bne.n	800ee22 <_printf_float+0x326>
 800eea4:	e689      	b.n	800ebba <_printf_float+0xbe>
 800eea6:	9a05      	ldr	r2, [sp, #20]
 800eea8:	464b      	mov	r3, r9
 800eeaa:	4442      	add	r2, r8
 800eeac:	4631      	mov	r1, r6
 800eeae:	4628      	mov	r0, r5
 800eeb0:	47b8      	blx	r7
 800eeb2:	3001      	adds	r0, #1
 800eeb4:	d1c1      	bne.n	800ee3a <_printf_float+0x33e>
 800eeb6:	e680      	b.n	800ebba <_printf_float+0xbe>
 800eeb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eeba:	2a01      	cmp	r2, #1
 800eebc:	dc01      	bgt.n	800eec2 <_printf_float+0x3c6>
 800eebe:	07db      	lsls	r3, r3, #31
 800eec0:	d53a      	bpl.n	800ef38 <_printf_float+0x43c>
 800eec2:	2301      	movs	r3, #1
 800eec4:	4642      	mov	r2, r8
 800eec6:	4631      	mov	r1, r6
 800eec8:	4628      	mov	r0, r5
 800eeca:	47b8      	blx	r7
 800eecc:	3001      	adds	r0, #1
 800eece:	f43f ae74 	beq.w	800ebba <_printf_float+0xbe>
 800eed2:	ee18 3a10 	vmov	r3, s16
 800eed6:	4652      	mov	r2, sl
 800eed8:	4631      	mov	r1, r6
 800eeda:	4628      	mov	r0, r5
 800eedc:	47b8      	blx	r7
 800eede:	3001      	adds	r0, #1
 800eee0:	f43f ae6b 	beq.w	800ebba <_printf_float+0xbe>
 800eee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eee8:	2200      	movs	r2, #0
 800eeea:	2300      	movs	r3, #0
 800eeec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800eef0:	f7f1 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800eef4:	b9d8      	cbnz	r0, 800ef2e <_printf_float+0x432>
 800eef6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eefa:	f108 0201 	add.w	r2, r8, #1
 800eefe:	4631      	mov	r1, r6
 800ef00:	4628      	mov	r0, r5
 800ef02:	47b8      	blx	r7
 800ef04:	3001      	adds	r0, #1
 800ef06:	d10e      	bne.n	800ef26 <_printf_float+0x42a>
 800ef08:	e657      	b.n	800ebba <_printf_float+0xbe>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	4652      	mov	r2, sl
 800ef0e:	4631      	mov	r1, r6
 800ef10:	4628      	mov	r0, r5
 800ef12:	47b8      	blx	r7
 800ef14:	3001      	adds	r0, #1
 800ef16:	f43f ae50 	beq.w	800ebba <_printf_float+0xbe>
 800ef1a:	f108 0801 	add.w	r8, r8, #1
 800ef1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef20:	3b01      	subs	r3, #1
 800ef22:	4543      	cmp	r3, r8
 800ef24:	dcf1      	bgt.n	800ef0a <_printf_float+0x40e>
 800ef26:	464b      	mov	r3, r9
 800ef28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef2c:	e6da      	b.n	800ece4 <_printf_float+0x1e8>
 800ef2e:	f04f 0800 	mov.w	r8, #0
 800ef32:	f104 0a1a 	add.w	sl, r4, #26
 800ef36:	e7f2      	b.n	800ef1e <_printf_float+0x422>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	4642      	mov	r2, r8
 800ef3c:	e7df      	b.n	800eefe <_printf_float+0x402>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	464a      	mov	r2, r9
 800ef42:	4631      	mov	r1, r6
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b8      	blx	r7
 800ef48:	3001      	adds	r0, #1
 800ef4a:	f43f ae36 	beq.w	800ebba <_printf_float+0xbe>
 800ef4e:	f108 0801 	add.w	r8, r8, #1
 800ef52:	68e3      	ldr	r3, [r4, #12]
 800ef54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef56:	1a5b      	subs	r3, r3, r1
 800ef58:	4543      	cmp	r3, r8
 800ef5a:	dcf0      	bgt.n	800ef3e <_printf_float+0x442>
 800ef5c:	e6f8      	b.n	800ed50 <_printf_float+0x254>
 800ef5e:	f04f 0800 	mov.w	r8, #0
 800ef62:	f104 0919 	add.w	r9, r4, #25
 800ef66:	e7f4      	b.n	800ef52 <_printf_float+0x456>

0800ef68 <_printf_common>:
 800ef68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef6c:	4616      	mov	r6, r2
 800ef6e:	4699      	mov	r9, r3
 800ef70:	688a      	ldr	r2, [r1, #8]
 800ef72:	690b      	ldr	r3, [r1, #16]
 800ef74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	bfb8      	it	lt
 800ef7c:	4613      	movlt	r3, r2
 800ef7e:	6033      	str	r3, [r6, #0]
 800ef80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef84:	4607      	mov	r7, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	b10a      	cbz	r2, 800ef8e <_printf_common+0x26>
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	6033      	str	r3, [r6, #0]
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	0699      	lsls	r1, r3, #26
 800ef92:	bf42      	ittt	mi
 800ef94:	6833      	ldrmi	r3, [r6, #0]
 800ef96:	3302      	addmi	r3, #2
 800ef98:	6033      	strmi	r3, [r6, #0]
 800ef9a:	6825      	ldr	r5, [r4, #0]
 800ef9c:	f015 0506 	ands.w	r5, r5, #6
 800efa0:	d106      	bne.n	800efb0 <_printf_common+0x48>
 800efa2:	f104 0a19 	add.w	sl, r4, #25
 800efa6:	68e3      	ldr	r3, [r4, #12]
 800efa8:	6832      	ldr	r2, [r6, #0]
 800efaa:	1a9b      	subs	r3, r3, r2
 800efac:	42ab      	cmp	r3, r5
 800efae:	dc26      	bgt.n	800effe <_printf_common+0x96>
 800efb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efb4:	1e13      	subs	r3, r2, #0
 800efb6:	6822      	ldr	r2, [r4, #0]
 800efb8:	bf18      	it	ne
 800efba:	2301      	movne	r3, #1
 800efbc:	0692      	lsls	r2, r2, #26
 800efbe:	d42b      	bmi.n	800f018 <_printf_common+0xb0>
 800efc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efc4:	4649      	mov	r1, r9
 800efc6:	4638      	mov	r0, r7
 800efc8:	47c0      	blx	r8
 800efca:	3001      	adds	r0, #1
 800efcc:	d01e      	beq.n	800f00c <_printf_common+0xa4>
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	6922      	ldr	r2, [r4, #16]
 800efd2:	f003 0306 	and.w	r3, r3, #6
 800efd6:	2b04      	cmp	r3, #4
 800efd8:	bf02      	ittt	eq
 800efda:	68e5      	ldreq	r5, [r4, #12]
 800efdc:	6833      	ldreq	r3, [r6, #0]
 800efde:	1aed      	subeq	r5, r5, r3
 800efe0:	68a3      	ldr	r3, [r4, #8]
 800efe2:	bf0c      	ite	eq
 800efe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efe8:	2500      	movne	r5, #0
 800efea:	4293      	cmp	r3, r2
 800efec:	bfc4      	itt	gt
 800efee:	1a9b      	subgt	r3, r3, r2
 800eff0:	18ed      	addgt	r5, r5, r3
 800eff2:	2600      	movs	r6, #0
 800eff4:	341a      	adds	r4, #26
 800eff6:	42b5      	cmp	r5, r6
 800eff8:	d11a      	bne.n	800f030 <_printf_common+0xc8>
 800effa:	2000      	movs	r0, #0
 800effc:	e008      	b.n	800f010 <_printf_common+0xa8>
 800effe:	2301      	movs	r3, #1
 800f000:	4652      	mov	r2, sl
 800f002:	4649      	mov	r1, r9
 800f004:	4638      	mov	r0, r7
 800f006:	47c0      	blx	r8
 800f008:	3001      	adds	r0, #1
 800f00a:	d103      	bne.n	800f014 <_printf_common+0xac>
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295
 800f010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f014:	3501      	adds	r5, #1
 800f016:	e7c6      	b.n	800efa6 <_printf_common+0x3e>
 800f018:	18e1      	adds	r1, r4, r3
 800f01a:	1c5a      	adds	r2, r3, #1
 800f01c:	2030      	movs	r0, #48	; 0x30
 800f01e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f022:	4422      	add	r2, r4
 800f024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f02c:	3302      	adds	r3, #2
 800f02e:	e7c7      	b.n	800efc0 <_printf_common+0x58>
 800f030:	2301      	movs	r3, #1
 800f032:	4622      	mov	r2, r4
 800f034:	4649      	mov	r1, r9
 800f036:	4638      	mov	r0, r7
 800f038:	47c0      	blx	r8
 800f03a:	3001      	adds	r0, #1
 800f03c:	d0e6      	beq.n	800f00c <_printf_common+0xa4>
 800f03e:	3601      	adds	r6, #1
 800f040:	e7d9      	b.n	800eff6 <_printf_common+0x8e>
	...

0800f044 <_printf_i>:
 800f044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f048:	7e0f      	ldrb	r7, [r1, #24]
 800f04a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f04c:	2f78      	cmp	r7, #120	; 0x78
 800f04e:	4691      	mov	r9, r2
 800f050:	4680      	mov	r8, r0
 800f052:	460c      	mov	r4, r1
 800f054:	469a      	mov	sl, r3
 800f056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f05a:	d807      	bhi.n	800f06c <_printf_i+0x28>
 800f05c:	2f62      	cmp	r7, #98	; 0x62
 800f05e:	d80a      	bhi.n	800f076 <_printf_i+0x32>
 800f060:	2f00      	cmp	r7, #0
 800f062:	f000 80d4 	beq.w	800f20e <_printf_i+0x1ca>
 800f066:	2f58      	cmp	r7, #88	; 0x58
 800f068:	f000 80c0 	beq.w	800f1ec <_printf_i+0x1a8>
 800f06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f074:	e03a      	b.n	800f0ec <_printf_i+0xa8>
 800f076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f07a:	2b15      	cmp	r3, #21
 800f07c:	d8f6      	bhi.n	800f06c <_printf_i+0x28>
 800f07e:	a101      	add	r1, pc, #4	; (adr r1, 800f084 <_printf_i+0x40>)
 800f080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f084:	0800f0dd 	.word	0x0800f0dd
 800f088:	0800f0f1 	.word	0x0800f0f1
 800f08c:	0800f06d 	.word	0x0800f06d
 800f090:	0800f06d 	.word	0x0800f06d
 800f094:	0800f06d 	.word	0x0800f06d
 800f098:	0800f06d 	.word	0x0800f06d
 800f09c:	0800f0f1 	.word	0x0800f0f1
 800f0a0:	0800f06d 	.word	0x0800f06d
 800f0a4:	0800f06d 	.word	0x0800f06d
 800f0a8:	0800f06d 	.word	0x0800f06d
 800f0ac:	0800f06d 	.word	0x0800f06d
 800f0b0:	0800f1f5 	.word	0x0800f1f5
 800f0b4:	0800f11d 	.word	0x0800f11d
 800f0b8:	0800f1af 	.word	0x0800f1af
 800f0bc:	0800f06d 	.word	0x0800f06d
 800f0c0:	0800f06d 	.word	0x0800f06d
 800f0c4:	0800f217 	.word	0x0800f217
 800f0c8:	0800f06d 	.word	0x0800f06d
 800f0cc:	0800f11d 	.word	0x0800f11d
 800f0d0:	0800f06d 	.word	0x0800f06d
 800f0d4:	0800f06d 	.word	0x0800f06d
 800f0d8:	0800f1b7 	.word	0x0800f1b7
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	1d1a      	adds	r2, r3, #4
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	602a      	str	r2, [r5, #0]
 800f0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e09f      	b.n	800f230 <_printf_i+0x1ec>
 800f0f0:	6820      	ldr	r0, [r4, #0]
 800f0f2:	682b      	ldr	r3, [r5, #0]
 800f0f4:	0607      	lsls	r7, r0, #24
 800f0f6:	f103 0104 	add.w	r1, r3, #4
 800f0fa:	6029      	str	r1, [r5, #0]
 800f0fc:	d501      	bpl.n	800f102 <_printf_i+0xbe>
 800f0fe:	681e      	ldr	r6, [r3, #0]
 800f100:	e003      	b.n	800f10a <_printf_i+0xc6>
 800f102:	0646      	lsls	r6, r0, #25
 800f104:	d5fb      	bpl.n	800f0fe <_printf_i+0xba>
 800f106:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f10a:	2e00      	cmp	r6, #0
 800f10c:	da03      	bge.n	800f116 <_printf_i+0xd2>
 800f10e:	232d      	movs	r3, #45	; 0x2d
 800f110:	4276      	negs	r6, r6
 800f112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f116:	485a      	ldr	r0, [pc, #360]	; (800f280 <_printf_i+0x23c>)
 800f118:	230a      	movs	r3, #10
 800f11a:	e012      	b.n	800f142 <_printf_i+0xfe>
 800f11c:	682b      	ldr	r3, [r5, #0]
 800f11e:	6820      	ldr	r0, [r4, #0]
 800f120:	1d19      	adds	r1, r3, #4
 800f122:	6029      	str	r1, [r5, #0]
 800f124:	0605      	lsls	r5, r0, #24
 800f126:	d501      	bpl.n	800f12c <_printf_i+0xe8>
 800f128:	681e      	ldr	r6, [r3, #0]
 800f12a:	e002      	b.n	800f132 <_printf_i+0xee>
 800f12c:	0641      	lsls	r1, r0, #25
 800f12e:	d5fb      	bpl.n	800f128 <_printf_i+0xe4>
 800f130:	881e      	ldrh	r6, [r3, #0]
 800f132:	4853      	ldr	r0, [pc, #332]	; (800f280 <_printf_i+0x23c>)
 800f134:	2f6f      	cmp	r7, #111	; 0x6f
 800f136:	bf0c      	ite	eq
 800f138:	2308      	moveq	r3, #8
 800f13a:	230a      	movne	r3, #10
 800f13c:	2100      	movs	r1, #0
 800f13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f142:	6865      	ldr	r5, [r4, #4]
 800f144:	60a5      	str	r5, [r4, #8]
 800f146:	2d00      	cmp	r5, #0
 800f148:	bfa2      	ittt	ge
 800f14a:	6821      	ldrge	r1, [r4, #0]
 800f14c:	f021 0104 	bicge.w	r1, r1, #4
 800f150:	6021      	strge	r1, [r4, #0]
 800f152:	b90e      	cbnz	r6, 800f158 <_printf_i+0x114>
 800f154:	2d00      	cmp	r5, #0
 800f156:	d04b      	beq.n	800f1f0 <_printf_i+0x1ac>
 800f158:	4615      	mov	r5, r2
 800f15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f15e:	fb03 6711 	mls	r7, r3, r1, r6
 800f162:	5dc7      	ldrb	r7, [r0, r7]
 800f164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f168:	4637      	mov	r7, r6
 800f16a:	42bb      	cmp	r3, r7
 800f16c:	460e      	mov	r6, r1
 800f16e:	d9f4      	bls.n	800f15a <_printf_i+0x116>
 800f170:	2b08      	cmp	r3, #8
 800f172:	d10b      	bne.n	800f18c <_printf_i+0x148>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	07de      	lsls	r6, r3, #31
 800f178:	d508      	bpl.n	800f18c <_printf_i+0x148>
 800f17a:	6923      	ldr	r3, [r4, #16]
 800f17c:	6861      	ldr	r1, [r4, #4]
 800f17e:	4299      	cmp	r1, r3
 800f180:	bfde      	ittt	le
 800f182:	2330      	movle	r3, #48	; 0x30
 800f184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f188:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f18c:	1b52      	subs	r2, r2, r5
 800f18e:	6122      	str	r2, [r4, #16]
 800f190:	f8cd a000 	str.w	sl, [sp]
 800f194:	464b      	mov	r3, r9
 800f196:	aa03      	add	r2, sp, #12
 800f198:	4621      	mov	r1, r4
 800f19a:	4640      	mov	r0, r8
 800f19c:	f7ff fee4 	bl	800ef68 <_printf_common>
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	d14a      	bne.n	800f23a <_printf_i+0x1f6>
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a8:	b004      	add	sp, #16
 800f1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ae:	6823      	ldr	r3, [r4, #0]
 800f1b0:	f043 0320 	orr.w	r3, r3, #32
 800f1b4:	6023      	str	r3, [r4, #0]
 800f1b6:	4833      	ldr	r0, [pc, #204]	; (800f284 <_printf_i+0x240>)
 800f1b8:	2778      	movs	r7, #120	; 0x78
 800f1ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	6829      	ldr	r1, [r5, #0]
 800f1c2:	061f      	lsls	r7, r3, #24
 800f1c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f1c8:	d402      	bmi.n	800f1d0 <_printf_i+0x18c>
 800f1ca:	065f      	lsls	r7, r3, #25
 800f1cc:	bf48      	it	mi
 800f1ce:	b2b6      	uxthmi	r6, r6
 800f1d0:	07df      	lsls	r7, r3, #31
 800f1d2:	bf48      	it	mi
 800f1d4:	f043 0320 	orrmi.w	r3, r3, #32
 800f1d8:	6029      	str	r1, [r5, #0]
 800f1da:	bf48      	it	mi
 800f1dc:	6023      	strmi	r3, [r4, #0]
 800f1de:	b91e      	cbnz	r6, 800f1e8 <_printf_i+0x1a4>
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	f023 0320 	bic.w	r3, r3, #32
 800f1e6:	6023      	str	r3, [r4, #0]
 800f1e8:	2310      	movs	r3, #16
 800f1ea:	e7a7      	b.n	800f13c <_printf_i+0xf8>
 800f1ec:	4824      	ldr	r0, [pc, #144]	; (800f280 <_printf_i+0x23c>)
 800f1ee:	e7e4      	b.n	800f1ba <_printf_i+0x176>
 800f1f0:	4615      	mov	r5, r2
 800f1f2:	e7bd      	b.n	800f170 <_printf_i+0x12c>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	6826      	ldr	r6, [r4, #0]
 800f1f8:	6961      	ldr	r1, [r4, #20]
 800f1fa:	1d18      	adds	r0, r3, #4
 800f1fc:	6028      	str	r0, [r5, #0]
 800f1fe:	0635      	lsls	r5, r6, #24
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	d501      	bpl.n	800f208 <_printf_i+0x1c4>
 800f204:	6019      	str	r1, [r3, #0]
 800f206:	e002      	b.n	800f20e <_printf_i+0x1ca>
 800f208:	0670      	lsls	r0, r6, #25
 800f20a:	d5fb      	bpl.n	800f204 <_printf_i+0x1c0>
 800f20c:	8019      	strh	r1, [r3, #0]
 800f20e:	2300      	movs	r3, #0
 800f210:	6123      	str	r3, [r4, #16]
 800f212:	4615      	mov	r5, r2
 800f214:	e7bc      	b.n	800f190 <_printf_i+0x14c>
 800f216:	682b      	ldr	r3, [r5, #0]
 800f218:	1d1a      	adds	r2, r3, #4
 800f21a:	602a      	str	r2, [r5, #0]
 800f21c:	681d      	ldr	r5, [r3, #0]
 800f21e:	6862      	ldr	r2, [r4, #4]
 800f220:	2100      	movs	r1, #0
 800f222:	4628      	mov	r0, r5
 800f224:	f7f0 ffdc 	bl	80001e0 <memchr>
 800f228:	b108      	cbz	r0, 800f22e <_printf_i+0x1ea>
 800f22a:	1b40      	subs	r0, r0, r5
 800f22c:	6060      	str	r0, [r4, #4]
 800f22e:	6863      	ldr	r3, [r4, #4]
 800f230:	6123      	str	r3, [r4, #16]
 800f232:	2300      	movs	r3, #0
 800f234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f238:	e7aa      	b.n	800f190 <_printf_i+0x14c>
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	462a      	mov	r2, r5
 800f23e:	4649      	mov	r1, r9
 800f240:	4640      	mov	r0, r8
 800f242:	47d0      	blx	sl
 800f244:	3001      	adds	r0, #1
 800f246:	d0ad      	beq.n	800f1a4 <_printf_i+0x160>
 800f248:	6823      	ldr	r3, [r4, #0]
 800f24a:	079b      	lsls	r3, r3, #30
 800f24c:	d413      	bmi.n	800f276 <_printf_i+0x232>
 800f24e:	68e0      	ldr	r0, [r4, #12]
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	4298      	cmp	r0, r3
 800f254:	bfb8      	it	lt
 800f256:	4618      	movlt	r0, r3
 800f258:	e7a6      	b.n	800f1a8 <_printf_i+0x164>
 800f25a:	2301      	movs	r3, #1
 800f25c:	4632      	mov	r2, r6
 800f25e:	4649      	mov	r1, r9
 800f260:	4640      	mov	r0, r8
 800f262:	47d0      	blx	sl
 800f264:	3001      	adds	r0, #1
 800f266:	d09d      	beq.n	800f1a4 <_printf_i+0x160>
 800f268:	3501      	adds	r5, #1
 800f26a:	68e3      	ldr	r3, [r4, #12]
 800f26c:	9903      	ldr	r1, [sp, #12]
 800f26e:	1a5b      	subs	r3, r3, r1
 800f270:	42ab      	cmp	r3, r5
 800f272:	dcf2      	bgt.n	800f25a <_printf_i+0x216>
 800f274:	e7eb      	b.n	800f24e <_printf_i+0x20a>
 800f276:	2500      	movs	r5, #0
 800f278:	f104 0619 	add.w	r6, r4, #25
 800f27c:	e7f5      	b.n	800f26a <_printf_i+0x226>
 800f27e:	bf00      	nop
 800f280:	08011bba 	.word	0x08011bba
 800f284:	08011bcb 	.word	0x08011bcb

0800f288 <std>:
 800f288:	2300      	movs	r3, #0
 800f28a:	b510      	push	{r4, lr}
 800f28c:	4604      	mov	r4, r0
 800f28e:	e9c0 3300 	strd	r3, r3, [r0]
 800f292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f296:	6083      	str	r3, [r0, #8]
 800f298:	8181      	strh	r1, [r0, #12]
 800f29a:	6643      	str	r3, [r0, #100]	; 0x64
 800f29c:	81c2      	strh	r2, [r0, #14]
 800f29e:	6183      	str	r3, [r0, #24]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	2208      	movs	r2, #8
 800f2a4:	305c      	adds	r0, #92	; 0x5c
 800f2a6:	f000 f8e2 	bl	800f46e <memset>
 800f2aa:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <std+0x38>)
 800f2ac:	6263      	str	r3, [r4, #36]	; 0x24
 800f2ae:	4b05      	ldr	r3, [pc, #20]	; (800f2c4 <std+0x3c>)
 800f2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2b2:	4b05      	ldr	r3, [pc, #20]	; (800f2c8 <std+0x40>)
 800f2b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2b6:	4b05      	ldr	r3, [pc, #20]	; (800f2cc <std+0x44>)
 800f2b8:	6224      	str	r4, [r4, #32]
 800f2ba:	6323      	str	r3, [r4, #48]	; 0x30
 800f2bc:	bd10      	pop	{r4, pc}
 800f2be:	bf00      	nop
 800f2c0:	0800f3e9 	.word	0x0800f3e9
 800f2c4:	0800f40b 	.word	0x0800f40b
 800f2c8:	0800f443 	.word	0x0800f443
 800f2cc:	0800f467 	.word	0x0800f467

0800f2d0 <stdio_exit_handler>:
 800f2d0:	4a02      	ldr	r2, [pc, #8]	; (800f2dc <stdio_exit_handler+0xc>)
 800f2d2:	4903      	ldr	r1, [pc, #12]	; (800f2e0 <stdio_exit_handler+0x10>)
 800f2d4:	4803      	ldr	r0, [pc, #12]	; (800f2e4 <stdio_exit_handler+0x14>)
 800f2d6:	f000 b869 	b.w	800f3ac <_fwalk_sglue>
 800f2da:	bf00      	nop
 800f2dc:	20000014 	.word	0x20000014
 800f2e0:	08010d31 	.word	0x08010d31
 800f2e4:	20000020 	.word	0x20000020

0800f2e8 <cleanup_stdio>:
 800f2e8:	6841      	ldr	r1, [r0, #4]
 800f2ea:	4b0c      	ldr	r3, [pc, #48]	; (800f31c <cleanup_stdio+0x34>)
 800f2ec:	4299      	cmp	r1, r3
 800f2ee:	b510      	push	{r4, lr}
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	d001      	beq.n	800f2f8 <cleanup_stdio+0x10>
 800f2f4:	f001 fd1c 	bl	8010d30 <_fflush_r>
 800f2f8:	68a1      	ldr	r1, [r4, #8]
 800f2fa:	4b09      	ldr	r3, [pc, #36]	; (800f320 <cleanup_stdio+0x38>)
 800f2fc:	4299      	cmp	r1, r3
 800f2fe:	d002      	beq.n	800f306 <cleanup_stdio+0x1e>
 800f300:	4620      	mov	r0, r4
 800f302:	f001 fd15 	bl	8010d30 <_fflush_r>
 800f306:	68e1      	ldr	r1, [r4, #12]
 800f308:	4b06      	ldr	r3, [pc, #24]	; (800f324 <cleanup_stdio+0x3c>)
 800f30a:	4299      	cmp	r1, r3
 800f30c:	d004      	beq.n	800f318 <cleanup_stdio+0x30>
 800f30e:	4620      	mov	r0, r4
 800f310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f314:	f001 bd0c 	b.w	8010d30 <_fflush_r>
 800f318:	bd10      	pop	{r4, pc}
 800f31a:	bf00      	nop
 800f31c:	2000958c 	.word	0x2000958c
 800f320:	200095f4 	.word	0x200095f4
 800f324:	2000965c 	.word	0x2000965c

0800f328 <global_stdio_init.part.0>:
 800f328:	b510      	push	{r4, lr}
 800f32a:	4b0b      	ldr	r3, [pc, #44]	; (800f358 <global_stdio_init.part.0+0x30>)
 800f32c:	4c0b      	ldr	r4, [pc, #44]	; (800f35c <global_stdio_init.part.0+0x34>)
 800f32e:	4a0c      	ldr	r2, [pc, #48]	; (800f360 <global_stdio_init.part.0+0x38>)
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	4620      	mov	r0, r4
 800f334:	2200      	movs	r2, #0
 800f336:	2104      	movs	r1, #4
 800f338:	f7ff ffa6 	bl	800f288 <std>
 800f33c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f340:	2201      	movs	r2, #1
 800f342:	2109      	movs	r1, #9
 800f344:	f7ff ffa0 	bl	800f288 <std>
 800f348:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f34c:	2202      	movs	r2, #2
 800f34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f352:	2112      	movs	r1, #18
 800f354:	f7ff bf98 	b.w	800f288 <std>
 800f358:	200096c4 	.word	0x200096c4
 800f35c:	2000958c 	.word	0x2000958c
 800f360:	0800f2d1 	.word	0x0800f2d1

0800f364 <__sfp_lock_acquire>:
 800f364:	4801      	ldr	r0, [pc, #4]	; (800f36c <__sfp_lock_acquire+0x8>)
 800f366:	f000 b955 	b.w	800f614 <__retarget_lock_acquire_recursive>
 800f36a:	bf00      	nop
 800f36c:	200096cd 	.word	0x200096cd

0800f370 <__sfp_lock_release>:
 800f370:	4801      	ldr	r0, [pc, #4]	; (800f378 <__sfp_lock_release+0x8>)
 800f372:	f000 b950 	b.w	800f616 <__retarget_lock_release_recursive>
 800f376:	bf00      	nop
 800f378:	200096cd 	.word	0x200096cd

0800f37c <__sinit>:
 800f37c:	b510      	push	{r4, lr}
 800f37e:	4604      	mov	r4, r0
 800f380:	f7ff fff0 	bl	800f364 <__sfp_lock_acquire>
 800f384:	6a23      	ldr	r3, [r4, #32]
 800f386:	b11b      	cbz	r3, 800f390 <__sinit+0x14>
 800f388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f38c:	f7ff bff0 	b.w	800f370 <__sfp_lock_release>
 800f390:	4b04      	ldr	r3, [pc, #16]	; (800f3a4 <__sinit+0x28>)
 800f392:	6223      	str	r3, [r4, #32]
 800f394:	4b04      	ldr	r3, [pc, #16]	; (800f3a8 <__sinit+0x2c>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1f5      	bne.n	800f388 <__sinit+0xc>
 800f39c:	f7ff ffc4 	bl	800f328 <global_stdio_init.part.0>
 800f3a0:	e7f2      	b.n	800f388 <__sinit+0xc>
 800f3a2:	bf00      	nop
 800f3a4:	0800f2e9 	.word	0x0800f2e9
 800f3a8:	200096c4 	.word	0x200096c4

0800f3ac <_fwalk_sglue>:
 800f3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b0:	4607      	mov	r7, r0
 800f3b2:	4688      	mov	r8, r1
 800f3b4:	4614      	mov	r4, r2
 800f3b6:	2600      	movs	r6, #0
 800f3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800f3c0:	d505      	bpl.n	800f3ce <_fwalk_sglue+0x22>
 800f3c2:	6824      	ldr	r4, [r4, #0]
 800f3c4:	2c00      	cmp	r4, #0
 800f3c6:	d1f7      	bne.n	800f3b8 <_fwalk_sglue+0xc>
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d907      	bls.n	800f3e4 <_fwalk_sglue+0x38>
 800f3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	d003      	beq.n	800f3e4 <_fwalk_sglue+0x38>
 800f3dc:	4629      	mov	r1, r5
 800f3de:	4638      	mov	r0, r7
 800f3e0:	47c0      	blx	r8
 800f3e2:	4306      	orrs	r6, r0
 800f3e4:	3568      	adds	r5, #104	; 0x68
 800f3e6:	e7e9      	b.n	800f3bc <_fwalk_sglue+0x10>

0800f3e8 <__sread>:
 800f3e8:	b510      	push	{r4, lr}
 800f3ea:	460c      	mov	r4, r1
 800f3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3f0:	f000 f8c2 	bl	800f578 <_read_r>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	bfab      	itete	ge
 800f3f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f3fc:	181b      	addge	r3, r3, r0
 800f3fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f402:	bfac      	ite	ge
 800f404:	6563      	strge	r3, [r4, #84]	; 0x54
 800f406:	81a3      	strhlt	r3, [r4, #12]
 800f408:	bd10      	pop	{r4, pc}

0800f40a <__swrite>:
 800f40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40e:	461f      	mov	r7, r3
 800f410:	898b      	ldrh	r3, [r1, #12]
 800f412:	05db      	lsls	r3, r3, #23
 800f414:	4605      	mov	r5, r0
 800f416:	460c      	mov	r4, r1
 800f418:	4616      	mov	r6, r2
 800f41a:	d505      	bpl.n	800f428 <__swrite+0x1e>
 800f41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f420:	2302      	movs	r3, #2
 800f422:	2200      	movs	r2, #0
 800f424:	f000 f896 	bl	800f554 <_lseek_r>
 800f428:	89a3      	ldrh	r3, [r4, #12]
 800f42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f42e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f432:	81a3      	strh	r3, [r4, #12]
 800f434:	4632      	mov	r2, r6
 800f436:	463b      	mov	r3, r7
 800f438:	4628      	mov	r0, r5
 800f43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f43e:	f000 b8ad 	b.w	800f59c <_write_r>

0800f442 <__sseek>:
 800f442:	b510      	push	{r4, lr}
 800f444:	460c      	mov	r4, r1
 800f446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f44a:	f000 f883 	bl	800f554 <_lseek_r>
 800f44e:	1c43      	adds	r3, r0, #1
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	bf15      	itete	ne
 800f454:	6560      	strne	r0, [r4, #84]	; 0x54
 800f456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f45a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f45e:	81a3      	strheq	r3, [r4, #12]
 800f460:	bf18      	it	ne
 800f462:	81a3      	strhne	r3, [r4, #12]
 800f464:	bd10      	pop	{r4, pc}

0800f466 <__sclose>:
 800f466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f46a:	f000 b80d 	b.w	800f488 <_close_r>

0800f46e <memset>:
 800f46e:	4402      	add	r2, r0
 800f470:	4603      	mov	r3, r0
 800f472:	4293      	cmp	r3, r2
 800f474:	d100      	bne.n	800f478 <memset+0xa>
 800f476:	4770      	bx	lr
 800f478:	f803 1b01 	strb.w	r1, [r3], #1
 800f47c:	e7f9      	b.n	800f472 <memset+0x4>
	...

0800f480 <_localeconv_r>:
 800f480:	4800      	ldr	r0, [pc, #0]	; (800f484 <_localeconv_r+0x4>)
 800f482:	4770      	bx	lr
 800f484:	20000160 	.word	0x20000160

0800f488 <_close_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4d06      	ldr	r5, [pc, #24]	; (800f4a4 <_close_r+0x1c>)
 800f48c:	2300      	movs	r3, #0
 800f48e:	4604      	mov	r4, r0
 800f490:	4608      	mov	r0, r1
 800f492:	602b      	str	r3, [r5, #0]
 800f494:	f7f5 fee1 	bl	800525a <_close>
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	d102      	bne.n	800f4a2 <_close_r+0x1a>
 800f49c:	682b      	ldr	r3, [r5, #0]
 800f49e:	b103      	cbz	r3, 800f4a2 <_close_r+0x1a>
 800f4a0:	6023      	str	r3, [r4, #0]
 800f4a2:	bd38      	pop	{r3, r4, r5, pc}
 800f4a4:	200096c8 	.word	0x200096c8

0800f4a8 <_reclaim_reent>:
 800f4a8:	4b29      	ldr	r3, [pc, #164]	; (800f550 <_reclaim_reent+0xa8>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4283      	cmp	r3, r0
 800f4ae:	b570      	push	{r4, r5, r6, lr}
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	d04b      	beq.n	800f54c <_reclaim_reent+0xa4>
 800f4b4:	69c3      	ldr	r3, [r0, #28]
 800f4b6:	b143      	cbz	r3, 800f4ca <_reclaim_reent+0x22>
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d144      	bne.n	800f548 <_reclaim_reent+0xa0>
 800f4be:	69e3      	ldr	r3, [r4, #28]
 800f4c0:	6819      	ldr	r1, [r3, #0]
 800f4c2:	b111      	cbz	r1, 800f4ca <_reclaim_reent+0x22>
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f000 ff31 	bl	801032c <_free_r>
 800f4ca:	6961      	ldr	r1, [r4, #20]
 800f4cc:	b111      	cbz	r1, 800f4d4 <_reclaim_reent+0x2c>
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f000 ff2c 	bl	801032c <_free_r>
 800f4d4:	69e1      	ldr	r1, [r4, #28]
 800f4d6:	b111      	cbz	r1, 800f4de <_reclaim_reent+0x36>
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 ff27 	bl	801032c <_free_r>
 800f4de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f4e0:	b111      	cbz	r1, 800f4e8 <_reclaim_reent+0x40>
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 ff22 	bl	801032c <_free_r>
 800f4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4ea:	b111      	cbz	r1, 800f4f2 <_reclaim_reent+0x4a>
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 ff1d 	bl	801032c <_free_r>
 800f4f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f4f4:	b111      	cbz	r1, 800f4fc <_reclaim_reent+0x54>
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	f000 ff18 	bl	801032c <_free_r>
 800f4fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f4fe:	b111      	cbz	r1, 800f506 <_reclaim_reent+0x5e>
 800f500:	4620      	mov	r0, r4
 800f502:	f000 ff13 	bl	801032c <_free_r>
 800f506:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f508:	b111      	cbz	r1, 800f510 <_reclaim_reent+0x68>
 800f50a:	4620      	mov	r0, r4
 800f50c:	f000 ff0e 	bl	801032c <_free_r>
 800f510:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f512:	b111      	cbz	r1, 800f51a <_reclaim_reent+0x72>
 800f514:	4620      	mov	r0, r4
 800f516:	f000 ff09 	bl	801032c <_free_r>
 800f51a:	6a23      	ldr	r3, [r4, #32]
 800f51c:	b1b3      	cbz	r3, 800f54c <_reclaim_reent+0xa4>
 800f51e:	4620      	mov	r0, r4
 800f520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f524:	4718      	bx	r3
 800f526:	5949      	ldr	r1, [r1, r5]
 800f528:	b941      	cbnz	r1, 800f53c <_reclaim_reent+0x94>
 800f52a:	3504      	adds	r5, #4
 800f52c:	69e3      	ldr	r3, [r4, #28]
 800f52e:	2d80      	cmp	r5, #128	; 0x80
 800f530:	68d9      	ldr	r1, [r3, #12]
 800f532:	d1f8      	bne.n	800f526 <_reclaim_reent+0x7e>
 800f534:	4620      	mov	r0, r4
 800f536:	f000 fef9 	bl	801032c <_free_r>
 800f53a:	e7c0      	b.n	800f4be <_reclaim_reent+0x16>
 800f53c:	680e      	ldr	r6, [r1, #0]
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 fef4 	bl	801032c <_free_r>
 800f544:	4631      	mov	r1, r6
 800f546:	e7ef      	b.n	800f528 <_reclaim_reent+0x80>
 800f548:	2500      	movs	r5, #0
 800f54a:	e7ef      	b.n	800f52c <_reclaim_reent+0x84>
 800f54c:	bd70      	pop	{r4, r5, r6, pc}
 800f54e:	bf00      	nop
 800f550:	2000006c 	.word	0x2000006c

0800f554 <_lseek_r>:
 800f554:	b538      	push	{r3, r4, r5, lr}
 800f556:	4d07      	ldr	r5, [pc, #28]	; (800f574 <_lseek_r+0x20>)
 800f558:	4604      	mov	r4, r0
 800f55a:	4608      	mov	r0, r1
 800f55c:	4611      	mov	r1, r2
 800f55e:	2200      	movs	r2, #0
 800f560:	602a      	str	r2, [r5, #0]
 800f562:	461a      	mov	r2, r3
 800f564:	f7f5 fea0 	bl	80052a8 <_lseek>
 800f568:	1c43      	adds	r3, r0, #1
 800f56a:	d102      	bne.n	800f572 <_lseek_r+0x1e>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	b103      	cbz	r3, 800f572 <_lseek_r+0x1e>
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	200096c8 	.word	0x200096c8

0800f578 <_read_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4d07      	ldr	r5, [pc, #28]	; (800f598 <_read_r+0x20>)
 800f57c:	4604      	mov	r4, r0
 800f57e:	4608      	mov	r0, r1
 800f580:	4611      	mov	r1, r2
 800f582:	2200      	movs	r2, #0
 800f584:	602a      	str	r2, [r5, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	f7f5 fe2e 	bl	80051e8 <_read>
 800f58c:	1c43      	adds	r3, r0, #1
 800f58e:	d102      	bne.n	800f596 <_read_r+0x1e>
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	b103      	cbz	r3, 800f596 <_read_r+0x1e>
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	bd38      	pop	{r3, r4, r5, pc}
 800f598:	200096c8 	.word	0x200096c8

0800f59c <_write_r>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	4d07      	ldr	r5, [pc, #28]	; (800f5bc <_write_r+0x20>)
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	602a      	str	r2, [r5, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f7f5 fe39 	bl	8005222 <_write>
 800f5b0:	1c43      	adds	r3, r0, #1
 800f5b2:	d102      	bne.n	800f5ba <_write_r+0x1e>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	b103      	cbz	r3, 800f5ba <_write_r+0x1e>
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	200096c8 	.word	0x200096c8

0800f5c0 <__errno>:
 800f5c0:	4b01      	ldr	r3, [pc, #4]	; (800f5c8 <__errno+0x8>)
 800f5c2:	6818      	ldr	r0, [r3, #0]
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	2000006c 	.word	0x2000006c

0800f5cc <__libc_init_array>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	4d0d      	ldr	r5, [pc, #52]	; (800f604 <__libc_init_array+0x38>)
 800f5d0:	4c0d      	ldr	r4, [pc, #52]	; (800f608 <__libc_init_array+0x3c>)
 800f5d2:	1b64      	subs	r4, r4, r5
 800f5d4:	10a4      	asrs	r4, r4, #2
 800f5d6:	2600      	movs	r6, #0
 800f5d8:	42a6      	cmp	r6, r4
 800f5da:	d109      	bne.n	800f5f0 <__libc_init_array+0x24>
 800f5dc:	4d0b      	ldr	r5, [pc, #44]	; (800f60c <__libc_init_array+0x40>)
 800f5de:	4c0c      	ldr	r4, [pc, #48]	; (800f610 <__libc_init_array+0x44>)
 800f5e0:	f001 feec 	bl	80113bc <_init>
 800f5e4:	1b64      	subs	r4, r4, r5
 800f5e6:	10a4      	asrs	r4, r4, #2
 800f5e8:	2600      	movs	r6, #0
 800f5ea:	42a6      	cmp	r6, r4
 800f5ec:	d105      	bne.n	800f5fa <__libc_init_array+0x2e>
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}
 800f5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5f4:	4798      	blx	r3
 800f5f6:	3601      	adds	r6, #1
 800f5f8:	e7ee      	b.n	800f5d8 <__libc_init_array+0xc>
 800f5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5fe:	4798      	blx	r3
 800f600:	3601      	adds	r6, #1
 800f602:	e7f2      	b.n	800f5ea <__libc_init_array+0x1e>
 800f604:	08011f24 	.word	0x08011f24
 800f608:	08011f24 	.word	0x08011f24
 800f60c:	08011f24 	.word	0x08011f24
 800f610:	08011f28 	.word	0x08011f28

0800f614 <__retarget_lock_acquire_recursive>:
 800f614:	4770      	bx	lr

0800f616 <__retarget_lock_release_recursive>:
 800f616:	4770      	bx	lr

0800f618 <memcpy>:
 800f618:	440a      	add	r2, r1
 800f61a:	4291      	cmp	r1, r2
 800f61c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f620:	d100      	bne.n	800f624 <memcpy+0xc>
 800f622:	4770      	bx	lr
 800f624:	b510      	push	{r4, lr}
 800f626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f62e:	4291      	cmp	r1, r2
 800f630:	d1f9      	bne.n	800f626 <memcpy+0xe>
 800f632:	bd10      	pop	{r4, pc}

0800f634 <quorem>:
 800f634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f638:	6903      	ldr	r3, [r0, #16]
 800f63a:	690c      	ldr	r4, [r1, #16]
 800f63c:	42a3      	cmp	r3, r4
 800f63e:	4607      	mov	r7, r0
 800f640:	db7e      	blt.n	800f740 <quorem+0x10c>
 800f642:	3c01      	subs	r4, #1
 800f644:	f101 0814 	add.w	r8, r1, #20
 800f648:	f100 0514 	add.w	r5, r0, #20
 800f64c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f65a:	3301      	adds	r3, #1
 800f65c:	429a      	cmp	r2, r3
 800f65e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f662:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f666:	fbb2 f6f3 	udiv	r6, r2, r3
 800f66a:	d331      	bcc.n	800f6d0 <quorem+0x9c>
 800f66c:	f04f 0e00 	mov.w	lr, #0
 800f670:	4640      	mov	r0, r8
 800f672:	46ac      	mov	ip, r5
 800f674:	46f2      	mov	sl, lr
 800f676:	f850 2b04 	ldr.w	r2, [r0], #4
 800f67a:	b293      	uxth	r3, r2
 800f67c:	fb06 e303 	mla	r3, r6, r3, lr
 800f680:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f684:	0c1a      	lsrs	r2, r3, #16
 800f686:	b29b      	uxth	r3, r3
 800f688:	ebaa 0303 	sub.w	r3, sl, r3
 800f68c:	f8dc a000 	ldr.w	sl, [ip]
 800f690:	fa13 f38a 	uxtah	r3, r3, sl
 800f694:	fb06 220e 	mla	r2, r6, lr, r2
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	9b00      	ldr	r3, [sp, #0]
 800f69c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f6a0:	b292      	uxth	r2, r2
 800f6a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f6a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6aa:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6ae:	4581      	cmp	r9, r0
 800f6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6b4:	f84c 3b04 	str.w	r3, [ip], #4
 800f6b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f6bc:	d2db      	bcs.n	800f676 <quorem+0x42>
 800f6be:	f855 300b 	ldr.w	r3, [r5, fp]
 800f6c2:	b92b      	cbnz	r3, 800f6d0 <quorem+0x9c>
 800f6c4:	9b01      	ldr	r3, [sp, #4]
 800f6c6:	3b04      	subs	r3, #4
 800f6c8:	429d      	cmp	r5, r3
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	d32c      	bcc.n	800f728 <quorem+0xf4>
 800f6ce:	613c      	str	r4, [r7, #16]
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	f001 f9a7 	bl	8010a24 <__mcmp>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	db22      	blt.n	800f720 <quorem+0xec>
 800f6da:	3601      	adds	r6, #1
 800f6dc:	4629      	mov	r1, r5
 800f6de:	2000      	movs	r0, #0
 800f6e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f6e4:	f8d1 c000 	ldr.w	ip, [r1]
 800f6e8:	b293      	uxth	r3, r2
 800f6ea:	1ac3      	subs	r3, r0, r3
 800f6ec:	0c12      	lsrs	r2, r2, #16
 800f6ee:	fa13 f38c 	uxtah	r3, r3, ip
 800f6f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f6f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f700:	45c1      	cmp	r9, r8
 800f702:	f841 3b04 	str.w	r3, [r1], #4
 800f706:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f70a:	d2e9      	bcs.n	800f6e0 <quorem+0xac>
 800f70c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f710:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f714:	b922      	cbnz	r2, 800f720 <quorem+0xec>
 800f716:	3b04      	subs	r3, #4
 800f718:	429d      	cmp	r5, r3
 800f71a:	461a      	mov	r2, r3
 800f71c:	d30a      	bcc.n	800f734 <quorem+0x100>
 800f71e:	613c      	str	r4, [r7, #16]
 800f720:	4630      	mov	r0, r6
 800f722:	b003      	add	sp, #12
 800f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f728:	6812      	ldr	r2, [r2, #0]
 800f72a:	3b04      	subs	r3, #4
 800f72c:	2a00      	cmp	r2, #0
 800f72e:	d1ce      	bne.n	800f6ce <quorem+0x9a>
 800f730:	3c01      	subs	r4, #1
 800f732:	e7c9      	b.n	800f6c8 <quorem+0x94>
 800f734:	6812      	ldr	r2, [r2, #0]
 800f736:	3b04      	subs	r3, #4
 800f738:	2a00      	cmp	r2, #0
 800f73a:	d1f0      	bne.n	800f71e <quorem+0xea>
 800f73c:	3c01      	subs	r4, #1
 800f73e:	e7eb      	b.n	800f718 <quorem+0xe4>
 800f740:	2000      	movs	r0, #0
 800f742:	e7ee      	b.n	800f722 <quorem+0xee>
 800f744:	0000      	movs	r0, r0
	...

0800f748 <_dtoa_r>:
 800f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74c:	ed2d 8b04 	vpush	{d8-d9}
 800f750:	69c5      	ldr	r5, [r0, #28]
 800f752:	b093      	sub	sp, #76	; 0x4c
 800f754:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f758:	ec57 6b10 	vmov	r6, r7, d0
 800f75c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f760:	9107      	str	r1, [sp, #28]
 800f762:	4604      	mov	r4, r0
 800f764:	920a      	str	r2, [sp, #40]	; 0x28
 800f766:	930d      	str	r3, [sp, #52]	; 0x34
 800f768:	b975      	cbnz	r5, 800f788 <_dtoa_r+0x40>
 800f76a:	2010      	movs	r0, #16
 800f76c:	f000 fe2a 	bl	80103c4 <malloc>
 800f770:	4602      	mov	r2, r0
 800f772:	61e0      	str	r0, [r4, #28]
 800f774:	b920      	cbnz	r0, 800f780 <_dtoa_r+0x38>
 800f776:	4bae      	ldr	r3, [pc, #696]	; (800fa30 <_dtoa_r+0x2e8>)
 800f778:	21ef      	movs	r1, #239	; 0xef
 800f77a:	48ae      	ldr	r0, [pc, #696]	; (800fa34 <_dtoa_r+0x2ec>)
 800f77c:	f001 fb10 	bl	8010da0 <__assert_func>
 800f780:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f784:	6005      	str	r5, [r0, #0]
 800f786:	60c5      	str	r5, [r0, #12]
 800f788:	69e3      	ldr	r3, [r4, #28]
 800f78a:	6819      	ldr	r1, [r3, #0]
 800f78c:	b151      	cbz	r1, 800f7a4 <_dtoa_r+0x5c>
 800f78e:	685a      	ldr	r2, [r3, #4]
 800f790:	604a      	str	r2, [r1, #4]
 800f792:	2301      	movs	r3, #1
 800f794:	4093      	lsls	r3, r2
 800f796:	608b      	str	r3, [r1, #8]
 800f798:	4620      	mov	r0, r4
 800f79a:	f000 ff07 	bl	80105ac <_Bfree>
 800f79e:	69e3      	ldr	r3, [r4, #28]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	1e3b      	subs	r3, r7, #0
 800f7a6:	bfbb      	ittet	lt
 800f7a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f7ac:	9303      	strlt	r3, [sp, #12]
 800f7ae:	2300      	movge	r3, #0
 800f7b0:	2201      	movlt	r2, #1
 800f7b2:	bfac      	ite	ge
 800f7b4:	f8c8 3000 	strge.w	r3, [r8]
 800f7b8:	f8c8 2000 	strlt.w	r2, [r8]
 800f7bc:	4b9e      	ldr	r3, [pc, #632]	; (800fa38 <_dtoa_r+0x2f0>)
 800f7be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f7c2:	ea33 0308 	bics.w	r3, r3, r8
 800f7c6:	d11b      	bne.n	800f800 <_dtoa_r+0xb8>
 800f7c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800f7ce:	6013      	str	r3, [r2, #0]
 800f7d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f7d4:	4333      	orrs	r3, r6
 800f7d6:	f000 8593 	beq.w	8010300 <_dtoa_r+0xbb8>
 800f7da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7dc:	b963      	cbnz	r3, 800f7f8 <_dtoa_r+0xb0>
 800f7de:	4b97      	ldr	r3, [pc, #604]	; (800fa3c <_dtoa_r+0x2f4>)
 800f7e0:	e027      	b.n	800f832 <_dtoa_r+0xea>
 800f7e2:	4b97      	ldr	r3, [pc, #604]	; (800fa40 <_dtoa_r+0x2f8>)
 800f7e4:	9300      	str	r3, [sp, #0]
 800f7e6:	3308      	adds	r3, #8
 800f7e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7ea:	6013      	str	r3, [r2, #0]
 800f7ec:	9800      	ldr	r0, [sp, #0]
 800f7ee:	b013      	add	sp, #76	; 0x4c
 800f7f0:	ecbd 8b04 	vpop	{d8-d9}
 800f7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f8:	4b90      	ldr	r3, [pc, #576]	; (800fa3c <_dtoa_r+0x2f4>)
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	3303      	adds	r3, #3
 800f7fe:	e7f3      	b.n	800f7e8 <_dtoa_r+0xa0>
 800f800:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f804:	2200      	movs	r2, #0
 800f806:	ec51 0b17 	vmov	r0, r1, d7
 800f80a:	eeb0 8a47 	vmov.f32	s16, s14
 800f80e:	eef0 8a67 	vmov.f32	s17, s15
 800f812:	2300      	movs	r3, #0
 800f814:	f7f1 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 800f818:	4681      	mov	r9, r0
 800f81a:	b160      	cbz	r0, 800f836 <_dtoa_r+0xee>
 800f81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f81e:	2301      	movs	r3, #1
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f824:	2b00      	cmp	r3, #0
 800f826:	f000 8568 	beq.w	80102fa <_dtoa_r+0xbb2>
 800f82a:	4b86      	ldr	r3, [pc, #536]	; (800fa44 <_dtoa_r+0x2fc>)
 800f82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	3b01      	subs	r3, #1
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	e7da      	b.n	800f7ec <_dtoa_r+0xa4>
 800f836:	aa10      	add	r2, sp, #64	; 0x40
 800f838:	a911      	add	r1, sp, #68	; 0x44
 800f83a:	4620      	mov	r0, r4
 800f83c:	eeb0 0a48 	vmov.f32	s0, s16
 800f840:	eef0 0a68 	vmov.f32	s1, s17
 800f844:	f001 f994 	bl	8010b70 <__d2b>
 800f848:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f84c:	4682      	mov	sl, r0
 800f84e:	2d00      	cmp	r5, #0
 800f850:	d07f      	beq.n	800f952 <_dtoa_r+0x20a>
 800f852:	ee18 3a90 	vmov	r3, s17
 800f856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f85a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f85e:	ec51 0b18 	vmov	r0, r1, d8
 800f862:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f86a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f86e:	4619      	mov	r1, r3
 800f870:	2200      	movs	r2, #0
 800f872:	4b75      	ldr	r3, [pc, #468]	; (800fa48 <_dtoa_r+0x300>)
 800f874:	f7f0 fd10 	bl	8000298 <__aeabi_dsub>
 800f878:	a367      	add	r3, pc, #412	; (adr r3, 800fa18 <_dtoa_r+0x2d0>)
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	f7f0 fec3 	bl	8000608 <__aeabi_dmul>
 800f882:	a367      	add	r3, pc, #412	; (adr r3, 800fa20 <_dtoa_r+0x2d8>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	f7f0 fd08 	bl	800029c <__adddf3>
 800f88c:	4606      	mov	r6, r0
 800f88e:	4628      	mov	r0, r5
 800f890:	460f      	mov	r7, r1
 800f892:	f7f0 fe4f 	bl	8000534 <__aeabi_i2d>
 800f896:	a364      	add	r3, pc, #400	; (adr r3, 800fa28 <_dtoa_r+0x2e0>)
 800f898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89c:	f7f0 feb4 	bl	8000608 <__aeabi_dmul>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	f7f0 fcf8 	bl	800029c <__adddf3>
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	460f      	mov	r7, r1
 800f8b0:	f7f1 f95a 	bl	8000b68 <__aeabi_d2iz>
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	4683      	mov	fp, r0
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	f7f1 f915 	bl	8000aec <__aeabi_dcmplt>
 800f8c2:	b148      	cbz	r0, 800f8d8 <_dtoa_r+0x190>
 800f8c4:	4658      	mov	r0, fp
 800f8c6:	f7f0 fe35 	bl	8000534 <__aeabi_i2d>
 800f8ca:	4632      	mov	r2, r6
 800f8cc:	463b      	mov	r3, r7
 800f8ce:	f7f1 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8d2:	b908      	cbnz	r0, 800f8d8 <_dtoa_r+0x190>
 800f8d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8d8:	f1bb 0f16 	cmp.w	fp, #22
 800f8dc:	d857      	bhi.n	800f98e <_dtoa_r+0x246>
 800f8de:	4b5b      	ldr	r3, [pc, #364]	; (800fa4c <_dtoa_r+0x304>)
 800f8e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	ec51 0b18 	vmov	r0, r1, d8
 800f8ec:	f7f1 f8fe 	bl	8000aec <__aeabi_dcmplt>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d04e      	beq.n	800f992 <_dtoa_r+0x24a>
 800f8f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	930c      	str	r3, [sp, #48]	; 0x30
 800f8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8fe:	1b5b      	subs	r3, r3, r5
 800f900:	1e5a      	subs	r2, r3, #1
 800f902:	bf45      	ittet	mi
 800f904:	f1c3 0301 	rsbmi	r3, r3, #1
 800f908:	9305      	strmi	r3, [sp, #20]
 800f90a:	2300      	movpl	r3, #0
 800f90c:	2300      	movmi	r3, #0
 800f90e:	9206      	str	r2, [sp, #24]
 800f910:	bf54      	ite	pl
 800f912:	9305      	strpl	r3, [sp, #20]
 800f914:	9306      	strmi	r3, [sp, #24]
 800f916:	f1bb 0f00 	cmp.w	fp, #0
 800f91a:	db3c      	blt.n	800f996 <_dtoa_r+0x24e>
 800f91c:	9b06      	ldr	r3, [sp, #24]
 800f91e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f922:	445b      	add	r3, fp
 800f924:	9306      	str	r3, [sp, #24]
 800f926:	2300      	movs	r3, #0
 800f928:	9308      	str	r3, [sp, #32]
 800f92a:	9b07      	ldr	r3, [sp, #28]
 800f92c:	2b09      	cmp	r3, #9
 800f92e:	d868      	bhi.n	800fa02 <_dtoa_r+0x2ba>
 800f930:	2b05      	cmp	r3, #5
 800f932:	bfc4      	itt	gt
 800f934:	3b04      	subgt	r3, #4
 800f936:	9307      	strgt	r3, [sp, #28]
 800f938:	9b07      	ldr	r3, [sp, #28]
 800f93a:	f1a3 0302 	sub.w	r3, r3, #2
 800f93e:	bfcc      	ite	gt
 800f940:	2500      	movgt	r5, #0
 800f942:	2501      	movle	r5, #1
 800f944:	2b03      	cmp	r3, #3
 800f946:	f200 8085 	bhi.w	800fa54 <_dtoa_r+0x30c>
 800f94a:	e8df f003 	tbb	[pc, r3]
 800f94e:	3b2e      	.short	0x3b2e
 800f950:	5839      	.short	0x5839
 800f952:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f956:	441d      	add	r5, r3
 800f958:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f95c:	2b20      	cmp	r3, #32
 800f95e:	bfc1      	itttt	gt
 800f960:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f964:	fa08 f803 	lslgt.w	r8, r8, r3
 800f968:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f96c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f970:	bfd6      	itet	le
 800f972:	f1c3 0320 	rsble	r3, r3, #32
 800f976:	ea48 0003 	orrgt.w	r0, r8, r3
 800f97a:	fa06 f003 	lslle.w	r0, r6, r3
 800f97e:	f7f0 fdc9 	bl	8000514 <__aeabi_ui2d>
 800f982:	2201      	movs	r2, #1
 800f984:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f988:	3d01      	subs	r5, #1
 800f98a:	920e      	str	r2, [sp, #56]	; 0x38
 800f98c:	e76f      	b.n	800f86e <_dtoa_r+0x126>
 800f98e:	2301      	movs	r3, #1
 800f990:	e7b3      	b.n	800f8fa <_dtoa_r+0x1b2>
 800f992:	900c      	str	r0, [sp, #48]	; 0x30
 800f994:	e7b2      	b.n	800f8fc <_dtoa_r+0x1b4>
 800f996:	9b05      	ldr	r3, [sp, #20]
 800f998:	eba3 030b 	sub.w	r3, r3, fp
 800f99c:	9305      	str	r3, [sp, #20]
 800f99e:	f1cb 0300 	rsb	r3, fp, #0
 800f9a2:	9308      	str	r3, [sp, #32]
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9a8:	e7bf      	b.n	800f92a <_dtoa_r+0x1e2>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dc52      	bgt.n	800fa5a <_dtoa_r+0x312>
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	9304      	str	r3, [sp, #16]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	920a      	str	r2, [sp, #40]	; 0x28
 800f9be:	e00b      	b.n	800f9d8 <_dtoa_r+0x290>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e7f3      	b.n	800f9ac <_dtoa_r+0x264>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9ca:	445b      	add	r3, fp
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	9304      	str	r3, [sp, #16]
 800f9d4:	bfb8      	it	lt
 800f9d6:	2301      	movlt	r3, #1
 800f9d8:	69e0      	ldr	r0, [r4, #28]
 800f9da:	2100      	movs	r1, #0
 800f9dc:	2204      	movs	r2, #4
 800f9de:	f102 0614 	add.w	r6, r2, #20
 800f9e2:	429e      	cmp	r6, r3
 800f9e4:	d93d      	bls.n	800fa62 <_dtoa_r+0x31a>
 800f9e6:	6041      	str	r1, [r0, #4]
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f000 fd9f 	bl	801052c <_Balloc>
 800f9ee:	9000      	str	r0, [sp, #0]
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d139      	bne.n	800fa68 <_dtoa_r+0x320>
 800f9f4:	4b16      	ldr	r3, [pc, #88]	; (800fa50 <_dtoa_r+0x308>)
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	f240 11af 	movw	r1, #431	; 0x1af
 800f9fc:	e6bd      	b.n	800f77a <_dtoa_r+0x32>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e7e1      	b.n	800f9c6 <_dtoa_r+0x27e>
 800fa02:	2501      	movs	r5, #1
 800fa04:	2300      	movs	r3, #0
 800fa06:	9307      	str	r3, [sp, #28]
 800fa08:	9509      	str	r5, [sp, #36]	; 0x24
 800fa0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa0e:	9301      	str	r3, [sp, #4]
 800fa10:	9304      	str	r3, [sp, #16]
 800fa12:	2200      	movs	r2, #0
 800fa14:	2312      	movs	r3, #18
 800fa16:	e7d1      	b.n	800f9bc <_dtoa_r+0x274>
 800fa18:	636f4361 	.word	0x636f4361
 800fa1c:	3fd287a7 	.word	0x3fd287a7
 800fa20:	8b60c8b3 	.word	0x8b60c8b3
 800fa24:	3fc68a28 	.word	0x3fc68a28
 800fa28:	509f79fb 	.word	0x509f79fb
 800fa2c:	3fd34413 	.word	0x3fd34413
 800fa30:	08011be9 	.word	0x08011be9
 800fa34:	08011c00 	.word	0x08011c00
 800fa38:	7ff00000 	.word	0x7ff00000
 800fa3c:	08011be5 	.word	0x08011be5
 800fa40:	08011bdc 	.word	0x08011bdc
 800fa44:	08011bb9 	.word	0x08011bb9
 800fa48:	3ff80000 	.word	0x3ff80000
 800fa4c:	08011cf0 	.word	0x08011cf0
 800fa50:	08011c58 	.word	0x08011c58
 800fa54:	2301      	movs	r3, #1
 800fa56:	9309      	str	r3, [sp, #36]	; 0x24
 800fa58:	e7d7      	b.n	800fa0a <_dtoa_r+0x2c2>
 800fa5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	e7ba      	b.n	800f9d8 <_dtoa_r+0x290>
 800fa62:	3101      	adds	r1, #1
 800fa64:	0052      	lsls	r2, r2, #1
 800fa66:	e7ba      	b.n	800f9de <_dtoa_r+0x296>
 800fa68:	69e3      	ldr	r3, [r4, #28]
 800fa6a:	9a00      	ldr	r2, [sp, #0]
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	9b04      	ldr	r3, [sp, #16]
 800fa70:	2b0e      	cmp	r3, #14
 800fa72:	f200 80a8 	bhi.w	800fbc6 <_dtoa_r+0x47e>
 800fa76:	2d00      	cmp	r5, #0
 800fa78:	f000 80a5 	beq.w	800fbc6 <_dtoa_r+0x47e>
 800fa7c:	f1bb 0f00 	cmp.w	fp, #0
 800fa80:	dd38      	ble.n	800faf4 <_dtoa_r+0x3ac>
 800fa82:	4bc0      	ldr	r3, [pc, #768]	; (800fd84 <_dtoa_r+0x63c>)
 800fa84:	f00b 020f 	and.w	r2, fp, #15
 800fa88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fa90:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa94:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fa98:	d019      	beq.n	800face <_dtoa_r+0x386>
 800fa9a:	4bbb      	ldr	r3, [pc, #748]	; (800fd88 <_dtoa_r+0x640>)
 800fa9c:	ec51 0b18 	vmov	r0, r1, d8
 800faa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800faa4:	f7f0 feda 	bl	800085c <__aeabi_ddiv>
 800faa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faac:	f008 080f 	and.w	r8, r8, #15
 800fab0:	2503      	movs	r5, #3
 800fab2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fd88 <_dtoa_r+0x640>
 800fab6:	f1b8 0f00 	cmp.w	r8, #0
 800faba:	d10a      	bne.n	800fad2 <_dtoa_r+0x38a>
 800fabc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fac0:	4632      	mov	r2, r6
 800fac2:	463b      	mov	r3, r7
 800fac4:	f7f0 feca 	bl	800085c <__aeabi_ddiv>
 800fac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800facc:	e02b      	b.n	800fb26 <_dtoa_r+0x3de>
 800face:	2502      	movs	r5, #2
 800fad0:	e7ef      	b.n	800fab2 <_dtoa_r+0x36a>
 800fad2:	f018 0f01 	tst.w	r8, #1
 800fad6:	d008      	beq.n	800faea <_dtoa_r+0x3a2>
 800fad8:	4630      	mov	r0, r6
 800fada:	4639      	mov	r1, r7
 800fadc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fae0:	f7f0 fd92 	bl	8000608 <__aeabi_dmul>
 800fae4:	3501      	adds	r5, #1
 800fae6:	4606      	mov	r6, r0
 800fae8:	460f      	mov	r7, r1
 800faea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800faee:	f109 0908 	add.w	r9, r9, #8
 800faf2:	e7e0      	b.n	800fab6 <_dtoa_r+0x36e>
 800faf4:	f000 809f 	beq.w	800fc36 <_dtoa_r+0x4ee>
 800faf8:	f1cb 0600 	rsb	r6, fp, #0
 800fafc:	4ba1      	ldr	r3, [pc, #644]	; (800fd84 <_dtoa_r+0x63c>)
 800fafe:	4fa2      	ldr	r7, [pc, #648]	; (800fd88 <_dtoa_r+0x640>)
 800fb00:	f006 020f 	and.w	r2, r6, #15
 800fb04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0c:	ec51 0b18 	vmov	r0, r1, d8
 800fb10:	f7f0 fd7a 	bl	8000608 <__aeabi_dmul>
 800fb14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb18:	1136      	asrs	r6, r6, #4
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	2502      	movs	r5, #2
 800fb1e:	2e00      	cmp	r6, #0
 800fb20:	d17e      	bne.n	800fc20 <_dtoa_r+0x4d8>
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1d0      	bne.n	800fac8 <_dtoa_r+0x380>
 800fb26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f000 8084 	beq.w	800fc3a <_dtoa_r+0x4f2>
 800fb32:	4b96      	ldr	r3, [pc, #600]	; (800fd8c <_dtoa_r+0x644>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	4640      	mov	r0, r8
 800fb38:	4649      	mov	r1, r9
 800fb3a:	f7f0 ffd7 	bl	8000aec <__aeabi_dcmplt>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d07b      	beq.n	800fc3a <_dtoa_r+0x4f2>
 800fb42:	9b04      	ldr	r3, [sp, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d078      	beq.n	800fc3a <_dtoa_r+0x4f2>
 800fb48:	9b01      	ldr	r3, [sp, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	dd39      	ble.n	800fbc2 <_dtoa_r+0x47a>
 800fb4e:	4b90      	ldr	r3, [pc, #576]	; (800fd90 <_dtoa_r+0x648>)
 800fb50:	2200      	movs	r2, #0
 800fb52:	4640      	mov	r0, r8
 800fb54:	4649      	mov	r1, r9
 800fb56:	f7f0 fd57 	bl	8000608 <__aeabi_dmul>
 800fb5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb5e:	9e01      	ldr	r6, [sp, #4]
 800fb60:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fb64:	3501      	adds	r5, #1
 800fb66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f7f0 fce2 	bl	8000534 <__aeabi_i2d>
 800fb70:	4642      	mov	r2, r8
 800fb72:	464b      	mov	r3, r9
 800fb74:	f7f0 fd48 	bl	8000608 <__aeabi_dmul>
 800fb78:	4b86      	ldr	r3, [pc, #536]	; (800fd94 <_dtoa_r+0x64c>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f7f0 fb8e 	bl	800029c <__adddf3>
 800fb80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb88:	9303      	str	r3, [sp, #12]
 800fb8a:	2e00      	cmp	r6, #0
 800fb8c:	d158      	bne.n	800fc40 <_dtoa_r+0x4f8>
 800fb8e:	4b82      	ldr	r3, [pc, #520]	; (800fd98 <_dtoa_r+0x650>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	4640      	mov	r0, r8
 800fb94:	4649      	mov	r1, r9
 800fb96:	f7f0 fb7f 	bl	8000298 <__aeabi_dsub>
 800fb9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb9e:	4680      	mov	r8, r0
 800fba0:	4689      	mov	r9, r1
 800fba2:	f7f0 ffc1 	bl	8000b28 <__aeabi_dcmpgt>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	f040 8296 	bne.w	80100d8 <_dtoa_r+0x990>
 800fbac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fbb0:	4640      	mov	r0, r8
 800fbb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbb6:	4649      	mov	r1, r9
 800fbb8:	f7f0 ff98 	bl	8000aec <__aeabi_dcmplt>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	f040 8289 	bne.w	80100d4 <_dtoa_r+0x98c>
 800fbc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fbc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f2c0 814e 	blt.w	800fe6a <_dtoa_r+0x722>
 800fbce:	f1bb 0f0e 	cmp.w	fp, #14
 800fbd2:	f300 814a 	bgt.w	800fe6a <_dtoa_r+0x722>
 800fbd6:	4b6b      	ldr	r3, [pc, #428]	; (800fd84 <_dtoa_r+0x63c>)
 800fbd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fbdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f280 80dc 	bge.w	800fda0 <_dtoa_r+0x658>
 800fbe8:	9b04      	ldr	r3, [sp, #16]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f300 80d8 	bgt.w	800fda0 <_dtoa_r+0x658>
 800fbf0:	f040 826f 	bne.w	80100d2 <_dtoa_r+0x98a>
 800fbf4:	4b68      	ldr	r3, [pc, #416]	; (800fd98 <_dtoa_r+0x650>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	4649      	mov	r1, r9
 800fbfc:	f7f0 fd04 	bl	8000608 <__aeabi_dmul>
 800fc00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc04:	f7f0 ff86 	bl	8000b14 <__aeabi_dcmpge>
 800fc08:	9e04      	ldr	r6, [sp, #16]
 800fc0a:	4637      	mov	r7, r6
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	f040 8245 	bne.w	801009c <_dtoa_r+0x954>
 800fc12:	9d00      	ldr	r5, [sp, #0]
 800fc14:	2331      	movs	r3, #49	; 0x31
 800fc16:	f805 3b01 	strb.w	r3, [r5], #1
 800fc1a:	f10b 0b01 	add.w	fp, fp, #1
 800fc1e:	e241      	b.n	80100a4 <_dtoa_r+0x95c>
 800fc20:	07f2      	lsls	r2, r6, #31
 800fc22:	d505      	bpl.n	800fc30 <_dtoa_r+0x4e8>
 800fc24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc28:	f7f0 fcee 	bl	8000608 <__aeabi_dmul>
 800fc2c:	3501      	adds	r5, #1
 800fc2e:	2301      	movs	r3, #1
 800fc30:	1076      	asrs	r6, r6, #1
 800fc32:	3708      	adds	r7, #8
 800fc34:	e773      	b.n	800fb1e <_dtoa_r+0x3d6>
 800fc36:	2502      	movs	r5, #2
 800fc38:	e775      	b.n	800fb26 <_dtoa_r+0x3de>
 800fc3a:	9e04      	ldr	r6, [sp, #16]
 800fc3c:	465f      	mov	r7, fp
 800fc3e:	e792      	b.n	800fb66 <_dtoa_r+0x41e>
 800fc40:	9900      	ldr	r1, [sp, #0]
 800fc42:	4b50      	ldr	r3, [pc, #320]	; (800fd84 <_dtoa_r+0x63c>)
 800fc44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc48:	4431      	add	r1, r6
 800fc4a:	9102      	str	r1, [sp, #8]
 800fc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc4e:	eeb0 9a47 	vmov.f32	s18, s14
 800fc52:	eef0 9a67 	vmov.f32	s19, s15
 800fc56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc5e:	2900      	cmp	r1, #0
 800fc60:	d044      	beq.n	800fcec <_dtoa_r+0x5a4>
 800fc62:	494e      	ldr	r1, [pc, #312]	; (800fd9c <_dtoa_r+0x654>)
 800fc64:	2000      	movs	r0, #0
 800fc66:	f7f0 fdf9 	bl	800085c <__aeabi_ddiv>
 800fc6a:	ec53 2b19 	vmov	r2, r3, d9
 800fc6e:	f7f0 fb13 	bl	8000298 <__aeabi_dsub>
 800fc72:	9d00      	ldr	r5, [sp, #0]
 800fc74:	ec41 0b19 	vmov	d9, r0, r1
 800fc78:	4649      	mov	r1, r9
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	f7f0 ff74 	bl	8000b68 <__aeabi_d2iz>
 800fc80:	4606      	mov	r6, r0
 800fc82:	f7f0 fc57 	bl	8000534 <__aeabi_i2d>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4640      	mov	r0, r8
 800fc8c:	4649      	mov	r1, r9
 800fc8e:	f7f0 fb03 	bl	8000298 <__aeabi_dsub>
 800fc92:	3630      	adds	r6, #48	; 0x30
 800fc94:	f805 6b01 	strb.w	r6, [r5], #1
 800fc98:	ec53 2b19 	vmov	r2, r3, d9
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4689      	mov	r9, r1
 800fca0:	f7f0 ff24 	bl	8000aec <__aeabi_dcmplt>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d164      	bne.n	800fd72 <_dtoa_r+0x62a>
 800fca8:	4642      	mov	r2, r8
 800fcaa:	464b      	mov	r3, r9
 800fcac:	4937      	ldr	r1, [pc, #220]	; (800fd8c <_dtoa_r+0x644>)
 800fcae:	2000      	movs	r0, #0
 800fcb0:	f7f0 faf2 	bl	8000298 <__aeabi_dsub>
 800fcb4:	ec53 2b19 	vmov	r2, r3, d9
 800fcb8:	f7f0 ff18 	bl	8000aec <__aeabi_dcmplt>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	f040 80b6 	bne.w	800fe2e <_dtoa_r+0x6e6>
 800fcc2:	9b02      	ldr	r3, [sp, #8]
 800fcc4:	429d      	cmp	r5, r3
 800fcc6:	f43f af7c 	beq.w	800fbc2 <_dtoa_r+0x47a>
 800fcca:	4b31      	ldr	r3, [pc, #196]	; (800fd90 <_dtoa_r+0x648>)
 800fccc:	ec51 0b19 	vmov	r0, r1, d9
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f7f0 fc99 	bl	8000608 <__aeabi_dmul>
 800fcd6:	4b2e      	ldr	r3, [pc, #184]	; (800fd90 <_dtoa_r+0x648>)
 800fcd8:	ec41 0b19 	vmov	d9, r0, r1
 800fcdc:	2200      	movs	r2, #0
 800fcde:	4640      	mov	r0, r8
 800fce0:	4649      	mov	r1, r9
 800fce2:	f7f0 fc91 	bl	8000608 <__aeabi_dmul>
 800fce6:	4680      	mov	r8, r0
 800fce8:	4689      	mov	r9, r1
 800fcea:	e7c5      	b.n	800fc78 <_dtoa_r+0x530>
 800fcec:	ec51 0b17 	vmov	r0, r1, d7
 800fcf0:	f7f0 fc8a 	bl	8000608 <__aeabi_dmul>
 800fcf4:	9b02      	ldr	r3, [sp, #8]
 800fcf6:	9d00      	ldr	r5, [sp, #0]
 800fcf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcfa:	ec41 0b19 	vmov	d9, r0, r1
 800fcfe:	4649      	mov	r1, r9
 800fd00:	4640      	mov	r0, r8
 800fd02:	f7f0 ff31 	bl	8000b68 <__aeabi_d2iz>
 800fd06:	4606      	mov	r6, r0
 800fd08:	f7f0 fc14 	bl	8000534 <__aeabi_i2d>
 800fd0c:	3630      	adds	r6, #48	; 0x30
 800fd0e:	4602      	mov	r2, r0
 800fd10:	460b      	mov	r3, r1
 800fd12:	4640      	mov	r0, r8
 800fd14:	4649      	mov	r1, r9
 800fd16:	f7f0 fabf 	bl	8000298 <__aeabi_dsub>
 800fd1a:	f805 6b01 	strb.w	r6, [r5], #1
 800fd1e:	9b02      	ldr	r3, [sp, #8]
 800fd20:	429d      	cmp	r5, r3
 800fd22:	4680      	mov	r8, r0
 800fd24:	4689      	mov	r9, r1
 800fd26:	f04f 0200 	mov.w	r2, #0
 800fd2a:	d124      	bne.n	800fd76 <_dtoa_r+0x62e>
 800fd2c:	4b1b      	ldr	r3, [pc, #108]	; (800fd9c <_dtoa_r+0x654>)
 800fd2e:	ec51 0b19 	vmov	r0, r1, d9
 800fd32:	f7f0 fab3 	bl	800029c <__adddf3>
 800fd36:	4602      	mov	r2, r0
 800fd38:	460b      	mov	r3, r1
 800fd3a:	4640      	mov	r0, r8
 800fd3c:	4649      	mov	r1, r9
 800fd3e:	f7f0 fef3 	bl	8000b28 <__aeabi_dcmpgt>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d173      	bne.n	800fe2e <_dtoa_r+0x6e6>
 800fd46:	ec53 2b19 	vmov	r2, r3, d9
 800fd4a:	4914      	ldr	r1, [pc, #80]	; (800fd9c <_dtoa_r+0x654>)
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	f7f0 faa3 	bl	8000298 <__aeabi_dsub>
 800fd52:	4602      	mov	r2, r0
 800fd54:	460b      	mov	r3, r1
 800fd56:	4640      	mov	r0, r8
 800fd58:	4649      	mov	r1, r9
 800fd5a:	f7f0 fec7 	bl	8000aec <__aeabi_dcmplt>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	f43f af2f 	beq.w	800fbc2 <_dtoa_r+0x47a>
 800fd64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fd66:	1e6b      	subs	r3, r5, #1
 800fd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd6e:	2b30      	cmp	r3, #48	; 0x30
 800fd70:	d0f8      	beq.n	800fd64 <_dtoa_r+0x61c>
 800fd72:	46bb      	mov	fp, r7
 800fd74:	e04a      	b.n	800fe0c <_dtoa_r+0x6c4>
 800fd76:	4b06      	ldr	r3, [pc, #24]	; (800fd90 <_dtoa_r+0x648>)
 800fd78:	f7f0 fc46 	bl	8000608 <__aeabi_dmul>
 800fd7c:	4680      	mov	r8, r0
 800fd7e:	4689      	mov	r9, r1
 800fd80:	e7bd      	b.n	800fcfe <_dtoa_r+0x5b6>
 800fd82:	bf00      	nop
 800fd84:	08011cf0 	.word	0x08011cf0
 800fd88:	08011cc8 	.word	0x08011cc8
 800fd8c:	3ff00000 	.word	0x3ff00000
 800fd90:	40240000 	.word	0x40240000
 800fd94:	401c0000 	.word	0x401c0000
 800fd98:	40140000 	.word	0x40140000
 800fd9c:	3fe00000 	.word	0x3fe00000
 800fda0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fda4:	9d00      	ldr	r5, [sp, #0]
 800fda6:	4642      	mov	r2, r8
 800fda8:	464b      	mov	r3, r9
 800fdaa:	4630      	mov	r0, r6
 800fdac:	4639      	mov	r1, r7
 800fdae:	f7f0 fd55 	bl	800085c <__aeabi_ddiv>
 800fdb2:	f7f0 fed9 	bl	8000b68 <__aeabi_d2iz>
 800fdb6:	9001      	str	r0, [sp, #4]
 800fdb8:	f7f0 fbbc 	bl	8000534 <__aeabi_i2d>
 800fdbc:	4642      	mov	r2, r8
 800fdbe:	464b      	mov	r3, r9
 800fdc0:	f7f0 fc22 	bl	8000608 <__aeabi_dmul>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	4630      	mov	r0, r6
 800fdca:	4639      	mov	r1, r7
 800fdcc:	f7f0 fa64 	bl	8000298 <__aeabi_dsub>
 800fdd0:	9e01      	ldr	r6, [sp, #4]
 800fdd2:	9f04      	ldr	r7, [sp, #16]
 800fdd4:	3630      	adds	r6, #48	; 0x30
 800fdd6:	f805 6b01 	strb.w	r6, [r5], #1
 800fdda:	9e00      	ldr	r6, [sp, #0]
 800fddc:	1bae      	subs	r6, r5, r6
 800fdde:	42b7      	cmp	r7, r6
 800fde0:	4602      	mov	r2, r0
 800fde2:	460b      	mov	r3, r1
 800fde4:	d134      	bne.n	800fe50 <_dtoa_r+0x708>
 800fde6:	f7f0 fa59 	bl	800029c <__adddf3>
 800fdea:	4642      	mov	r2, r8
 800fdec:	464b      	mov	r3, r9
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460f      	mov	r7, r1
 800fdf2:	f7f0 fe99 	bl	8000b28 <__aeabi_dcmpgt>
 800fdf6:	b9c8      	cbnz	r0, 800fe2c <_dtoa_r+0x6e4>
 800fdf8:	4642      	mov	r2, r8
 800fdfa:	464b      	mov	r3, r9
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	4639      	mov	r1, r7
 800fe00:	f7f0 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe04:	b110      	cbz	r0, 800fe0c <_dtoa_r+0x6c4>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	07db      	lsls	r3, r3, #31
 800fe0a:	d40f      	bmi.n	800fe2c <_dtoa_r+0x6e4>
 800fe0c:	4651      	mov	r1, sl
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f000 fbcc 	bl	80105ac <_Bfree>
 800fe14:	2300      	movs	r3, #0
 800fe16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe18:	702b      	strb	r3, [r5, #0]
 800fe1a:	f10b 0301 	add.w	r3, fp, #1
 800fe1e:	6013      	str	r3, [r2, #0]
 800fe20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f43f ace2 	beq.w	800f7ec <_dtoa_r+0xa4>
 800fe28:	601d      	str	r5, [r3, #0]
 800fe2a:	e4df      	b.n	800f7ec <_dtoa_r+0xa4>
 800fe2c:	465f      	mov	r7, fp
 800fe2e:	462b      	mov	r3, r5
 800fe30:	461d      	mov	r5, r3
 800fe32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe36:	2a39      	cmp	r2, #57	; 0x39
 800fe38:	d106      	bne.n	800fe48 <_dtoa_r+0x700>
 800fe3a:	9a00      	ldr	r2, [sp, #0]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d1f7      	bne.n	800fe30 <_dtoa_r+0x6e8>
 800fe40:	9900      	ldr	r1, [sp, #0]
 800fe42:	2230      	movs	r2, #48	; 0x30
 800fe44:	3701      	adds	r7, #1
 800fe46:	700a      	strb	r2, [r1, #0]
 800fe48:	781a      	ldrb	r2, [r3, #0]
 800fe4a:	3201      	adds	r2, #1
 800fe4c:	701a      	strb	r2, [r3, #0]
 800fe4e:	e790      	b.n	800fd72 <_dtoa_r+0x62a>
 800fe50:	4ba3      	ldr	r3, [pc, #652]	; (80100e0 <_dtoa_r+0x998>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	f7f0 fbd8 	bl	8000608 <__aeabi_dmul>
 800fe58:	2200      	movs	r2, #0
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	460f      	mov	r7, r1
 800fe60:	f7f0 fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d09e      	beq.n	800fda6 <_dtoa_r+0x65e>
 800fe68:	e7d0      	b.n	800fe0c <_dtoa_r+0x6c4>
 800fe6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe6c:	2a00      	cmp	r2, #0
 800fe6e:	f000 80ca 	beq.w	8010006 <_dtoa_r+0x8be>
 800fe72:	9a07      	ldr	r2, [sp, #28]
 800fe74:	2a01      	cmp	r2, #1
 800fe76:	f300 80ad 	bgt.w	800ffd4 <_dtoa_r+0x88c>
 800fe7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe7c:	2a00      	cmp	r2, #0
 800fe7e:	f000 80a5 	beq.w	800ffcc <_dtoa_r+0x884>
 800fe82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe86:	9e08      	ldr	r6, [sp, #32]
 800fe88:	9d05      	ldr	r5, [sp, #20]
 800fe8a:	9a05      	ldr	r2, [sp, #20]
 800fe8c:	441a      	add	r2, r3
 800fe8e:	9205      	str	r2, [sp, #20]
 800fe90:	9a06      	ldr	r2, [sp, #24]
 800fe92:	2101      	movs	r1, #1
 800fe94:	441a      	add	r2, r3
 800fe96:	4620      	mov	r0, r4
 800fe98:	9206      	str	r2, [sp, #24]
 800fe9a:	f000 fc3d 	bl	8010718 <__i2b>
 800fe9e:	4607      	mov	r7, r0
 800fea0:	b165      	cbz	r5, 800febc <_dtoa_r+0x774>
 800fea2:	9b06      	ldr	r3, [sp, #24]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	dd09      	ble.n	800febc <_dtoa_r+0x774>
 800fea8:	42ab      	cmp	r3, r5
 800feaa:	9a05      	ldr	r2, [sp, #20]
 800feac:	bfa8      	it	ge
 800feae:	462b      	movge	r3, r5
 800feb0:	1ad2      	subs	r2, r2, r3
 800feb2:	9205      	str	r2, [sp, #20]
 800feb4:	9a06      	ldr	r2, [sp, #24]
 800feb6:	1aed      	subs	r5, r5, r3
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	9306      	str	r3, [sp, #24]
 800febc:	9b08      	ldr	r3, [sp, #32]
 800febe:	b1f3      	cbz	r3, 800fefe <_dtoa_r+0x7b6>
 800fec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f000 80a3 	beq.w	801000e <_dtoa_r+0x8c6>
 800fec8:	2e00      	cmp	r6, #0
 800feca:	dd10      	ble.n	800feee <_dtoa_r+0x7a6>
 800fecc:	4639      	mov	r1, r7
 800fece:	4632      	mov	r2, r6
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 fce1 	bl	8010898 <__pow5mult>
 800fed6:	4652      	mov	r2, sl
 800fed8:	4601      	mov	r1, r0
 800feda:	4607      	mov	r7, r0
 800fedc:	4620      	mov	r0, r4
 800fede:	f000 fc31 	bl	8010744 <__multiply>
 800fee2:	4651      	mov	r1, sl
 800fee4:	4680      	mov	r8, r0
 800fee6:	4620      	mov	r0, r4
 800fee8:	f000 fb60 	bl	80105ac <_Bfree>
 800feec:	46c2      	mov	sl, r8
 800feee:	9b08      	ldr	r3, [sp, #32]
 800fef0:	1b9a      	subs	r2, r3, r6
 800fef2:	d004      	beq.n	800fefe <_dtoa_r+0x7b6>
 800fef4:	4651      	mov	r1, sl
 800fef6:	4620      	mov	r0, r4
 800fef8:	f000 fcce 	bl	8010898 <__pow5mult>
 800fefc:	4682      	mov	sl, r0
 800fefe:	2101      	movs	r1, #1
 800ff00:	4620      	mov	r0, r4
 800ff02:	f000 fc09 	bl	8010718 <__i2b>
 800ff06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	f340 8081 	ble.w	8010012 <_dtoa_r+0x8ca>
 800ff10:	461a      	mov	r2, r3
 800ff12:	4601      	mov	r1, r0
 800ff14:	4620      	mov	r0, r4
 800ff16:	f000 fcbf 	bl	8010898 <__pow5mult>
 800ff1a:	9b07      	ldr	r3, [sp, #28]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	4606      	mov	r6, r0
 800ff20:	dd7a      	ble.n	8010018 <_dtoa_r+0x8d0>
 800ff22:	f04f 0800 	mov.w	r8, #0
 800ff26:	6933      	ldr	r3, [r6, #16]
 800ff28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ff2c:	6918      	ldr	r0, [r3, #16]
 800ff2e:	f000 fba5 	bl	801067c <__hi0bits>
 800ff32:	f1c0 0020 	rsb	r0, r0, #32
 800ff36:	9b06      	ldr	r3, [sp, #24]
 800ff38:	4418      	add	r0, r3
 800ff3a:	f010 001f 	ands.w	r0, r0, #31
 800ff3e:	f000 8094 	beq.w	801006a <_dtoa_r+0x922>
 800ff42:	f1c0 0320 	rsb	r3, r0, #32
 800ff46:	2b04      	cmp	r3, #4
 800ff48:	f340 8085 	ble.w	8010056 <_dtoa_r+0x90e>
 800ff4c:	9b05      	ldr	r3, [sp, #20]
 800ff4e:	f1c0 001c 	rsb	r0, r0, #28
 800ff52:	4403      	add	r3, r0
 800ff54:	9305      	str	r3, [sp, #20]
 800ff56:	9b06      	ldr	r3, [sp, #24]
 800ff58:	4403      	add	r3, r0
 800ff5a:	4405      	add	r5, r0
 800ff5c:	9306      	str	r3, [sp, #24]
 800ff5e:	9b05      	ldr	r3, [sp, #20]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	dd05      	ble.n	800ff70 <_dtoa_r+0x828>
 800ff64:	4651      	mov	r1, sl
 800ff66:	461a      	mov	r2, r3
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f000 fcef 	bl	801094c <__lshift>
 800ff6e:	4682      	mov	sl, r0
 800ff70:	9b06      	ldr	r3, [sp, #24]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	dd05      	ble.n	800ff82 <_dtoa_r+0x83a>
 800ff76:	4631      	mov	r1, r6
 800ff78:	461a      	mov	r2, r3
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f000 fce6 	bl	801094c <__lshift>
 800ff80:	4606      	mov	r6, r0
 800ff82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d072      	beq.n	801006e <_dtoa_r+0x926>
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4650      	mov	r0, sl
 800ff8c:	f000 fd4a 	bl	8010a24 <__mcmp>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	da6c      	bge.n	801006e <_dtoa_r+0x926>
 800ff94:	2300      	movs	r3, #0
 800ff96:	4651      	mov	r1, sl
 800ff98:	220a      	movs	r2, #10
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f000 fb28 	bl	80105f0 <__multadd>
 800ffa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ffa6:	4682      	mov	sl, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 81b0 	beq.w	801030e <_dtoa_r+0xbc6>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	220a      	movs	r2, #10
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f000 fb1b 	bl	80105f0 <__multadd>
 800ffba:	9b01      	ldr	r3, [sp, #4]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	4607      	mov	r7, r0
 800ffc0:	f300 8096 	bgt.w	80100f0 <_dtoa_r+0x9a8>
 800ffc4:	9b07      	ldr	r3, [sp, #28]
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	dc59      	bgt.n	801007e <_dtoa_r+0x936>
 800ffca:	e091      	b.n	80100f0 <_dtoa_r+0x9a8>
 800ffcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ffd2:	e758      	b.n	800fe86 <_dtoa_r+0x73e>
 800ffd4:	9b04      	ldr	r3, [sp, #16]
 800ffd6:	1e5e      	subs	r6, r3, #1
 800ffd8:	9b08      	ldr	r3, [sp, #32]
 800ffda:	42b3      	cmp	r3, r6
 800ffdc:	bfbf      	itttt	lt
 800ffde:	9b08      	ldrlt	r3, [sp, #32]
 800ffe0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ffe2:	9608      	strlt	r6, [sp, #32]
 800ffe4:	1af3      	sublt	r3, r6, r3
 800ffe6:	bfb4      	ite	lt
 800ffe8:	18d2      	addlt	r2, r2, r3
 800ffea:	1b9e      	subge	r6, r3, r6
 800ffec:	9b04      	ldr	r3, [sp, #16]
 800ffee:	bfbc      	itt	lt
 800fff0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fff2:	2600      	movlt	r6, #0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	bfb7      	itett	lt
 800fff8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fffc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010000:	1a9d      	sublt	r5, r3, r2
 8010002:	2300      	movlt	r3, #0
 8010004:	e741      	b.n	800fe8a <_dtoa_r+0x742>
 8010006:	9e08      	ldr	r6, [sp, #32]
 8010008:	9d05      	ldr	r5, [sp, #20]
 801000a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801000c:	e748      	b.n	800fea0 <_dtoa_r+0x758>
 801000e:	9a08      	ldr	r2, [sp, #32]
 8010010:	e770      	b.n	800fef4 <_dtoa_r+0x7ac>
 8010012:	9b07      	ldr	r3, [sp, #28]
 8010014:	2b01      	cmp	r3, #1
 8010016:	dc19      	bgt.n	801004c <_dtoa_r+0x904>
 8010018:	9b02      	ldr	r3, [sp, #8]
 801001a:	b9bb      	cbnz	r3, 801004c <_dtoa_r+0x904>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010022:	b99b      	cbnz	r3, 801004c <_dtoa_r+0x904>
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801002a:	0d1b      	lsrs	r3, r3, #20
 801002c:	051b      	lsls	r3, r3, #20
 801002e:	b183      	cbz	r3, 8010052 <_dtoa_r+0x90a>
 8010030:	9b05      	ldr	r3, [sp, #20]
 8010032:	3301      	adds	r3, #1
 8010034:	9305      	str	r3, [sp, #20]
 8010036:	9b06      	ldr	r3, [sp, #24]
 8010038:	3301      	adds	r3, #1
 801003a:	9306      	str	r3, [sp, #24]
 801003c:	f04f 0801 	mov.w	r8, #1
 8010040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010042:	2b00      	cmp	r3, #0
 8010044:	f47f af6f 	bne.w	800ff26 <_dtoa_r+0x7de>
 8010048:	2001      	movs	r0, #1
 801004a:	e774      	b.n	800ff36 <_dtoa_r+0x7ee>
 801004c:	f04f 0800 	mov.w	r8, #0
 8010050:	e7f6      	b.n	8010040 <_dtoa_r+0x8f8>
 8010052:	4698      	mov	r8, r3
 8010054:	e7f4      	b.n	8010040 <_dtoa_r+0x8f8>
 8010056:	d082      	beq.n	800ff5e <_dtoa_r+0x816>
 8010058:	9a05      	ldr	r2, [sp, #20]
 801005a:	331c      	adds	r3, #28
 801005c:	441a      	add	r2, r3
 801005e:	9205      	str	r2, [sp, #20]
 8010060:	9a06      	ldr	r2, [sp, #24]
 8010062:	441a      	add	r2, r3
 8010064:	441d      	add	r5, r3
 8010066:	9206      	str	r2, [sp, #24]
 8010068:	e779      	b.n	800ff5e <_dtoa_r+0x816>
 801006a:	4603      	mov	r3, r0
 801006c:	e7f4      	b.n	8010058 <_dtoa_r+0x910>
 801006e:	9b04      	ldr	r3, [sp, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	dc37      	bgt.n	80100e4 <_dtoa_r+0x99c>
 8010074:	9b07      	ldr	r3, [sp, #28]
 8010076:	2b02      	cmp	r3, #2
 8010078:	dd34      	ble.n	80100e4 <_dtoa_r+0x99c>
 801007a:	9b04      	ldr	r3, [sp, #16]
 801007c:	9301      	str	r3, [sp, #4]
 801007e:	9b01      	ldr	r3, [sp, #4]
 8010080:	b963      	cbnz	r3, 801009c <_dtoa_r+0x954>
 8010082:	4631      	mov	r1, r6
 8010084:	2205      	movs	r2, #5
 8010086:	4620      	mov	r0, r4
 8010088:	f000 fab2 	bl	80105f0 <__multadd>
 801008c:	4601      	mov	r1, r0
 801008e:	4606      	mov	r6, r0
 8010090:	4650      	mov	r0, sl
 8010092:	f000 fcc7 	bl	8010a24 <__mcmp>
 8010096:	2800      	cmp	r0, #0
 8010098:	f73f adbb 	bgt.w	800fc12 <_dtoa_r+0x4ca>
 801009c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801009e:	9d00      	ldr	r5, [sp, #0]
 80100a0:	ea6f 0b03 	mvn.w	fp, r3
 80100a4:	f04f 0800 	mov.w	r8, #0
 80100a8:	4631      	mov	r1, r6
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 fa7e 	bl	80105ac <_Bfree>
 80100b0:	2f00      	cmp	r7, #0
 80100b2:	f43f aeab 	beq.w	800fe0c <_dtoa_r+0x6c4>
 80100b6:	f1b8 0f00 	cmp.w	r8, #0
 80100ba:	d005      	beq.n	80100c8 <_dtoa_r+0x980>
 80100bc:	45b8      	cmp	r8, r7
 80100be:	d003      	beq.n	80100c8 <_dtoa_r+0x980>
 80100c0:	4641      	mov	r1, r8
 80100c2:	4620      	mov	r0, r4
 80100c4:	f000 fa72 	bl	80105ac <_Bfree>
 80100c8:	4639      	mov	r1, r7
 80100ca:	4620      	mov	r0, r4
 80100cc:	f000 fa6e 	bl	80105ac <_Bfree>
 80100d0:	e69c      	b.n	800fe0c <_dtoa_r+0x6c4>
 80100d2:	2600      	movs	r6, #0
 80100d4:	4637      	mov	r7, r6
 80100d6:	e7e1      	b.n	801009c <_dtoa_r+0x954>
 80100d8:	46bb      	mov	fp, r7
 80100da:	4637      	mov	r7, r6
 80100dc:	e599      	b.n	800fc12 <_dtoa_r+0x4ca>
 80100de:	bf00      	nop
 80100e0:	40240000 	.word	0x40240000
 80100e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f000 80c8 	beq.w	801027c <_dtoa_r+0xb34>
 80100ec:	9b04      	ldr	r3, [sp, #16]
 80100ee:	9301      	str	r3, [sp, #4]
 80100f0:	2d00      	cmp	r5, #0
 80100f2:	dd05      	ble.n	8010100 <_dtoa_r+0x9b8>
 80100f4:	4639      	mov	r1, r7
 80100f6:	462a      	mov	r2, r5
 80100f8:	4620      	mov	r0, r4
 80100fa:	f000 fc27 	bl	801094c <__lshift>
 80100fe:	4607      	mov	r7, r0
 8010100:	f1b8 0f00 	cmp.w	r8, #0
 8010104:	d05b      	beq.n	80101be <_dtoa_r+0xa76>
 8010106:	6879      	ldr	r1, [r7, #4]
 8010108:	4620      	mov	r0, r4
 801010a:	f000 fa0f 	bl	801052c <_Balloc>
 801010e:	4605      	mov	r5, r0
 8010110:	b928      	cbnz	r0, 801011e <_dtoa_r+0x9d6>
 8010112:	4b83      	ldr	r3, [pc, #524]	; (8010320 <_dtoa_r+0xbd8>)
 8010114:	4602      	mov	r2, r0
 8010116:	f240 21ef 	movw	r1, #751	; 0x2ef
 801011a:	f7ff bb2e 	b.w	800f77a <_dtoa_r+0x32>
 801011e:	693a      	ldr	r2, [r7, #16]
 8010120:	3202      	adds	r2, #2
 8010122:	0092      	lsls	r2, r2, #2
 8010124:	f107 010c 	add.w	r1, r7, #12
 8010128:	300c      	adds	r0, #12
 801012a:	f7ff fa75 	bl	800f618 <memcpy>
 801012e:	2201      	movs	r2, #1
 8010130:	4629      	mov	r1, r5
 8010132:	4620      	mov	r0, r4
 8010134:	f000 fc0a 	bl	801094c <__lshift>
 8010138:	9b00      	ldr	r3, [sp, #0]
 801013a:	3301      	adds	r3, #1
 801013c:	9304      	str	r3, [sp, #16]
 801013e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010142:	4413      	add	r3, r2
 8010144:	9308      	str	r3, [sp, #32]
 8010146:	9b02      	ldr	r3, [sp, #8]
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	46b8      	mov	r8, r7
 801014e:	9306      	str	r3, [sp, #24]
 8010150:	4607      	mov	r7, r0
 8010152:	9b04      	ldr	r3, [sp, #16]
 8010154:	4631      	mov	r1, r6
 8010156:	3b01      	subs	r3, #1
 8010158:	4650      	mov	r0, sl
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	f7ff fa6a 	bl	800f634 <quorem>
 8010160:	4641      	mov	r1, r8
 8010162:	9002      	str	r0, [sp, #8]
 8010164:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010168:	4650      	mov	r0, sl
 801016a:	f000 fc5b 	bl	8010a24 <__mcmp>
 801016e:	463a      	mov	r2, r7
 8010170:	9005      	str	r0, [sp, #20]
 8010172:	4631      	mov	r1, r6
 8010174:	4620      	mov	r0, r4
 8010176:	f000 fc71 	bl	8010a5c <__mdiff>
 801017a:	68c2      	ldr	r2, [r0, #12]
 801017c:	4605      	mov	r5, r0
 801017e:	bb02      	cbnz	r2, 80101c2 <_dtoa_r+0xa7a>
 8010180:	4601      	mov	r1, r0
 8010182:	4650      	mov	r0, sl
 8010184:	f000 fc4e 	bl	8010a24 <__mcmp>
 8010188:	4602      	mov	r2, r0
 801018a:	4629      	mov	r1, r5
 801018c:	4620      	mov	r0, r4
 801018e:	9209      	str	r2, [sp, #36]	; 0x24
 8010190:	f000 fa0c 	bl	80105ac <_Bfree>
 8010194:	9b07      	ldr	r3, [sp, #28]
 8010196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010198:	9d04      	ldr	r5, [sp, #16]
 801019a:	ea43 0102 	orr.w	r1, r3, r2
 801019e:	9b06      	ldr	r3, [sp, #24]
 80101a0:	4319      	orrs	r1, r3
 80101a2:	d110      	bne.n	80101c6 <_dtoa_r+0xa7e>
 80101a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101a8:	d029      	beq.n	80101fe <_dtoa_r+0xab6>
 80101aa:	9b05      	ldr	r3, [sp, #20]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	dd02      	ble.n	80101b6 <_dtoa_r+0xa6e>
 80101b0:	9b02      	ldr	r3, [sp, #8]
 80101b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80101b6:	9b01      	ldr	r3, [sp, #4]
 80101b8:	f883 9000 	strb.w	r9, [r3]
 80101bc:	e774      	b.n	80100a8 <_dtoa_r+0x960>
 80101be:	4638      	mov	r0, r7
 80101c0:	e7ba      	b.n	8010138 <_dtoa_r+0x9f0>
 80101c2:	2201      	movs	r2, #1
 80101c4:	e7e1      	b.n	801018a <_dtoa_r+0xa42>
 80101c6:	9b05      	ldr	r3, [sp, #20]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	db04      	blt.n	80101d6 <_dtoa_r+0xa8e>
 80101cc:	9907      	ldr	r1, [sp, #28]
 80101ce:	430b      	orrs	r3, r1
 80101d0:	9906      	ldr	r1, [sp, #24]
 80101d2:	430b      	orrs	r3, r1
 80101d4:	d120      	bne.n	8010218 <_dtoa_r+0xad0>
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	dded      	ble.n	80101b6 <_dtoa_r+0xa6e>
 80101da:	4651      	mov	r1, sl
 80101dc:	2201      	movs	r2, #1
 80101de:	4620      	mov	r0, r4
 80101e0:	f000 fbb4 	bl	801094c <__lshift>
 80101e4:	4631      	mov	r1, r6
 80101e6:	4682      	mov	sl, r0
 80101e8:	f000 fc1c 	bl	8010a24 <__mcmp>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	dc03      	bgt.n	80101f8 <_dtoa_r+0xab0>
 80101f0:	d1e1      	bne.n	80101b6 <_dtoa_r+0xa6e>
 80101f2:	f019 0f01 	tst.w	r9, #1
 80101f6:	d0de      	beq.n	80101b6 <_dtoa_r+0xa6e>
 80101f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101fc:	d1d8      	bne.n	80101b0 <_dtoa_r+0xa68>
 80101fe:	9a01      	ldr	r2, [sp, #4]
 8010200:	2339      	movs	r3, #57	; 0x39
 8010202:	7013      	strb	r3, [r2, #0]
 8010204:	462b      	mov	r3, r5
 8010206:	461d      	mov	r5, r3
 8010208:	3b01      	subs	r3, #1
 801020a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801020e:	2a39      	cmp	r2, #57	; 0x39
 8010210:	d06c      	beq.n	80102ec <_dtoa_r+0xba4>
 8010212:	3201      	adds	r2, #1
 8010214:	701a      	strb	r2, [r3, #0]
 8010216:	e747      	b.n	80100a8 <_dtoa_r+0x960>
 8010218:	2a00      	cmp	r2, #0
 801021a:	dd07      	ble.n	801022c <_dtoa_r+0xae4>
 801021c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010220:	d0ed      	beq.n	80101fe <_dtoa_r+0xab6>
 8010222:	9a01      	ldr	r2, [sp, #4]
 8010224:	f109 0301 	add.w	r3, r9, #1
 8010228:	7013      	strb	r3, [r2, #0]
 801022a:	e73d      	b.n	80100a8 <_dtoa_r+0x960>
 801022c:	9b04      	ldr	r3, [sp, #16]
 801022e:	9a08      	ldr	r2, [sp, #32]
 8010230:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010234:	4293      	cmp	r3, r2
 8010236:	d043      	beq.n	80102c0 <_dtoa_r+0xb78>
 8010238:	4651      	mov	r1, sl
 801023a:	2300      	movs	r3, #0
 801023c:	220a      	movs	r2, #10
 801023e:	4620      	mov	r0, r4
 8010240:	f000 f9d6 	bl	80105f0 <__multadd>
 8010244:	45b8      	cmp	r8, r7
 8010246:	4682      	mov	sl, r0
 8010248:	f04f 0300 	mov.w	r3, #0
 801024c:	f04f 020a 	mov.w	r2, #10
 8010250:	4641      	mov	r1, r8
 8010252:	4620      	mov	r0, r4
 8010254:	d107      	bne.n	8010266 <_dtoa_r+0xb1e>
 8010256:	f000 f9cb 	bl	80105f0 <__multadd>
 801025a:	4680      	mov	r8, r0
 801025c:	4607      	mov	r7, r0
 801025e:	9b04      	ldr	r3, [sp, #16]
 8010260:	3301      	adds	r3, #1
 8010262:	9304      	str	r3, [sp, #16]
 8010264:	e775      	b.n	8010152 <_dtoa_r+0xa0a>
 8010266:	f000 f9c3 	bl	80105f0 <__multadd>
 801026a:	4639      	mov	r1, r7
 801026c:	4680      	mov	r8, r0
 801026e:	2300      	movs	r3, #0
 8010270:	220a      	movs	r2, #10
 8010272:	4620      	mov	r0, r4
 8010274:	f000 f9bc 	bl	80105f0 <__multadd>
 8010278:	4607      	mov	r7, r0
 801027a:	e7f0      	b.n	801025e <_dtoa_r+0xb16>
 801027c:	9b04      	ldr	r3, [sp, #16]
 801027e:	9301      	str	r3, [sp, #4]
 8010280:	9d00      	ldr	r5, [sp, #0]
 8010282:	4631      	mov	r1, r6
 8010284:	4650      	mov	r0, sl
 8010286:	f7ff f9d5 	bl	800f634 <quorem>
 801028a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801028e:	9b00      	ldr	r3, [sp, #0]
 8010290:	f805 9b01 	strb.w	r9, [r5], #1
 8010294:	1aea      	subs	r2, r5, r3
 8010296:	9b01      	ldr	r3, [sp, #4]
 8010298:	4293      	cmp	r3, r2
 801029a:	dd07      	ble.n	80102ac <_dtoa_r+0xb64>
 801029c:	4651      	mov	r1, sl
 801029e:	2300      	movs	r3, #0
 80102a0:	220a      	movs	r2, #10
 80102a2:	4620      	mov	r0, r4
 80102a4:	f000 f9a4 	bl	80105f0 <__multadd>
 80102a8:	4682      	mov	sl, r0
 80102aa:	e7ea      	b.n	8010282 <_dtoa_r+0xb3a>
 80102ac:	9b01      	ldr	r3, [sp, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	bfc8      	it	gt
 80102b2:	461d      	movgt	r5, r3
 80102b4:	9b00      	ldr	r3, [sp, #0]
 80102b6:	bfd8      	it	le
 80102b8:	2501      	movle	r5, #1
 80102ba:	441d      	add	r5, r3
 80102bc:	f04f 0800 	mov.w	r8, #0
 80102c0:	4651      	mov	r1, sl
 80102c2:	2201      	movs	r2, #1
 80102c4:	4620      	mov	r0, r4
 80102c6:	f000 fb41 	bl	801094c <__lshift>
 80102ca:	4631      	mov	r1, r6
 80102cc:	4682      	mov	sl, r0
 80102ce:	f000 fba9 	bl	8010a24 <__mcmp>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	dc96      	bgt.n	8010204 <_dtoa_r+0xabc>
 80102d6:	d102      	bne.n	80102de <_dtoa_r+0xb96>
 80102d8:	f019 0f01 	tst.w	r9, #1
 80102dc:	d192      	bne.n	8010204 <_dtoa_r+0xabc>
 80102de:	462b      	mov	r3, r5
 80102e0:	461d      	mov	r5, r3
 80102e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102e6:	2a30      	cmp	r2, #48	; 0x30
 80102e8:	d0fa      	beq.n	80102e0 <_dtoa_r+0xb98>
 80102ea:	e6dd      	b.n	80100a8 <_dtoa_r+0x960>
 80102ec:	9a00      	ldr	r2, [sp, #0]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d189      	bne.n	8010206 <_dtoa_r+0xabe>
 80102f2:	f10b 0b01 	add.w	fp, fp, #1
 80102f6:	2331      	movs	r3, #49	; 0x31
 80102f8:	e796      	b.n	8010228 <_dtoa_r+0xae0>
 80102fa:	4b0a      	ldr	r3, [pc, #40]	; (8010324 <_dtoa_r+0xbdc>)
 80102fc:	f7ff ba99 	b.w	800f832 <_dtoa_r+0xea>
 8010300:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010302:	2b00      	cmp	r3, #0
 8010304:	f47f aa6d 	bne.w	800f7e2 <_dtoa_r+0x9a>
 8010308:	4b07      	ldr	r3, [pc, #28]	; (8010328 <_dtoa_r+0xbe0>)
 801030a:	f7ff ba92 	b.w	800f832 <_dtoa_r+0xea>
 801030e:	9b01      	ldr	r3, [sp, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	dcb5      	bgt.n	8010280 <_dtoa_r+0xb38>
 8010314:	9b07      	ldr	r3, [sp, #28]
 8010316:	2b02      	cmp	r3, #2
 8010318:	f73f aeb1 	bgt.w	801007e <_dtoa_r+0x936>
 801031c:	e7b0      	b.n	8010280 <_dtoa_r+0xb38>
 801031e:	bf00      	nop
 8010320:	08011c58 	.word	0x08011c58
 8010324:	08011bb8 	.word	0x08011bb8
 8010328:	08011bdc 	.word	0x08011bdc

0801032c <_free_r>:
 801032c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801032e:	2900      	cmp	r1, #0
 8010330:	d044      	beq.n	80103bc <_free_r+0x90>
 8010332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010336:	9001      	str	r0, [sp, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	f1a1 0404 	sub.w	r4, r1, #4
 801033e:	bfb8      	it	lt
 8010340:	18e4      	addlt	r4, r4, r3
 8010342:	f000 f8e7 	bl	8010514 <__malloc_lock>
 8010346:	4a1e      	ldr	r2, [pc, #120]	; (80103c0 <_free_r+0x94>)
 8010348:	9801      	ldr	r0, [sp, #4]
 801034a:	6813      	ldr	r3, [r2, #0]
 801034c:	b933      	cbnz	r3, 801035c <_free_r+0x30>
 801034e:	6063      	str	r3, [r4, #4]
 8010350:	6014      	str	r4, [r2, #0]
 8010352:	b003      	add	sp, #12
 8010354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010358:	f000 b8e2 	b.w	8010520 <__malloc_unlock>
 801035c:	42a3      	cmp	r3, r4
 801035e:	d908      	bls.n	8010372 <_free_r+0x46>
 8010360:	6825      	ldr	r5, [r4, #0]
 8010362:	1961      	adds	r1, r4, r5
 8010364:	428b      	cmp	r3, r1
 8010366:	bf01      	itttt	eq
 8010368:	6819      	ldreq	r1, [r3, #0]
 801036a:	685b      	ldreq	r3, [r3, #4]
 801036c:	1949      	addeq	r1, r1, r5
 801036e:	6021      	streq	r1, [r4, #0]
 8010370:	e7ed      	b.n	801034e <_free_r+0x22>
 8010372:	461a      	mov	r2, r3
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	b10b      	cbz	r3, 801037c <_free_r+0x50>
 8010378:	42a3      	cmp	r3, r4
 801037a:	d9fa      	bls.n	8010372 <_free_r+0x46>
 801037c:	6811      	ldr	r1, [r2, #0]
 801037e:	1855      	adds	r5, r2, r1
 8010380:	42a5      	cmp	r5, r4
 8010382:	d10b      	bne.n	801039c <_free_r+0x70>
 8010384:	6824      	ldr	r4, [r4, #0]
 8010386:	4421      	add	r1, r4
 8010388:	1854      	adds	r4, r2, r1
 801038a:	42a3      	cmp	r3, r4
 801038c:	6011      	str	r1, [r2, #0]
 801038e:	d1e0      	bne.n	8010352 <_free_r+0x26>
 8010390:	681c      	ldr	r4, [r3, #0]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	6053      	str	r3, [r2, #4]
 8010396:	440c      	add	r4, r1
 8010398:	6014      	str	r4, [r2, #0]
 801039a:	e7da      	b.n	8010352 <_free_r+0x26>
 801039c:	d902      	bls.n	80103a4 <_free_r+0x78>
 801039e:	230c      	movs	r3, #12
 80103a0:	6003      	str	r3, [r0, #0]
 80103a2:	e7d6      	b.n	8010352 <_free_r+0x26>
 80103a4:	6825      	ldr	r5, [r4, #0]
 80103a6:	1961      	adds	r1, r4, r5
 80103a8:	428b      	cmp	r3, r1
 80103aa:	bf04      	itt	eq
 80103ac:	6819      	ldreq	r1, [r3, #0]
 80103ae:	685b      	ldreq	r3, [r3, #4]
 80103b0:	6063      	str	r3, [r4, #4]
 80103b2:	bf04      	itt	eq
 80103b4:	1949      	addeq	r1, r1, r5
 80103b6:	6021      	streq	r1, [r4, #0]
 80103b8:	6054      	str	r4, [r2, #4]
 80103ba:	e7ca      	b.n	8010352 <_free_r+0x26>
 80103bc:	b003      	add	sp, #12
 80103be:	bd30      	pop	{r4, r5, pc}
 80103c0:	200096d0 	.word	0x200096d0

080103c4 <malloc>:
 80103c4:	4b02      	ldr	r3, [pc, #8]	; (80103d0 <malloc+0xc>)
 80103c6:	4601      	mov	r1, r0
 80103c8:	6818      	ldr	r0, [r3, #0]
 80103ca:	f000 b823 	b.w	8010414 <_malloc_r>
 80103ce:	bf00      	nop
 80103d0:	2000006c 	.word	0x2000006c

080103d4 <sbrk_aligned>:
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	4e0e      	ldr	r6, [pc, #56]	; (8010410 <sbrk_aligned+0x3c>)
 80103d8:	460c      	mov	r4, r1
 80103da:	6831      	ldr	r1, [r6, #0]
 80103dc:	4605      	mov	r5, r0
 80103de:	b911      	cbnz	r1, 80103e6 <sbrk_aligned+0x12>
 80103e0:	f000 fcce 	bl	8010d80 <_sbrk_r>
 80103e4:	6030      	str	r0, [r6, #0]
 80103e6:	4621      	mov	r1, r4
 80103e8:	4628      	mov	r0, r5
 80103ea:	f000 fcc9 	bl	8010d80 <_sbrk_r>
 80103ee:	1c43      	adds	r3, r0, #1
 80103f0:	d00a      	beq.n	8010408 <sbrk_aligned+0x34>
 80103f2:	1cc4      	adds	r4, r0, #3
 80103f4:	f024 0403 	bic.w	r4, r4, #3
 80103f8:	42a0      	cmp	r0, r4
 80103fa:	d007      	beq.n	801040c <sbrk_aligned+0x38>
 80103fc:	1a21      	subs	r1, r4, r0
 80103fe:	4628      	mov	r0, r5
 8010400:	f000 fcbe 	bl	8010d80 <_sbrk_r>
 8010404:	3001      	adds	r0, #1
 8010406:	d101      	bne.n	801040c <sbrk_aligned+0x38>
 8010408:	f04f 34ff 	mov.w	r4, #4294967295
 801040c:	4620      	mov	r0, r4
 801040e:	bd70      	pop	{r4, r5, r6, pc}
 8010410:	200096d4 	.word	0x200096d4

08010414 <_malloc_r>:
 8010414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010418:	1ccd      	adds	r5, r1, #3
 801041a:	f025 0503 	bic.w	r5, r5, #3
 801041e:	3508      	adds	r5, #8
 8010420:	2d0c      	cmp	r5, #12
 8010422:	bf38      	it	cc
 8010424:	250c      	movcc	r5, #12
 8010426:	2d00      	cmp	r5, #0
 8010428:	4607      	mov	r7, r0
 801042a:	db01      	blt.n	8010430 <_malloc_r+0x1c>
 801042c:	42a9      	cmp	r1, r5
 801042e:	d905      	bls.n	801043c <_malloc_r+0x28>
 8010430:	230c      	movs	r3, #12
 8010432:	603b      	str	r3, [r7, #0]
 8010434:	2600      	movs	r6, #0
 8010436:	4630      	mov	r0, r6
 8010438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801043c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010510 <_malloc_r+0xfc>
 8010440:	f000 f868 	bl	8010514 <__malloc_lock>
 8010444:	f8d8 3000 	ldr.w	r3, [r8]
 8010448:	461c      	mov	r4, r3
 801044a:	bb5c      	cbnz	r4, 80104a4 <_malloc_r+0x90>
 801044c:	4629      	mov	r1, r5
 801044e:	4638      	mov	r0, r7
 8010450:	f7ff ffc0 	bl	80103d4 <sbrk_aligned>
 8010454:	1c43      	adds	r3, r0, #1
 8010456:	4604      	mov	r4, r0
 8010458:	d155      	bne.n	8010506 <_malloc_r+0xf2>
 801045a:	f8d8 4000 	ldr.w	r4, [r8]
 801045e:	4626      	mov	r6, r4
 8010460:	2e00      	cmp	r6, #0
 8010462:	d145      	bne.n	80104f0 <_malloc_r+0xdc>
 8010464:	2c00      	cmp	r4, #0
 8010466:	d048      	beq.n	80104fa <_malloc_r+0xe6>
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	4631      	mov	r1, r6
 801046c:	4638      	mov	r0, r7
 801046e:	eb04 0903 	add.w	r9, r4, r3
 8010472:	f000 fc85 	bl	8010d80 <_sbrk_r>
 8010476:	4581      	cmp	r9, r0
 8010478:	d13f      	bne.n	80104fa <_malloc_r+0xe6>
 801047a:	6821      	ldr	r1, [r4, #0]
 801047c:	1a6d      	subs	r5, r5, r1
 801047e:	4629      	mov	r1, r5
 8010480:	4638      	mov	r0, r7
 8010482:	f7ff ffa7 	bl	80103d4 <sbrk_aligned>
 8010486:	3001      	adds	r0, #1
 8010488:	d037      	beq.n	80104fa <_malloc_r+0xe6>
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	442b      	add	r3, r5
 801048e:	6023      	str	r3, [r4, #0]
 8010490:	f8d8 3000 	ldr.w	r3, [r8]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d038      	beq.n	801050a <_malloc_r+0xf6>
 8010498:	685a      	ldr	r2, [r3, #4]
 801049a:	42a2      	cmp	r2, r4
 801049c:	d12b      	bne.n	80104f6 <_malloc_r+0xe2>
 801049e:	2200      	movs	r2, #0
 80104a0:	605a      	str	r2, [r3, #4]
 80104a2:	e00f      	b.n	80104c4 <_malloc_r+0xb0>
 80104a4:	6822      	ldr	r2, [r4, #0]
 80104a6:	1b52      	subs	r2, r2, r5
 80104a8:	d41f      	bmi.n	80104ea <_malloc_r+0xd6>
 80104aa:	2a0b      	cmp	r2, #11
 80104ac:	d917      	bls.n	80104de <_malloc_r+0xca>
 80104ae:	1961      	adds	r1, r4, r5
 80104b0:	42a3      	cmp	r3, r4
 80104b2:	6025      	str	r5, [r4, #0]
 80104b4:	bf18      	it	ne
 80104b6:	6059      	strne	r1, [r3, #4]
 80104b8:	6863      	ldr	r3, [r4, #4]
 80104ba:	bf08      	it	eq
 80104bc:	f8c8 1000 	streq.w	r1, [r8]
 80104c0:	5162      	str	r2, [r4, r5]
 80104c2:	604b      	str	r3, [r1, #4]
 80104c4:	4638      	mov	r0, r7
 80104c6:	f104 060b 	add.w	r6, r4, #11
 80104ca:	f000 f829 	bl	8010520 <__malloc_unlock>
 80104ce:	f026 0607 	bic.w	r6, r6, #7
 80104d2:	1d23      	adds	r3, r4, #4
 80104d4:	1af2      	subs	r2, r6, r3
 80104d6:	d0ae      	beq.n	8010436 <_malloc_r+0x22>
 80104d8:	1b9b      	subs	r3, r3, r6
 80104da:	50a3      	str	r3, [r4, r2]
 80104dc:	e7ab      	b.n	8010436 <_malloc_r+0x22>
 80104de:	42a3      	cmp	r3, r4
 80104e0:	6862      	ldr	r2, [r4, #4]
 80104e2:	d1dd      	bne.n	80104a0 <_malloc_r+0x8c>
 80104e4:	f8c8 2000 	str.w	r2, [r8]
 80104e8:	e7ec      	b.n	80104c4 <_malloc_r+0xb0>
 80104ea:	4623      	mov	r3, r4
 80104ec:	6864      	ldr	r4, [r4, #4]
 80104ee:	e7ac      	b.n	801044a <_malloc_r+0x36>
 80104f0:	4634      	mov	r4, r6
 80104f2:	6876      	ldr	r6, [r6, #4]
 80104f4:	e7b4      	b.n	8010460 <_malloc_r+0x4c>
 80104f6:	4613      	mov	r3, r2
 80104f8:	e7cc      	b.n	8010494 <_malloc_r+0x80>
 80104fa:	230c      	movs	r3, #12
 80104fc:	603b      	str	r3, [r7, #0]
 80104fe:	4638      	mov	r0, r7
 8010500:	f000 f80e 	bl	8010520 <__malloc_unlock>
 8010504:	e797      	b.n	8010436 <_malloc_r+0x22>
 8010506:	6025      	str	r5, [r4, #0]
 8010508:	e7dc      	b.n	80104c4 <_malloc_r+0xb0>
 801050a:	605b      	str	r3, [r3, #4]
 801050c:	deff      	udf	#255	; 0xff
 801050e:	bf00      	nop
 8010510:	200096d0 	.word	0x200096d0

08010514 <__malloc_lock>:
 8010514:	4801      	ldr	r0, [pc, #4]	; (801051c <__malloc_lock+0x8>)
 8010516:	f7ff b87d 	b.w	800f614 <__retarget_lock_acquire_recursive>
 801051a:	bf00      	nop
 801051c:	200096cc 	.word	0x200096cc

08010520 <__malloc_unlock>:
 8010520:	4801      	ldr	r0, [pc, #4]	; (8010528 <__malloc_unlock+0x8>)
 8010522:	f7ff b878 	b.w	800f616 <__retarget_lock_release_recursive>
 8010526:	bf00      	nop
 8010528:	200096cc 	.word	0x200096cc

0801052c <_Balloc>:
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	69c6      	ldr	r6, [r0, #28]
 8010530:	4604      	mov	r4, r0
 8010532:	460d      	mov	r5, r1
 8010534:	b976      	cbnz	r6, 8010554 <_Balloc+0x28>
 8010536:	2010      	movs	r0, #16
 8010538:	f7ff ff44 	bl	80103c4 <malloc>
 801053c:	4602      	mov	r2, r0
 801053e:	61e0      	str	r0, [r4, #28]
 8010540:	b920      	cbnz	r0, 801054c <_Balloc+0x20>
 8010542:	4b18      	ldr	r3, [pc, #96]	; (80105a4 <_Balloc+0x78>)
 8010544:	4818      	ldr	r0, [pc, #96]	; (80105a8 <_Balloc+0x7c>)
 8010546:	216b      	movs	r1, #107	; 0x6b
 8010548:	f000 fc2a 	bl	8010da0 <__assert_func>
 801054c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010550:	6006      	str	r6, [r0, #0]
 8010552:	60c6      	str	r6, [r0, #12]
 8010554:	69e6      	ldr	r6, [r4, #28]
 8010556:	68f3      	ldr	r3, [r6, #12]
 8010558:	b183      	cbz	r3, 801057c <_Balloc+0x50>
 801055a:	69e3      	ldr	r3, [r4, #28]
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010562:	b9b8      	cbnz	r0, 8010594 <_Balloc+0x68>
 8010564:	2101      	movs	r1, #1
 8010566:	fa01 f605 	lsl.w	r6, r1, r5
 801056a:	1d72      	adds	r2, r6, #5
 801056c:	0092      	lsls	r2, r2, #2
 801056e:	4620      	mov	r0, r4
 8010570:	f000 fc34 	bl	8010ddc <_calloc_r>
 8010574:	b160      	cbz	r0, 8010590 <_Balloc+0x64>
 8010576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801057a:	e00e      	b.n	801059a <_Balloc+0x6e>
 801057c:	2221      	movs	r2, #33	; 0x21
 801057e:	2104      	movs	r1, #4
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fc2b 	bl	8010ddc <_calloc_r>
 8010586:	69e3      	ldr	r3, [r4, #28]
 8010588:	60f0      	str	r0, [r6, #12]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1e4      	bne.n	801055a <_Balloc+0x2e>
 8010590:	2000      	movs	r0, #0
 8010592:	bd70      	pop	{r4, r5, r6, pc}
 8010594:	6802      	ldr	r2, [r0, #0]
 8010596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801059a:	2300      	movs	r3, #0
 801059c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105a0:	e7f7      	b.n	8010592 <_Balloc+0x66>
 80105a2:	bf00      	nop
 80105a4:	08011be9 	.word	0x08011be9
 80105a8:	08011c69 	.word	0x08011c69

080105ac <_Bfree>:
 80105ac:	b570      	push	{r4, r5, r6, lr}
 80105ae:	69c6      	ldr	r6, [r0, #28]
 80105b0:	4605      	mov	r5, r0
 80105b2:	460c      	mov	r4, r1
 80105b4:	b976      	cbnz	r6, 80105d4 <_Bfree+0x28>
 80105b6:	2010      	movs	r0, #16
 80105b8:	f7ff ff04 	bl	80103c4 <malloc>
 80105bc:	4602      	mov	r2, r0
 80105be:	61e8      	str	r0, [r5, #28]
 80105c0:	b920      	cbnz	r0, 80105cc <_Bfree+0x20>
 80105c2:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <_Bfree+0x3c>)
 80105c4:	4809      	ldr	r0, [pc, #36]	; (80105ec <_Bfree+0x40>)
 80105c6:	218f      	movs	r1, #143	; 0x8f
 80105c8:	f000 fbea 	bl	8010da0 <__assert_func>
 80105cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105d0:	6006      	str	r6, [r0, #0]
 80105d2:	60c6      	str	r6, [r0, #12]
 80105d4:	b13c      	cbz	r4, 80105e6 <_Bfree+0x3a>
 80105d6:	69eb      	ldr	r3, [r5, #28]
 80105d8:	6862      	ldr	r2, [r4, #4]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80105e0:	6021      	str	r1, [r4, #0]
 80105e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80105e6:	bd70      	pop	{r4, r5, r6, pc}
 80105e8:	08011be9 	.word	0x08011be9
 80105ec:	08011c69 	.word	0x08011c69

080105f0 <__multadd>:
 80105f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f4:	690d      	ldr	r5, [r1, #16]
 80105f6:	4607      	mov	r7, r0
 80105f8:	460c      	mov	r4, r1
 80105fa:	461e      	mov	r6, r3
 80105fc:	f101 0c14 	add.w	ip, r1, #20
 8010600:	2000      	movs	r0, #0
 8010602:	f8dc 3000 	ldr.w	r3, [ip]
 8010606:	b299      	uxth	r1, r3
 8010608:	fb02 6101 	mla	r1, r2, r1, r6
 801060c:	0c1e      	lsrs	r6, r3, #16
 801060e:	0c0b      	lsrs	r3, r1, #16
 8010610:	fb02 3306 	mla	r3, r2, r6, r3
 8010614:	b289      	uxth	r1, r1
 8010616:	3001      	adds	r0, #1
 8010618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801061c:	4285      	cmp	r5, r0
 801061e:	f84c 1b04 	str.w	r1, [ip], #4
 8010622:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010626:	dcec      	bgt.n	8010602 <__multadd+0x12>
 8010628:	b30e      	cbz	r6, 801066e <__multadd+0x7e>
 801062a:	68a3      	ldr	r3, [r4, #8]
 801062c:	42ab      	cmp	r3, r5
 801062e:	dc19      	bgt.n	8010664 <__multadd+0x74>
 8010630:	6861      	ldr	r1, [r4, #4]
 8010632:	4638      	mov	r0, r7
 8010634:	3101      	adds	r1, #1
 8010636:	f7ff ff79 	bl	801052c <_Balloc>
 801063a:	4680      	mov	r8, r0
 801063c:	b928      	cbnz	r0, 801064a <__multadd+0x5a>
 801063e:	4602      	mov	r2, r0
 8010640:	4b0c      	ldr	r3, [pc, #48]	; (8010674 <__multadd+0x84>)
 8010642:	480d      	ldr	r0, [pc, #52]	; (8010678 <__multadd+0x88>)
 8010644:	21ba      	movs	r1, #186	; 0xba
 8010646:	f000 fbab 	bl	8010da0 <__assert_func>
 801064a:	6922      	ldr	r2, [r4, #16]
 801064c:	3202      	adds	r2, #2
 801064e:	f104 010c 	add.w	r1, r4, #12
 8010652:	0092      	lsls	r2, r2, #2
 8010654:	300c      	adds	r0, #12
 8010656:	f7fe ffdf 	bl	800f618 <memcpy>
 801065a:	4621      	mov	r1, r4
 801065c:	4638      	mov	r0, r7
 801065e:	f7ff ffa5 	bl	80105ac <_Bfree>
 8010662:	4644      	mov	r4, r8
 8010664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010668:	3501      	adds	r5, #1
 801066a:	615e      	str	r6, [r3, #20]
 801066c:	6125      	str	r5, [r4, #16]
 801066e:	4620      	mov	r0, r4
 8010670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010674:	08011c58 	.word	0x08011c58
 8010678:	08011c69 	.word	0x08011c69

0801067c <__hi0bits>:
 801067c:	0c03      	lsrs	r3, r0, #16
 801067e:	041b      	lsls	r3, r3, #16
 8010680:	b9d3      	cbnz	r3, 80106b8 <__hi0bits+0x3c>
 8010682:	0400      	lsls	r0, r0, #16
 8010684:	2310      	movs	r3, #16
 8010686:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801068a:	bf04      	itt	eq
 801068c:	0200      	lsleq	r0, r0, #8
 801068e:	3308      	addeq	r3, #8
 8010690:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010694:	bf04      	itt	eq
 8010696:	0100      	lsleq	r0, r0, #4
 8010698:	3304      	addeq	r3, #4
 801069a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801069e:	bf04      	itt	eq
 80106a0:	0080      	lsleq	r0, r0, #2
 80106a2:	3302      	addeq	r3, #2
 80106a4:	2800      	cmp	r0, #0
 80106a6:	db05      	blt.n	80106b4 <__hi0bits+0x38>
 80106a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106ac:	f103 0301 	add.w	r3, r3, #1
 80106b0:	bf08      	it	eq
 80106b2:	2320      	moveq	r3, #32
 80106b4:	4618      	mov	r0, r3
 80106b6:	4770      	bx	lr
 80106b8:	2300      	movs	r3, #0
 80106ba:	e7e4      	b.n	8010686 <__hi0bits+0xa>

080106bc <__lo0bits>:
 80106bc:	6803      	ldr	r3, [r0, #0]
 80106be:	f013 0207 	ands.w	r2, r3, #7
 80106c2:	d00c      	beq.n	80106de <__lo0bits+0x22>
 80106c4:	07d9      	lsls	r1, r3, #31
 80106c6:	d422      	bmi.n	801070e <__lo0bits+0x52>
 80106c8:	079a      	lsls	r2, r3, #30
 80106ca:	bf49      	itett	mi
 80106cc:	085b      	lsrmi	r3, r3, #1
 80106ce:	089b      	lsrpl	r3, r3, #2
 80106d0:	6003      	strmi	r3, [r0, #0]
 80106d2:	2201      	movmi	r2, #1
 80106d4:	bf5c      	itt	pl
 80106d6:	6003      	strpl	r3, [r0, #0]
 80106d8:	2202      	movpl	r2, #2
 80106da:	4610      	mov	r0, r2
 80106dc:	4770      	bx	lr
 80106de:	b299      	uxth	r1, r3
 80106e0:	b909      	cbnz	r1, 80106e6 <__lo0bits+0x2a>
 80106e2:	0c1b      	lsrs	r3, r3, #16
 80106e4:	2210      	movs	r2, #16
 80106e6:	b2d9      	uxtb	r1, r3
 80106e8:	b909      	cbnz	r1, 80106ee <__lo0bits+0x32>
 80106ea:	3208      	adds	r2, #8
 80106ec:	0a1b      	lsrs	r3, r3, #8
 80106ee:	0719      	lsls	r1, r3, #28
 80106f0:	bf04      	itt	eq
 80106f2:	091b      	lsreq	r3, r3, #4
 80106f4:	3204      	addeq	r2, #4
 80106f6:	0799      	lsls	r1, r3, #30
 80106f8:	bf04      	itt	eq
 80106fa:	089b      	lsreq	r3, r3, #2
 80106fc:	3202      	addeq	r2, #2
 80106fe:	07d9      	lsls	r1, r3, #31
 8010700:	d403      	bmi.n	801070a <__lo0bits+0x4e>
 8010702:	085b      	lsrs	r3, r3, #1
 8010704:	f102 0201 	add.w	r2, r2, #1
 8010708:	d003      	beq.n	8010712 <__lo0bits+0x56>
 801070a:	6003      	str	r3, [r0, #0]
 801070c:	e7e5      	b.n	80106da <__lo0bits+0x1e>
 801070e:	2200      	movs	r2, #0
 8010710:	e7e3      	b.n	80106da <__lo0bits+0x1e>
 8010712:	2220      	movs	r2, #32
 8010714:	e7e1      	b.n	80106da <__lo0bits+0x1e>
	...

08010718 <__i2b>:
 8010718:	b510      	push	{r4, lr}
 801071a:	460c      	mov	r4, r1
 801071c:	2101      	movs	r1, #1
 801071e:	f7ff ff05 	bl	801052c <_Balloc>
 8010722:	4602      	mov	r2, r0
 8010724:	b928      	cbnz	r0, 8010732 <__i2b+0x1a>
 8010726:	4b05      	ldr	r3, [pc, #20]	; (801073c <__i2b+0x24>)
 8010728:	4805      	ldr	r0, [pc, #20]	; (8010740 <__i2b+0x28>)
 801072a:	f240 1145 	movw	r1, #325	; 0x145
 801072e:	f000 fb37 	bl	8010da0 <__assert_func>
 8010732:	2301      	movs	r3, #1
 8010734:	6144      	str	r4, [r0, #20]
 8010736:	6103      	str	r3, [r0, #16]
 8010738:	bd10      	pop	{r4, pc}
 801073a:	bf00      	nop
 801073c:	08011c58 	.word	0x08011c58
 8010740:	08011c69 	.word	0x08011c69

08010744 <__multiply>:
 8010744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010748:	4691      	mov	r9, r2
 801074a:	690a      	ldr	r2, [r1, #16]
 801074c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010750:	429a      	cmp	r2, r3
 8010752:	bfb8      	it	lt
 8010754:	460b      	movlt	r3, r1
 8010756:	460c      	mov	r4, r1
 8010758:	bfbc      	itt	lt
 801075a:	464c      	movlt	r4, r9
 801075c:	4699      	movlt	r9, r3
 801075e:	6927      	ldr	r7, [r4, #16]
 8010760:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010764:	68a3      	ldr	r3, [r4, #8]
 8010766:	6861      	ldr	r1, [r4, #4]
 8010768:	eb07 060a 	add.w	r6, r7, sl
 801076c:	42b3      	cmp	r3, r6
 801076e:	b085      	sub	sp, #20
 8010770:	bfb8      	it	lt
 8010772:	3101      	addlt	r1, #1
 8010774:	f7ff feda 	bl	801052c <_Balloc>
 8010778:	b930      	cbnz	r0, 8010788 <__multiply+0x44>
 801077a:	4602      	mov	r2, r0
 801077c:	4b44      	ldr	r3, [pc, #272]	; (8010890 <__multiply+0x14c>)
 801077e:	4845      	ldr	r0, [pc, #276]	; (8010894 <__multiply+0x150>)
 8010780:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010784:	f000 fb0c 	bl	8010da0 <__assert_func>
 8010788:	f100 0514 	add.w	r5, r0, #20
 801078c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010790:	462b      	mov	r3, r5
 8010792:	2200      	movs	r2, #0
 8010794:	4543      	cmp	r3, r8
 8010796:	d321      	bcc.n	80107dc <__multiply+0x98>
 8010798:	f104 0314 	add.w	r3, r4, #20
 801079c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107a0:	f109 0314 	add.w	r3, r9, #20
 80107a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107a8:	9202      	str	r2, [sp, #8]
 80107aa:	1b3a      	subs	r2, r7, r4
 80107ac:	3a15      	subs	r2, #21
 80107ae:	f022 0203 	bic.w	r2, r2, #3
 80107b2:	3204      	adds	r2, #4
 80107b4:	f104 0115 	add.w	r1, r4, #21
 80107b8:	428f      	cmp	r7, r1
 80107ba:	bf38      	it	cc
 80107bc:	2204      	movcc	r2, #4
 80107be:	9201      	str	r2, [sp, #4]
 80107c0:	9a02      	ldr	r2, [sp, #8]
 80107c2:	9303      	str	r3, [sp, #12]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d80c      	bhi.n	80107e2 <__multiply+0x9e>
 80107c8:	2e00      	cmp	r6, #0
 80107ca:	dd03      	ble.n	80107d4 <__multiply+0x90>
 80107cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d05b      	beq.n	801088c <__multiply+0x148>
 80107d4:	6106      	str	r6, [r0, #16]
 80107d6:	b005      	add	sp, #20
 80107d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107dc:	f843 2b04 	str.w	r2, [r3], #4
 80107e0:	e7d8      	b.n	8010794 <__multiply+0x50>
 80107e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80107e6:	f1ba 0f00 	cmp.w	sl, #0
 80107ea:	d024      	beq.n	8010836 <__multiply+0xf2>
 80107ec:	f104 0e14 	add.w	lr, r4, #20
 80107f0:	46a9      	mov	r9, r5
 80107f2:	f04f 0c00 	mov.w	ip, #0
 80107f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107fa:	f8d9 1000 	ldr.w	r1, [r9]
 80107fe:	fa1f fb82 	uxth.w	fp, r2
 8010802:	b289      	uxth	r1, r1
 8010804:	fb0a 110b 	mla	r1, sl, fp, r1
 8010808:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801080c:	f8d9 2000 	ldr.w	r2, [r9]
 8010810:	4461      	add	r1, ip
 8010812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010816:	fb0a c20b 	mla	r2, sl, fp, ip
 801081a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801081e:	b289      	uxth	r1, r1
 8010820:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010824:	4577      	cmp	r7, lr
 8010826:	f849 1b04 	str.w	r1, [r9], #4
 801082a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801082e:	d8e2      	bhi.n	80107f6 <__multiply+0xb2>
 8010830:	9a01      	ldr	r2, [sp, #4]
 8010832:	f845 c002 	str.w	ip, [r5, r2]
 8010836:	9a03      	ldr	r2, [sp, #12]
 8010838:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801083c:	3304      	adds	r3, #4
 801083e:	f1b9 0f00 	cmp.w	r9, #0
 8010842:	d021      	beq.n	8010888 <__multiply+0x144>
 8010844:	6829      	ldr	r1, [r5, #0]
 8010846:	f104 0c14 	add.w	ip, r4, #20
 801084a:	46ae      	mov	lr, r5
 801084c:	f04f 0a00 	mov.w	sl, #0
 8010850:	f8bc b000 	ldrh.w	fp, [ip]
 8010854:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010858:	fb09 220b 	mla	r2, r9, fp, r2
 801085c:	4452      	add	r2, sl
 801085e:	b289      	uxth	r1, r1
 8010860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010864:	f84e 1b04 	str.w	r1, [lr], #4
 8010868:	f85c 1b04 	ldr.w	r1, [ip], #4
 801086c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010870:	f8be 1000 	ldrh.w	r1, [lr]
 8010874:	fb09 110a 	mla	r1, r9, sl, r1
 8010878:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801087c:	4567      	cmp	r7, ip
 801087e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010882:	d8e5      	bhi.n	8010850 <__multiply+0x10c>
 8010884:	9a01      	ldr	r2, [sp, #4]
 8010886:	50a9      	str	r1, [r5, r2]
 8010888:	3504      	adds	r5, #4
 801088a:	e799      	b.n	80107c0 <__multiply+0x7c>
 801088c:	3e01      	subs	r6, #1
 801088e:	e79b      	b.n	80107c8 <__multiply+0x84>
 8010890:	08011c58 	.word	0x08011c58
 8010894:	08011c69 	.word	0x08011c69

08010898 <__pow5mult>:
 8010898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801089c:	4615      	mov	r5, r2
 801089e:	f012 0203 	ands.w	r2, r2, #3
 80108a2:	4606      	mov	r6, r0
 80108a4:	460f      	mov	r7, r1
 80108a6:	d007      	beq.n	80108b8 <__pow5mult+0x20>
 80108a8:	4c25      	ldr	r4, [pc, #148]	; (8010940 <__pow5mult+0xa8>)
 80108aa:	3a01      	subs	r2, #1
 80108ac:	2300      	movs	r3, #0
 80108ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108b2:	f7ff fe9d 	bl	80105f0 <__multadd>
 80108b6:	4607      	mov	r7, r0
 80108b8:	10ad      	asrs	r5, r5, #2
 80108ba:	d03d      	beq.n	8010938 <__pow5mult+0xa0>
 80108bc:	69f4      	ldr	r4, [r6, #28]
 80108be:	b97c      	cbnz	r4, 80108e0 <__pow5mult+0x48>
 80108c0:	2010      	movs	r0, #16
 80108c2:	f7ff fd7f 	bl	80103c4 <malloc>
 80108c6:	4602      	mov	r2, r0
 80108c8:	61f0      	str	r0, [r6, #28]
 80108ca:	b928      	cbnz	r0, 80108d8 <__pow5mult+0x40>
 80108cc:	4b1d      	ldr	r3, [pc, #116]	; (8010944 <__pow5mult+0xac>)
 80108ce:	481e      	ldr	r0, [pc, #120]	; (8010948 <__pow5mult+0xb0>)
 80108d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80108d4:	f000 fa64 	bl	8010da0 <__assert_func>
 80108d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108dc:	6004      	str	r4, [r0, #0]
 80108de:	60c4      	str	r4, [r0, #12]
 80108e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80108e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108e8:	b94c      	cbnz	r4, 80108fe <__pow5mult+0x66>
 80108ea:	f240 2171 	movw	r1, #625	; 0x271
 80108ee:	4630      	mov	r0, r6
 80108f0:	f7ff ff12 	bl	8010718 <__i2b>
 80108f4:	2300      	movs	r3, #0
 80108f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80108fa:	4604      	mov	r4, r0
 80108fc:	6003      	str	r3, [r0, #0]
 80108fe:	f04f 0900 	mov.w	r9, #0
 8010902:	07eb      	lsls	r3, r5, #31
 8010904:	d50a      	bpl.n	801091c <__pow5mult+0x84>
 8010906:	4639      	mov	r1, r7
 8010908:	4622      	mov	r2, r4
 801090a:	4630      	mov	r0, r6
 801090c:	f7ff ff1a 	bl	8010744 <__multiply>
 8010910:	4639      	mov	r1, r7
 8010912:	4680      	mov	r8, r0
 8010914:	4630      	mov	r0, r6
 8010916:	f7ff fe49 	bl	80105ac <_Bfree>
 801091a:	4647      	mov	r7, r8
 801091c:	106d      	asrs	r5, r5, #1
 801091e:	d00b      	beq.n	8010938 <__pow5mult+0xa0>
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	b938      	cbnz	r0, 8010934 <__pow5mult+0x9c>
 8010924:	4622      	mov	r2, r4
 8010926:	4621      	mov	r1, r4
 8010928:	4630      	mov	r0, r6
 801092a:	f7ff ff0b 	bl	8010744 <__multiply>
 801092e:	6020      	str	r0, [r4, #0]
 8010930:	f8c0 9000 	str.w	r9, [r0]
 8010934:	4604      	mov	r4, r0
 8010936:	e7e4      	b.n	8010902 <__pow5mult+0x6a>
 8010938:	4638      	mov	r0, r7
 801093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093e:	bf00      	nop
 8010940:	08011db8 	.word	0x08011db8
 8010944:	08011be9 	.word	0x08011be9
 8010948:	08011c69 	.word	0x08011c69

0801094c <__lshift>:
 801094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010950:	460c      	mov	r4, r1
 8010952:	6849      	ldr	r1, [r1, #4]
 8010954:	6923      	ldr	r3, [r4, #16]
 8010956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801095a:	68a3      	ldr	r3, [r4, #8]
 801095c:	4607      	mov	r7, r0
 801095e:	4691      	mov	r9, r2
 8010960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010964:	f108 0601 	add.w	r6, r8, #1
 8010968:	42b3      	cmp	r3, r6
 801096a:	db0b      	blt.n	8010984 <__lshift+0x38>
 801096c:	4638      	mov	r0, r7
 801096e:	f7ff fddd 	bl	801052c <_Balloc>
 8010972:	4605      	mov	r5, r0
 8010974:	b948      	cbnz	r0, 801098a <__lshift+0x3e>
 8010976:	4602      	mov	r2, r0
 8010978:	4b28      	ldr	r3, [pc, #160]	; (8010a1c <__lshift+0xd0>)
 801097a:	4829      	ldr	r0, [pc, #164]	; (8010a20 <__lshift+0xd4>)
 801097c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010980:	f000 fa0e 	bl	8010da0 <__assert_func>
 8010984:	3101      	adds	r1, #1
 8010986:	005b      	lsls	r3, r3, #1
 8010988:	e7ee      	b.n	8010968 <__lshift+0x1c>
 801098a:	2300      	movs	r3, #0
 801098c:	f100 0114 	add.w	r1, r0, #20
 8010990:	f100 0210 	add.w	r2, r0, #16
 8010994:	4618      	mov	r0, r3
 8010996:	4553      	cmp	r3, sl
 8010998:	db33      	blt.n	8010a02 <__lshift+0xb6>
 801099a:	6920      	ldr	r0, [r4, #16]
 801099c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109a0:	f104 0314 	add.w	r3, r4, #20
 80109a4:	f019 091f 	ands.w	r9, r9, #31
 80109a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109b0:	d02b      	beq.n	8010a0a <__lshift+0xbe>
 80109b2:	f1c9 0e20 	rsb	lr, r9, #32
 80109b6:	468a      	mov	sl, r1
 80109b8:	2200      	movs	r2, #0
 80109ba:	6818      	ldr	r0, [r3, #0]
 80109bc:	fa00 f009 	lsl.w	r0, r0, r9
 80109c0:	4310      	orrs	r0, r2
 80109c2:	f84a 0b04 	str.w	r0, [sl], #4
 80109c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ca:	459c      	cmp	ip, r3
 80109cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80109d0:	d8f3      	bhi.n	80109ba <__lshift+0x6e>
 80109d2:	ebac 0304 	sub.w	r3, ip, r4
 80109d6:	3b15      	subs	r3, #21
 80109d8:	f023 0303 	bic.w	r3, r3, #3
 80109dc:	3304      	adds	r3, #4
 80109de:	f104 0015 	add.w	r0, r4, #21
 80109e2:	4584      	cmp	ip, r0
 80109e4:	bf38      	it	cc
 80109e6:	2304      	movcc	r3, #4
 80109e8:	50ca      	str	r2, [r1, r3]
 80109ea:	b10a      	cbz	r2, 80109f0 <__lshift+0xa4>
 80109ec:	f108 0602 	add.w	r6, r8, #2
 80109f0:	3e01      	subs	r6, #1
 80109f2:	4638      	mov	r0, r7
 80109f4:	612e      	str	r6, [r5, #16]
 80109f6:	4621      	mov	r1, r4
 80109f8:	f7ff fdd8 	bl	80105ac <_Bfree>
 80109fc:	4628      	mov	r0, r5
 80109fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a02:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a06:	3301      	adds	r3, #1
 8010a08:	e7c5      	b.n	8010996 <__lshift+0x4a>
 8010a0a:	3904      	subs	r1, #4
 8010a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a10:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a14:	459c      	cmp	ip, r3
 8010a16:	d8f9      	bhi.n	8010a0c <__lshift+0xc0>
 8010a18:	e7ea      	b.n	80109f0 <__lshift+0xa4>
 8010a1a:	bf00      	nop
 8010a1c:	08011c58 	.word	0x08011c58
 8010a20:	08011c69 	.word	0x08011c69

08010a24 <__mcmp>:
 8010a24:	b530      	push	{r4, r5, lr}
 8010a26:	6902      	ldr	r2, [r0, #16]
 8010a28:	690c      	ldr	r4, [r1, #16]
 8010a2a:	1b12      	subs	r2, r2, r4
 8010a2c:	d10e      	bne.n	8010a4c <__mcmp+0x28>
 8010a2e:	f100 0314 	add.w	r3, r0, #20
 8010a32:	3114      	adds	r1, #20
 8010a34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a44:	42a5      	cmp	r5, r4
 8010a46:	d003      	beq.n	8010a50 <__mcmp+0x2c>
 8010a48:	d305      	bcc.n	8010a56 <__mcmp+0x32>
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	4610      	mov	r0, r2
 8010a4e:	bd30      	pop	{r4, r5, pc}
 8010a50:	4283      	cmp	r3, r0
 8010a52:	d3f3      	bcc.n	8010a3c <__mcmp+0x18>
 8010a54:	e7fa      	b.n	8010a4c <__mcmp+0x28>
 8010a56:	f04f 32ff 	mov.w	r2, #4294967295
 8010a5a:	e7f7      	b.n	8010a4c <__mcmp+0x28>

08010a5c <__mdiff>:
 8010a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a60:	460c      	mov	r4, r1
 8010a62:	4606      	mov	r6, r0
 8010a64:	4611      	mov	r1, r2
 8010a66:	4620      	mov	r0, r4
 8010a68:	4690      	mov	r8, r2
 8010a6a:	f7ff ffdb 	bl	8010a24 <__mcmp>
 8010a6e:	1e05      	subs	r5, r0, #0
 8010a70:	d110      	bne.n	8010a94 <__mdiff+0x38>
 8010a72:	4629      	mov	r1, r5
 8010a74:	4630      	mov	r0, r6
 8010a76:	f7ff fd59 	bl	801052c <_Balloc>
 8010a7a:	b930      	cbnz	r0, 8010a8a <__mdiff+0x2e>
 8010a7c:	4b3a      	ldr	r3, [pc, #232]	; (8010b68 <__mdiff+0x10c>)
 8010a7e:	4602      	mov	r2, r0
 8010a80:	f240 2137 	movw	r1, #567	; 0x237
 8010a84:	4839      	ldr	r0, [pc, #228]	; (8010b6c <__mdiff+0x110>)
 8010a86:	f000 f98b 	bl	8010da0 <__assert_func>
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a94:	bfa4      	itt	ge
 8010a96:	4643      	movge	r3, r8
 8010a98:	46a0      	movge	r8, r4
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010aa0:	bfa6      	itte	ge
 8010aa2:	461c      	movge	r4, r3
 8010aa4:	2500      	movge	r5, #0
 8010aa6:	2501      	movlt	r5, #1
 8010aa8:	f7ff fd40 	bl	801052c <_Balloc>
 8010aac:	b920      	cbnz	r0, 8010ab8 <__mdiff+0x5c>
 8010aae:	4b2e      	ldr	r3, [pc, #184]	; (8010b68 <__mdiff+0x10c>)
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	f240 2145 	movw	r1, #581	; 0x245
 8010ab6:	e7e5      	b.n	8010a84 <__mdiff+0x28>
 8010ab8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010abc:	6926      	ldr	r6, [r4, #16]
 8010abe:	60c5      	str	r5, [r0, #12]
 8010ac0:	f104 0914 	add.w	r9, r4, #20
 8010ac4:	f108 0514 	add.w	r5, r8, #20
 8010ac8:	f100 0e14 	add.w	lr, r0, #20
 8010acc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010ad0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ad4:	f108 0210 	add.w	r2, r8, #16
 8010ad8:	46f2      	mov	sl, lr
 8010ada:	2100      	movs	r1, #0
 8010adc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ae4:	fa11 f88b 	uxtah	r8, r1, fp
 8010ae8:	b299      	uxth	r1, r3
 8010aea:	0c1b      	lsrs	r3, r3, #16
 8010aec:	eba8 0801 	sub.w	r8, r8, r1
 8010af0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010af4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010af8:	fa1f f888 	uxth.w	r8, r8
 8010afc:	1419      	asrs	r1, r3, #16
 8010afe:	454e      	cmp	r6, r9
 8010b00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b04:	f84a 3b04 	str.w	r3, [sl], #4
 8010b08:	d8e8      	bhi.n	8010adc <__mdiff+0x80>
 8010b0a:	1b33      	subs	r3, r6, r4
 8010b0c:	3b15      	subs	r3, #21
 8010b0e:	f023 0303 	bic.w	r3, r3, #3
 8010b12:	3304      	adds	r3, #4
 8010b14:	3415      	adds	r4, #21
 8010b16:	42a6      	cmp	r6, r4
 8010b18:	bf38      	it	cc
 8010b1a:	2304      	movcc	r3, #4
 8010b1c:	441d      	add	r5, r3
 8010b1e:	4473      	add	r3, lr
 8010b20:	469e      	mov	lr, r3
 8010b22:	462e      	mov	r6, r5
 8010b24:	4566      	cmp	r6, ip
 8010b26:	d30e      	bcc.n	8010b46 <__mdiff+0xea>
 8010b28:	f10c 0203 	add.w	r2, ip, #3
 8010b2c:	1b52      	subs	r2, r2, r5
 8010b2e:	f022 0203 	bic.w	r2, r2, #3
 8010b32:	3d03      	subs	r5, #3
 8010b34:	45ac      	cmp	ip, r5
 8010b36:	bf38      	it	cc
 8010b38:	2200      	movcc	r2, #0
 8010b3a:	4413      	add	r3, r2
 8010b3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b40:	b17a      	cbz	r2, 8010b62 <__mdiff+0x106>
 8010b42:	6107      	str	r7, [r0, #16]
 8010b44:	e7a4      	b.n	8010a90 <__mdiff+0x34>
 8010b46:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b4a:	fa11 f288 	uxtah	r2, r1, r8
 8010b4e:	1414      	asrs	r4, r2, #16
 8010b50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b54:	b292      	uxth	r2, r2
 8010b56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b5a:	f84e 2b04 	str.w	r2, [lr], #4
 8010b5e:	1421      	asrs	r1, r4, #16
 8010b60:	e7e0      	b.n	8010b24 <__mdiff+0xc8>
 8010b62:	3f01      	subs	r7, #1
 8010b64:	e7ea      	b.n	8010b3c <__mdiff+0xe0>
 8010b66:	bf00      	nop
 8010b68:	08011c58 	.word	0x08011c58
 8010b6c:	08011c69 	.word	0x08011c69

08010b70 <__d2b>:
 8010b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b74:	460f      	mov	r7, r1
 8010b76:	2101      	movs	r1, #1
 8010b78:	ec59 8b10 	vmov	r8, r9, d0
 8010b7c:	4616      	mov	r6, r2
 8010b7e:	f7ff fcd5 	bl	801052c <_Balloc>
 8010b82:	4604      	mov	r4, r0
 8010b84:	b930      	cbnz	r0, 8010b94 <__d2b+0x24>
 8010b86:	4602      	mov	r2, r0
 8010b88:	4b24      	ldr	r3, [pc, #144]	; (8010c1c <__d2b+0xac>)
 8010b8a:	4825      	ldr	r0, [pc, #148]	; (8010c20 <__d2b+0xb0>)
 8010b8c:	f240 310f 	movw	r1, #783	; 0x30f
 8010b90:	f000 f906 	bl	8010da0 <__assert_func>
 8010b94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b9c:	bb2d      	cbnz	r5, 8010bea <__d2b+0x7a>
 8010b9e:	9301      	str	r3, [sp, #4]
 8010ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8010ba4:	d026      	beq.n	8010bf4 <__d2b+0x84>
 8010ba6:	4668      	mov	r0, sp
 8010ba8:	9300      	str	r3, [sp, #0]
 8010baa:	f7ff fd87 	bl	80106bc <__lo0bits>
 8010bae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010bb2:	b1e8      	cbz	r0, 8010bf0 <__d2b+0x80>
 8010bb4:	f1c0 0320 	rsb	r3, r0, #32
 8010bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bbc:	430b      	orrs	r3, r1
 8010bbe:	40c2      	lsrs	r2, r0
 8010bc0:	6163      	str	r3, [r4, #20]
 8010bc2:	9201      	str	r2, [sp, #4]
 8010bc4:	9b01      	ldr	r3, [sp, #4]
 8010bc6:	61a3      	str	r3, [r4, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	bf14      	ite	ne
 8010bcc:	2202      	movne	r2, #2
 8010bce:	2201      	moveq	r2, #1
 8010bd0:	6122      	str	r2, [r4, #16]
 8010bd2:	b1bd      	cbz	r5, 8010c04 <__d2b+0x94>
 8010bd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010bd8:	4405      	add	r5, r0
 8010bda:	603d      	str	r5, [r7, #0]
 8010bdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010be0:	6030      	str	r0, [r6, #0]
 8010be2:	4620      	mov	r0, r4
 8010be4:	b003      	add	sp, #12
 8010be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bee:	e7d6      	b.n	8010b9e <__d2b+0x2e>
 8010bf0:	6161      	str	r1, [r4, #20]
 8010bf2:	e7e7      	b.n	8010bc4 <__d2b+0x54>
 8010bf4:	a801      	add	r0, sp, #4
 8010bf6:	f7ff fd61 	bl	80106bc <__lo0bits>
 8010bfa:	9b01      	ldr	r3, [sp, #4]
 8010bfc:	6163      	str	r3, [r4, #20]
 8010bfe:	3020      	adds	r0, #32
 8010c00:	2201      	movs	r2, #1
 8010c02:	e7e5      	b.n	8010bd0 <__d2b+0x60>
 8010c04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c0c:	6038      	str	r0, [r7, #0]
 8010c0e:	6918      	ldr	r0, [r3, #16]
 8010c10:	f7ff fd34 	bl	801067c <__hi0bits>
 8010c14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c18:	e7e2      	b.n	8010be0 <__d2b+0x70>
 8010c1a:	bf00      	nop
 8010c1c:	08011c58 	.word	0x08011c58
 8010c20:	08011c69 	.word	0x08011c69

08010c24 <__sflush_r>:
 8010c24:	898a      	ldrh	r2, [r1, #12]
 8010c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2a:	4605      	mov	r5, r0
 8010c2c:	0710      	lsls	r0, r2, #28
 8010c2e:	460c      	mov	r4, r1
 8010c30:	d458      	bmi.n	8010ce4 <__sflush_r+0xc0>
 8010c32:	684b      	ldr	r3, [r1, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	dc05      	bgt.n	8010c44 <__sflush_r+0x20>
 8010c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	dc02      	bgt.n	8010c44 <__sflush_r+0x20>
 8010c3e:	2000      	movs	r0, #0
 8010c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c46:	2e00      	cmp	r6, #0
 8010c48:	d0f9      	beq.n	8010c3e <__sflush_r+0x1a>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c50:	682f      	ldr	r7, [r5, #0]
 8010c52:	6a21      	ldr	r1, [r4, #32]
 8010c54:	602b      	str	r3, [r5, #0]
 8010c56:	d032      	beq.n	8010cbe <__sflush_r+0x9a>
 8010c58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c5a:	89a3      	ldrh	r3, [r4, #12]
 8010c5c:	075a      	lsls	r2, r3, #29
 8010c5e:	d505      	bpl.n	8010c6c <__sflush_r+0x48>
 8010c60:	6863      	ldr	r3, [r4, #4]
 8010c62:	1ac0      	subs	r0, r0, r3
 8010c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c66:	b10b      	cbz	r3, 8010c6c <__sflush_r+0x48>
 8010c68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c6a:	1ac0      	subs	r0, r0, r3
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	4602      	mov	r2, r0
 8010c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c72:	6a21      	ldr	r1, [r4, #32]
 8010c74:	4628      	mov	r0, r5
 8010c76:	47b0      	blx	r6
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	d106      	bne.n	8010c8c <__sflush_r+0x68>
 8010c7e:	6829      	ldr	r1, [r5, #0]
 8010c80:	291d      	cmp	r1, #29
 8010c82:	d82b      	bhi.n	8010cdc <__sflush_r+0xb8>
 8010c84:	4a29      	ldr	r2, [pc, #164]	; (8010d2c <__sflush_r+0x108>)
 8010c86:	410a      	asrs	r2, r1
 8010c88:	07d6      	lsls	r6, r2, #31
 8010c8a:	d427      	bmi.n	8010cdc <__sflush_r+0xb8>
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	6062      	str	r2, [r4, #4]
 8010c90:	04d9      	lsls	r1, r3, #19
 8010c92:	6922      	ldr	r2, [r4, #16]
 8010c94:	6022      	str	r2, [r4, #0]
 8010c96:	d504      	bpl.n	8010ca2 <__sflush_r+0x7e>
 8010c98:	1c42      	adds	r2, r0, #1
 8010c9a:	d101      	bne.n	8010ca0 <__sflush_r+0x7c>
 8010c9c:	682b      	ldr	r3, [r5, #0]
 8010c9e:	b903      	cbnz	r3, 8010ca2 <__sflush_r+0x7e>
 8010ca0:	6560      	str	r0, [r4, #84]	; 0x54
 8010ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ca4:	602f      	str	r7, [r5, #0]
 8010ca6:	2900      	cmp	r1, #0
 8010ca8:	d0c9      	beq.n	8010c3e <__sflush_r+0x1a>
 8010caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cae:	4299      	cmp	r1, r3
 8010cb0:	d002      	beq.n	8010cb8 <__sflush_r+0x94>
 8010cb2:	4628      	mov	r0, r5
 8010cb4:	f7ff fb3a 	bl	801032c <_free_r>
 8010cb8:	2000      	movs	r0, #0
 8010cba:	6360      	str	r0, [r4, #52]	; 0x34
 8010cbc:	e7c0      	b.n	8010c40 <__sflush_r+0x1c>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	47b0      	blx	r6
 8010cc4:	1c41      	adds	r1, r0, #1
 8010cc6:	d1c8      	bne.n	8010c5a <__sflush_r+0x36>
 8010cc8:	682b      	ldr	r3, [r5, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d0c5      	beq.n	8010c5a <__sflush_r+0x36>
 8010cce:	2b1d      	cmp	r3, #29
 8010cd0:	d001      	beq.n	8010cd6 <__sflush_r+0xb2>
 8010cd2:	2b16      	cmp	r3, #22
 8010cd4:	d101      	bne.n	8010cda <__sflush_r+0xb6>
 8010cd6:	602f      	str	r7, [r5, #0]
 8010cd8:	e7b1      	b.n	8010c3e <__sflush_r+0x1a>
 8010cda:	89a3      	ldrh	r3, [r4, #12]
 8010cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce0:	81a3      	strh	r3, [r4, #12]
 8010ce2:	e7ad      	b.n	8010c40 <__sflush_r+0x1c>
 8010ce4:	690f      	ldr	r7, [r1, #16]
 8010ce6:	2f00      	cmp	r7, #0
 8010ce8:	d0a9      	beq.n	8010c3e <__sflush_r+0x1a>
 8010cea:	0793      	lsls	r3, r2, #30
 8010cec:	680e      	ldr	r6, [r1, #0]
 8010cee:	bf08      	it	eq
 8010cf0:	694b      	ldreq	r3, [r1, #20]
 8010cf2:	600f      	str	r7, [r1, #0]
 8010cf4:	bf18      	it	ne
 8010cf6:	2300      	movne	r3, #0
 8010cf8:	eba6 0807 	sub.w	r8, r6, r7
 8010cfc:	608b      	str	r3, [r1, #8]
 8010cfe:	f1b8 0f00 	cmp.w	r8, #0
 8010d02:	dd9c      	ble.n	8010c3e <__sflush_r+0x1a>
 8010d04:	6a21      	ldr	r1, [r4, #32]
 8010d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d08:	4643      	mov	r3, r8
 8010d0a:	463a      	mov	r2, r7
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	47b0      	blx	r6
 8010d10:	2800      	cmp	r0, #0
 8010d12:	dc06      	bgt.n	8010d22 <__sflush_r+0xfe>
 8010d14:	89a3      	ldrh	r3, [r4, #12]
 8010d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d1a:	81a3      	strh	r3, [r4, #12]
 8010d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d20:	e78e      	b.n	8010c40 <__sflush_r+0x1c>
 8010d22:	4407      	add	r7, r0
 8010d24:	eba8 0800 	sub.w	r8, r8, r0
 8010d28:	e7e9      	b.n	8010cfe <__sflush_r+0xda>
 8010d2a:	bf00      	nop
 8010d2c:	dfbffffe 	.word	0xdfbffffe

08010d30 <_fflush_r>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	690b      	ldr	r3, [r1, #16]
 8010d34:	4605      	mov	r5, r0
 8010d36:	460c      	mov	r4, r1
 8010d38:	b913      	cbnz	r3, 8010d40 <_fflush_r+0x10>
 8010d3a:	2500      	movs	r5, #0
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
 8010d40:	b118      	cbz	r0, 8010d4a <_fflush_r+0x1a>
 8010d42:	6a03      	ldr	r3, [r0, #32]
 8010d44:	b90b      	cbnz	r3, 8010d4a <_fflush_r+0x1a>
 8010d46:	f7fe fb19 	bl	800f37c <__sinit>
 8010d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d0f3      	beq.n	8010d3a <_fflush_r+0xa>
 8010d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d54:	07d0      	lsls	r0, r2, #31
 8010d56:	d404      	bmi.n	8010d62 <_fflush_r+0x32>
 8010d58:	0599      	lsls	r1, r3, #22
 8010d5a:	d402      	bmi.n	8010d62 <_fflush_r+0x32>
 8010d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d5e:	f7fe fc59 	bl	800f614 <__retarget_lock_acquire_recursive>
 8010d62:	4628      	mov	r0, r5
 8010d64:	4621      	mov	r1, r4
 8010d66:	f7ff ff5d 	bl	8010c24 <__sflush_r>
 8010d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d6c:	07da      	lsls	r2, r3, #31
 8010d6e:	4605      	mov	r5, r0
 8010d70:	d4e4      	bmi.n	8010d3c <_fflush_r+0xc>
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	059b      	lsls	r3, r3, #22
 8010d76:	d4e1      	bmi.n	8010d3c <_fflush_r+0xc>
 8010d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d7a:	f7fe fc4c 	bl	800f616 <__retarget_lock_release_recursive>
 8010d7e:	e7dd      	b.n	8010d3c <_fflush_r+0xc>

08010d80 <_sbrk_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d06      	ldr	r5, [pc, #24]	; (8010d9c <_sbrk_r+0x1c>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	602b      	str	r3, [r5, #0]
 8010d8c:	f7f4 fa9a 	bl	80052c4 <_sbrk>
 8010d90:	1c43      	adds	r3, r0, #1
 8010d92:	d102      	bne.n	8010d9a <_sbrk_r+0x1a>
 8010d94:	682b      	ldr	r3, [r5, #0]
 8010d96:	b103      	cbz	r3, 8010d9a <_sbrk_r+0x1a>
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	bd38      	pop	{r3, r4, r5, pc}
 8010d9c:	200096c8 	.word	0x200096c8

08010da0 <__assert_func>:
 8010da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010da2:	4614      	mov	r4, r2
 8010da4:	461a      	mov	r2, r3
 8010da6:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <__assert_func+0x2c>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4605      	mov	r5, r0
 8010dac:	68d8      	ldr	r0, [r3, #12]
 8010dae:	b14c      	cbz	r4, 8010dc4 <__assert_func+0x24>
 8010db0:	4b07      	ldr	r3, [pc, #28]	; (8010dd0 <__assert_func+0x30>)
 8010db2:	9100      	str	r1, [sp, #0]
 8010db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010db8:	4906      	ldr	r1, [pc, #24]	; (8010dd4 <__assert_func+0x34>)
 8010dba:	462b      	mov	r3, r5
 8010dbc:	f000 f844 	bl	8010e48 <fiprintf>
 8010dc0:	f000 f854 	bl	8010e6c <abort>
 8010dc4:	4b04      	ldr	r3, [pc, #16]	; (8010dd8 <__assert_func+0x38>)
 8010dc6:	461c      	mov	r4, r3
 8010dc8:	e7f3      	b.n	8010db2 <__assert_func+0x12>
 8010dca:	bf00      	nop
 8010dcc:	2000006c 	.word	0x2000006c
 8010dd0:	08011dce 	.word	0x08011dce
 8010dd4:	08011ddb 	.word	0x08011ddb
 8010dd8:	08011e09 	.word	0x08011e09

08010ddc <_calloc_r>:
 8010ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dde:	fba1 2402 	umull	r2, r4, r1, r2
 8010de2:	b94c      	cbnz	r4, 8010df8 <_calloc_r+0x1c>
 8010de4:	4611      	mov	r1, r2
 8010de6:	9201      	str	r2, [sp, #4]
 8010de8:	f7ff fb14 	bl	8010414 <_malloc_r>
 8010dec:	9a01      	ldr	r2, [sp, #4]
 8010dee:	4605      	mov	r5, r0
 8010df0:	b930      	cbnz	r0, 8010e00 <_calloc_r+0x24>
 8010df2:	4628      	mov	r0, r5
 8010df4:	b003      	add	sp, #12
 8010df6:	bd30      	pop	{r4, r5, pc}
 8010df8:	220c      	movs	r2, #12
 8010dfa:	6002      	str	r2, [r0, #0]
 8010dfc:	2500      	movs	r5, #0
 8010dfe:	e7f8      	b.n	8010df2 <_calloc_r+0x16>
 8010e00:	4621      	mov	r1, r4
 8010e02:	f7fe fb34 	bl	800f46e <memset>
 8010e06:	e7f4      	b.n	8010df2 <_calloc_r+0x16>

08010e08 <__ascii_mbtowc>:
 8010e08:	b082      	sub	sp, #8
 8010e0a:	b901      	cbnz	r1, 8010e0e <__ascii_mbtowc+0x6>
 8010e0c:	a901      	add	r1, sp, #4
 8010e0e:	b142      	cbz	r2, 8010e22 <__ascii_mbtowc+0x1a>
 8010e10:	b14b      	cbz	r3, 8010e26 <__ascii_mbtowc+0x1e>
 8010e12:	7813      	ldrb	r3, [r2, #0]
 8010e14:	600b      	str	r3, [r1, #0]
 8010e16:	7812      	ldrb	r2, [r2, #0]
 8010e18:	1e10      	subs	r0, r2, #0
 8010e1a:	bf18      	it	ne
 8010e1c:	2001      	movne	r0, #1
 8010e1e:	b002      	add	sp, #8
 8010e20:	4770      	bx	lr
 8010e22:	4610      	mov	r0, r2
 8010e24:	e7fb      	b.n	8010e1e <__ascii_mbtowc+0x16>
 8010e26:	f06f 0001 	mvn.w	r0, #1
 8010e2a:	e7f8      	b.n	8010e1e <__ascii_mbtowc+0x16>

08010e2c <__ascii_wctomb>:
 8010e2c:	b149      	cbz	r1, 8010e42 <__ascii_wctomb+0x16>
 8010e2e:	2aff      	cmp	r2, #255	; 0xff
 8010e30:	bf85      	ittet	hi
 8010e32:	238a      	movhi	r3, #138	; 0x8a
 8010e34:	6003      	strhi	r3, [r0, #0]
 8010e36:	700a      	strbls	r2, [r1, #0]
 8010e38:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e3c:	bf98      	it	ls
 8010e3e:	2001      	movls	r0, #1
 8010e40:	4770      	bx	lr
 8010e42:	4608      	mov	r0, r1
 8010e44:	4770      	bx	lr
	...

08010e48 <fiprintf>:
 8010e48:	b40e      	push	{r1, r2, r3}
 8010e4a:	b503      	push	{r0, r1, lr}
 8010e4c:	4601      	mov	r1, r0
 8010e4e:	ab03      	add	r3, sp, #12
 8010e50:	4805      	ldr	r0, [pc, #20]	; (8010e68 <fiprintf+0x20>)
 8010e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e56:	6800      	ldr	r0, [r0, #0]
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	f000 f837 	bl	8010ecc <_vfiprintf_r>
 8010e5e:	b002      	add	sp, #8
 8010e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e64:	b003      	add	sp, #12
 8010e66:	4770      	bx	lr
 8010e68:	2000006c 	.word	0x2000006c

08010e6c <abort>:
 8010e6c:	b508      	push	{r3, lr}
 8010e6e:	2006      	movs	r0, #6
 8010e70:	f000 fa04 	bl	801127c <raise>
 8010e74:	2001      	movs	r0, #1
 8010e76:	f7f4 f9ad 	bl	80051d4 <_exit>

08010e7a <__sfputc_r>:
 8010e7a:	6893      	ldr	r3, [r2, #8]
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	b410      	push	{r4}
 8010e82:	6093      	str	r3, [r2, #8]
 8010e84:	da08      	bge.n	8010e98 <__sfputc_r+0x1e>
 8010e86:	6994      	ldr	r4, [r2, #24]
 8010e88:	42a3      	cmp	r3, r4
 8010e8a:	db01      	blt.n	8010e90 <__sfputc_r+0x16>
 8010e8c:	290a      	cmp	r1, #10
 8010e8e:	d103      	bne.n	8010e98 <__sfputc_r+0x1e>
 8010e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e94:	f000 b934 	b.w	8011100 <__swbuf_r>
 8010e98:	6813      	ldr	r3, [r2, #0]
 8010e9a:	1c58      	adds	r0, r3, #1
 8010e9c:	6010      	str	r0, [r2, #0]
 8010e9e:	7019      	strb	r1, [r3, #0]
 8010ea0:	4608      	mov	r0, r1
 8010ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <__sfputs_r>:
 8010ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eaa:	4606      	mov	r6, r0
 8010eac:	460f      	mov	r7, r1
 8010eae:	4614      	mov	r4, r2
 8010eb0:	18d5      	adds	r5, r2, r3
 8010eb2:	42ac      	cmp	r4, r5
 8010eb4:	d101      	bne.n	8010eba <__sfputs_r+0x12>
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	e007      	b.n	8010eca <__sfputs_r+0x22>
 8010eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7ff ffda 	bl	8010e7a <__sfputc_r>
 8010ec6:	1c43      	adds	r3, r0, #1
 8010ec8:	d1f3      	bne.n	8010eb2 <__sfputs_r+0xa>
 8010eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ecc <_vfiprintf_r>:
 8010ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed0:	460d      	mov	r5, r1
 8010ed2:	b09d      	sub	sp, #116	; 0x74
 8010ed4:	4614      	mov	r4, r2
 8010ed6:	4698      	mov	r8, r3
 8010ed8:	4606      	mov	r6, r0
 8010eda:	b118      	cbz	r0, 8010ee4 <_vfiprintf_r+0x18>
 8010edc:	6a03      	ldr	r3, [r0, #32]
 8010ede:	b90b      	cbnz	r3, 8010ee4 <_vfiprintf_r+0x18>
 8010ee0:	f7fe fa4c 	bl	800f37c <__sinit>
 8010ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ee6:	07d9      	lsls	r1, r3, #31
 8010ee8:	d405      	bmi.n	8010ef6 <_vfiprintf_r+0x2a>
 8010eea:	89ab      	ldrh	r3, [r5, #12]
 8010eec:	059a      	lsls	r2, r3, #22
 8010eee:	d402      	bmi.n	8010ef6 <_vfiprintf_r+0x2a>
 8010ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef2:	f7fe fb8f 	bl	800f614 <__retarget_lock_acquire_recursive>
 8010ef6:	89ab      	ldrh	r3, [r5, #12]
 8010ef8:	071b      	lsls	r3, r3, #28
 8010efa:	d501      	bpl.n	8010f00 <_vfiprintf_r+0x34>
 8010efc:	692b      	ldr	r3, [r5, #16]
 8010efe:	b99b      	cbnz	r3, 8010f28 <_vfiprintf_r+0x5c>
 8010f00:	4629      	mov	r1, r5
 8010f02:	4630      	mov	r0, r6
 8010f04:	f000 f93a 	bl	801117c <__swsetup_r>
 8010f08:	b170      	cbz	r0, 8010f28 <_vfiprintf_r+0x5c>
 8010f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f0c:	07dc      	lsls	r4, r3, #31
 8010f0e:	d504      	bpl.n	8010f1a <_vfiprintf_r+0x4e>
 8010f10:	f04f 30ff 	mov.w	r0, #4294967295
 8010f14:	b01d      	add	sp, #116	; 0x74
 8010f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1a:	89ab      	ldrh	r3, [r5, #12]
 8010f1c:	0598      	lsls	r0, r3, #22
 8010f1e:	d4f7      	bmi.n	8010f10 <_vfiprintf_r+0x44>
 8010f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f22:	f7fe fb78 	bl	800f616 <__retarget_lock_release_recursive>
 8010f26:	e7f3      	b.n	8010f10 <_vfiprintf_r+0x44>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f2c:	2320      	movs	r3, #32
 8010f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f36:	2330      	movs	r3, #48	; 0x30
 8010f38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80110ec <_vfiprintf_r+0x220>
 8010f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f40:	f04f 0901 	mov.w	r9, #1
 8010f44:	4623      	mov	r3, r4
 8010f46:	469a      	mov	sl, r3
 8010f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f4c:	b10a      	cbz	r2, 8010f52 <_vfiprintf_r+0x86>
 8010f4e:	2a25      	cmp	r2, #37	; 0x25
 8010f50:	d1f9      	bne.n	8010f46 <_vfiprintf_r+0x7a>
 8010f52:	ebba 0b04 	subs.w	fp, sl, r4
 8010f56:	d00b      	beq.n	8010f70 <_vfiprintf_r+0xa4>
 8010f58:	465b      	mov	r3, fp
 8010f5a:	4622      	mov	r2, r4
 8010f5c:	4629      	mov	r1, r5
 8010f5e:	4630      	mov	r0, r6
 8010f60:	f7ff ffa2 	bl	8010ea8 <__sfputs_r>
 8010f64:	3001      	adds	r0, #1
 8010f66:	f000 80a9 	beq.w	80110bc <_vfiprintf_r+0x1f0>
 8010f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f6c:	445a      	add	r2, fp
 8010f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f70:	f89a 3000 	ldrb.w	r3, [sl]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 80a1 	beq.w	80110bc <_vfiprintf_r+0x1f0>
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f84:	f10a 0a01 	add.w	sl, sl, #1
 8010f88:	9304      	str	r3, [sp, #16]
 8010f8a:	9307      	str	r3, [sp, #28]
 8010f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f90:	931a      	str	r3, [sp, #104]	; 0x68
 8010f92:	4654      	mov	r4, sl
 8010f94:	2205      	movs	r2, #5
 8010f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9a:	4854      	ldr	r0, [pc, #336]	; (80110ec <_vfiprintf_r+0x220>)
 8010f9c:	f7ef f920 	bl	80001e0 <memchr>
 8010fa0:	9a04      	ldr	r2, [sp, #16]
 8010fa2:	b9d8      	cbnz	r0, 8010fdc <_vfiprintf_r+0x110>
 8010fa4:	06d1      	lsls	r1, r2, #27
 8010fa6:	bf44      	itt	mi
 8010fa8:	2320      	movmi	r3, #32
 8010faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fae:	0713      	lsls	r3, r2, #28
 8010fb0:	bf44      	itt	mi
 8010fb2:	232b      	movmi	r3, #43	; 0x2b
 8010fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8010fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8010fbe:	d015      	beq.n	8010fec <_vfiprintf_r+0x120>
 8010fc0:	9a07      	ldr	r2, [sp, #28]
 8010fc2:	4654      	mov	r4, sl
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	f04f 0c0a 	mov.w	ip, #10
 8010fca:	4621      	mov	r1, r4
 8010fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fd0:	3b30      	subs	r3, #48	; 0x30
 8010fd2:	2b09      	cmp	r3, #9
 8010fd4:	d94d      	bls.n	8011072 <_vfiprintf_r+0x1a6>
 8010fd6:	b1b0      	cbz	r0, 8011006 <_vfiprintf_r+0x13a>
 8010fd8:	9207      	str	r2, [sp, #28]
 8010fda:	e014      	b.n	8011006 <_vfiprintf_r+0x13a>
 8010fdc:	eba0 0308 	sub.w	r3, r0, r8
 8010fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	9304      	str	r3, [sp, #16]
 8010fe8:	46a2      	mov	sl, r4
 8010fea:	e7d2      	b.n	8010f92 <_vfiprintf_r+0xc6>
 8010fec:	9b03      	ldr	r3, [sp, #12]
 8010fee:	1d19      	adds	r1, r3, #4
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	9103      	str	r1, [sp, #12]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	bfbb      	ittet	lt
 8010ff8:	425b      	neglt	r3, r3
 8010ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8010ffe:	9307      	strge	r3, [sp, #28]
 8011000:	9307      	strlt	r3, [sp, #28]
 8011002:	bfb8      	it	lt
 8011004:	9204      	strlt	r2, [sp, #16]
 8011006:	7823      	ldrb	r3, [r4, #0]
 8011008:	2b2e      	cmp	r3, #46	; 0x2e
 801100a:	d10c      	bne.n	8011026 <_vfiprintf_r+0x15a>
 801100c:	7863      	ldrb	r3, [r4, #1]
 801100e:	2b2a      	cmp	r3, #42	; 0x2a
 8011010:	d134      	bne.n	801107c <_vfiprintf_r+0x1b0>
 8011012:	9b03      	ldr	r3, [sp, #12]
 8011014:	1d1a      	adds	r2, r3, #4
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	9203      	str	r2, [sp, #12]
 801101a:	2b00      	cmp	r3, #0
 801101c:	bfb8      	it	lt
 801101e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011022:	3402      	adds	r4, #2
 8011024:	9305      	str	r3, [sp, #20]
 8011026:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80110fc <_vfiprintf_r+0x230>
 801102a:	7821      	ldrb	r1, [r4, #0]
 801102c:	2203      	movs	r2, #3
 801102e:	4650      	mov	r0, sl
 8011030:	f7ef f8d6 	bl	80001e0 <memchr>
 8011034:	b138      	cbz	r0, 8011046 <_vfiprintf_r+0x17a>
 8011036:	9b04      	ldr	r3, [sp, #16]
 8011038:	eba0 000a 	sub.w	r0, r0, sl
 801103c:	2240      	movs	r2, #64	; 0x40
 801103e:	4082      	lsls	r2, r0
 8011040:	4313      	orrs	r3, r2
 8011042:	3401      	adds	r4, #1
 8011044:	9304      	str	r3, [sp, #16]
 8011046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801104a:	4829      	ldr	r0, [pc, #164]	; (80110f0 <_vfiprintf_r+0x224>)
 801104c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011050:	2206      	movs	r2, #6
 8011052:	f7ef f8c5 	bl	80001e0 <memchr>
 8011056:	2800      	cmp	r0, #0
 8011058:	d03f      	beq.n	80110da <_vfiprintf_r+0x20e>
 801105a:	4b26      	ldr	r3, [pc, #152]	; (80110f4 <_vfiprintf_r+0x228>)
 801105c:	bb1b      	cbnz	r3, 80110a6 <_vfiprintf_r+0x1da>
 801105e:	9b03      	ldr	r3, [sp, #12]
 8011060:	3307      	adds	r3, #7
 8011062:	f023 0307 	bic.w	r3, r3, #7
 8011066:	3308      	adds	r3, #8
 8011068:	9303      	str	r3, [sp, #12]
 801106a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801106c:	443b      	add	r3, r7
 801106e:	9309      	str	r3, [sp, #36]	; 0x24
 8011070:	e768      	b.n	8010f44 <_vfiprintf_r+0x78>
 8011072:	fb0c 3202 	mla	r2, ip, r2, r3
 8011076:	460c      	mov	r4, r1
 8011078:	2001      	movs	r0, #1
 801107a:	e7a6      	b.n	8010fca <_vfiprintf_r+0xfe>
 801107c:	2300      	movs	r3, #0
 801107e:	3401      	adds	r4, #1
 8011080:	9305      	str	r3, [sp, #20]
 8011082:	4619      	mov	r1, r3
 8011084:	f04f 0c0a 	mov.w	ip, #10
 8011088:	4620      	mov	r0, r4
 801108a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801108e:	3a30      	subs	r2, #48	; 0x30
 8011090:	2a09      	cmp	r2, #9
 8011092:	d903      	bls.n	801109c <_vfiprintf_r+0x1d0>
 8011094:	2b00      	cmp	r3, #0
 8011096:	d0c6      	beq.n	8011026 <_vfiprintf_r+0x15a>
 8011098:	9105      	str	r1, [sp, #20]
 801109a:	e7c4      	b.n	8011026 <_vfiprintf_r+0x15a>
 801109c:	fb0c 2101 	mla	r1, ip, r1, r2
 80110a0:	4604      	mov	r4, r0
 80110a2:	2301      	movs	r3, #1
 80110a4:	e7f0      	b.n	8011088 <_vfiprintf_r+0x1bc>
 80110a6:	ab03      	add	r3, sp, #12
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	462a      	mov	r2, r5
 80110ac:	4b12      	ldr	r3, [pc, #72]	; (80110f8 <_vfiprintf_r+0x22c>)
 80110ae:	a904      	add	r1, sp, #16
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7fd fd23 	bl	800eafc <_printf_float>
 80110b6:	4607      	mov	r7, r0
 80110b8:	1c78      	adds	r0, r7, #1
 80110ba:	d1d6      	bne.n	801106a <_vfiprintf_r+0x19e>
 80110bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110be:	07d9      	lsls	r1, r3, #31
 80110c0:	d405      	bmi.n	80110ce <_vfiprintf_r+0x202>
 80110c2:	89ab      	ldrh	r3, [r5, #12]
 80110c4:	059a      	lsls	r2, r3, #22
 80110c6:	d402      	bmi.n	80110ce <_vfiprintf_r+0x202>
 80110c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ca:	f7fe faa4 	bl	800f616 <__retarget_lock_release_recursive>
 80110ce:	89ab      	ldrh	r3, [r5, #12]
 80110d0:	065b      	lsls	r3, r3, #25
 80110d2:	f53f af1d 	bmi.w	8010f10 <_vfiprintf_r+0x44>
 80110d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110d8:	e71c      	b.n	8010f14 <_vfiprintf_r+0x48>
 80110da:	ab03      	add	r3, sp, #12
 80110dc:	9300      	str	r3, [sp, #0]
 80110de:	462a      	mov	r2, r5
 80110e0:	4b05      	ldr	r3, [pc, #20]	; (80110f8 <_vfiprintf_r+0x22c>)
 80110e2:	a904      	add	r1, sp, #16
 80110e4:	4630      	mov	r0, r6
 80110e6:	f7fd ffad 	bl	800f044 <_printf_i>
 80110ea:	e7e4      	b.n	80110b6 <_vfiprintf_r+0x1ea>
 80110ec:	08011f0b 	.word	0x08011f0b
 80110f0:	08011f15 	.word	0x08011f15
 80110f4:	0800eafd 	.word	0x0800eafd
 80110f8:	08010ea9 	.word	0x08010ea9
 80110fc:	08011f11 	.word	0x08011f11

08011100 <__swbuf_r>:
 8011100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011102:	460e      	mov	r6, r1
 8011104:	4614      	mov	r4, r2
 8011106:	4605      	mov	r5, r0
 8011108:	b118      	cbz	r0, 8011112 <__swbuf_r+0x12>
 801110a:	6a03      	ldr	r3, [r0, #32]
 801110c:	b90b      	cbnz	r3, 8011112 <__swbuf_r+0x12>
 801110e:	f7fe f935 	bl	800f37c <__sinit>
 8011112:	69a3      	ldr	r3, [r4, #24]
 8011114:	60a3      	str	r3, [r4, #8]
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	071a      	lsls	r2, r3, #28
 801111a:	d525      	bpl.n	8011168 <__swbuf_r+0x68>
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	b31b      	cbz	r3, 8011168 <__swbuf_r+0x68>
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	6922      	ldr	r2, [r4, #16]
 8011124:	1a98      	subs	r0, r3, r2
 8011126:	6963      	ldr	r3, [r4, #20]
 8011128:	b2f6      	uxtb	r6, r6
 801112a:	4283      	cmp	r3, r0
 801112c:	4637      	mov	r7, r6
 801112e:	dc04      	bgt.n	801113a <__swbuf_r+0x3a>
 8011130:	4621      	mov	r1, r4
 8011132:	4628      	mov	r0, r5
 8011134:	f7ff fdfc 	bl	8010d30 <_fflush_r>
 8011138:	b9e0      	cbnz	r0, 8011174 <__swbuf_r+0x74>
 801113a:	68a3      	ldr	r3, [r4, #8]
 801113c:	3b01      	subs	r3, #1
 801113e:	60a3      	str	r3, [r4, #8]
 8011140:	6823      	ldr	r3, [r4, #0]
 8011142:	1c5a      	adds	r2, r3, #1
 8011144:	6022      	str	r2, [r4, #0]
 8011146:	701e      	strb	r6, [r3, #0]
 8011148:	6962      	ldr	r2, [r4, #20]
 801114a:	1c43      	adds	r3, r0, #1
 801114c:	429a      	cmp	r2, r3
 801114e:	d004      	beq.n	801115a <__swbuf_r+0x5a>
 8011150:	89a3      	ldrh	r3, [r4, #12]
 8011152:	07db      	lsls	r3, r3, #31
 8011154:	d506      	bpl.n	8011164 <__swbuf_r+0x64>
 8011156:	2e0a      	cmp	r6, #10
 8011158:	d104      	bne.n	8011164 <__swbuf_r+0x64>
 801115a:	4621      	mov	r1, r4
 801115c:	4628      	mov	r0, r5
 801115e:	f7ff fde7 	bl	8010d30 <_fflush_r>
 8011162:	b938      	cbnz	r0, 8011174 <__swbuf_r+0x74>
 8011164:	4638      	mov	r0, r7
 8011166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011168:	4621      	mov	r1, r4
 801116a:	4628      	mov	r0, r5
 801116c:	f000 f806 	bl	801117c <__swsetup_r>
 8011170:	2800      	cmp	r0, #0
 8011172:	d0d5      	beq.n	8011120 <__swbuf_r+0x20>
 8011174:	f04f 37ff 	mov.w	r7, #4294967295
 8011178:	e7f4      	b.n	8011164 <__swbuf_r+0x64>
	...

0801117c <__swsetup_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4b2a      	ldr	r3, [pc, #168]	; (8011228 <__swsetup_r+0xac>)
 8011180:	4605      	mov	r5, r0
 8011182:	6818      	ldr	r0, [r3, #0]
 8011184:	460c      	mov	r4, r1
 8011186:	b118      	cbz	r0, 8011190 <__swsetup_r+0x14>
 8011188:	6a03      	ldr	r3, [r0, #32]
 801118a:	b90b      	cbnz	r3, 8011190 <__swsetup_r+0x14>
 801118c:	f7fe f8f6 	bl	800f37c <__sinit>
 8011190:	89a3      	ldrh	r3, [r4, #12]
 8011192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011196:	0718      	lsls	r0, r3, #28
 8011198:	d422      	bmi.n	80111e0 <__swsetup_r+0x64>
 801119a:	06d9      	lsls	r1, r3, #27
 801119c:	d407      	bmi.n	80111ae <__swsetup_r+0x32>
 801119e:	2309      	movs	r3, #9
 80111a0:	602b      	str	r3, [r5, #0]
 80111a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80111a6:	81a3      	strh	r3, [r4, #12]
 80111a8:	f04f 30ff 	mov.w	r0, #4294967295
 80111ac:	e034      	b.n	8011218 <__swsetup_r+0x9c>
 80111ae:	0758      	lsls	r0, r3, #29
 80111b0:	d512      	bpl.n	80111d8 <__swsetup_r+0x5c>
 80111b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111b4:	b141      	cbz	r1, 80111c8 <__swsetup_r+0x4c>
 80111b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111ba:	4299      	cmp	r1, r3
 80111bc:	d002      	beq.n	80111c4 <__swsetup_r+0x48>
 80111be:	4628      	mov	r0, r5
 80111c0:	f7ff f8b4 	bl	801032c <_free_r>
 80111c4:	2300      	movs	r3, #0
 80111c6:	6363      	str	r3, [r4, #52]	; 0x34
 80111c8:	89a3      	ldrh	r3, [r4, #12]
 80111ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80111ce:	81a3      	strh	r3, [r4, #12]
 80111d0:	2300      	movs	r3, #0
 80111d2:	6063      	str	r3, [r4, #4]
 80111d4:	6923      	ldr	r3, [r4, #16]
 80111d6:	6023      	str	r3, [r4, #0]
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	f043 0308 	orr.w	r3, r3, #8
 80111de:	81a3      	strh	r3, [r4, #12]
 80111e0:	6923      	ldr	r3, [r4, #16]
 80111e2:	b94b      	cbnz	r3, 80111f8 <__swsetup_r+0x7c>
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111ee:	d003      	beq.n	80111f8 <__swsetup_r+0x7c>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 f884 	bl	8011300 <__smakebuf_r>
 80111f8:	89a0      	ldrh	r0, [r4, #12]
 80111fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111fe:	f010 0301 	ands.w	r3, r0, #1
 8011202:	d00a      	beq.n	801121a <__swsetup_r+0x9e>
 8011204:	2300      	movs	r3, #0
 8011206:	60a3      	str	r3, [r4, #8]
 8011208:	6963      	ldr	r3, [r4, #20]
 801120a:	425b      	negs	r3, r3
 801120c:	61a3      	str	r3, [r4, #24]
 801120e:	6923      	ldr	r3, [r4, #16]
 8011210:	b943      	cbnz	r3, 8011224 <__swsetup_r+0xa8>
 8011212:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011216:	d1c4      	bne.n	80111a2 <__swsetup_r+0x26>
 8011218:	bd38      	pop	{r3, r4, r5, pc}
 801121a:	0781      	lsls	r1, r0, #30
 801121c:	bf58      	it	pl
 801121e:	6963      	ldrpl	r3, [r4, #20]
 8011220:	60a3      	str	r3, [r4, #8]
 8011222:	e7f4      	b.n	801120e <__swsetup_r+0x92>
 8011224:	2000      	movs	r0, #0
 8011226:	e7f7      	b.n	8011218 <__swsetup_r+0x9c>
 8011228:	2000006c 	.word	0x2000006c

0801122c <_raise_r>:
 801122c:	291f      	cmp	r1, #31
 801122e:	b538      	push	{r3, r4, r5, lr}
 8011230:	4604      	mov	r4, r0
 8011232:	460d      	mov	r5, r1
 8011234:	d904      	bls.n	8011240 <_raise_r+0x14>
 8011236:	2316      	movs	r3, #22
 8011238:	6003      	str	r3, [r0, #0]
 801123a:	f04f 30ff 	mov.w	r0, #4294967295
 801123e:	bd38      	pop	{r3, r4, r5, pc}
 8011240:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011242:	b112      	cbz	r2, 801124a <_raise_r+0x1e>
 8011244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011248:	b94b      	cbnz	r3, 801125e <_raise_r+0x32>
 801124a:	4620      	mov	r0, r4
 801124c:	f000 f830 	bl	80112b0 <_getpid_r>
 8011250:	462a      	mov	r2, r5
 8011252:	4601      	mov	r1, r0
 8011254:	4620      	mov	r0, r4
 8011256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801125a:	f000 b817 	b.w	801128c <_kill_r>
 801125e:	2b01      	cmp	r3, #1
 8011260:	d00a      	beq.n	8011278 <_raise_r+0x4c>
 8011262:	1c59      	adds	r1, r3, #1
 8011264:	d103      	bne.n	801126e <_raise_r+0x42>
 8011266:	2316      	movs	r3, #22
 8011268:	6003      	str	r3, [r0, #0]
 801126a:	2001      	movs	r0, #1
 801126c:	e7e7      	b.n	801123e <_raise_r+0x12>
 801126e:	2400      	movs	r4, #0
 8011270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011274:	4628      	mov	r0, r5
 8011276:	4798      	blx	r3
 8011278:	2000      	movs	r0, #0
 801127a:	e7e0      	b.n	801123e <_raise_r+0x12>

0801127c <raise>:
 801127c:	4b02      	ldr	r3, [pc, #8]	; (8011288 <raise+0xc>)
 801127e:	4601      	mov	r1, r0
 8011280:	6818      	ldr	r0, [r3, #0]
 8011282:	f7ff bfd3 	b.w	801122c <_raise_r>
 8011286:	bf00      	nop
 8011288:	2000006c 	.word	0x2000006c

0801128c <_kill_r>:
 801128c:	b538      	push	{r3, r4, r5, lr}
 801128e:	4d07      	ldr	r5, [pc, #28]	; (80112ac <_kill_r+0x20>)
 8011290:	2300      	movs	r3, #0
 8011292:	4604      	mov	r4, r0
 8011294:	4608      	mov	r0, r1
 8011296:	4611      	mov	r1, r2
 8011298:	602b      	str	r3, [r5, #0]
 801129a:	f7f3 ff8b 	bl	80051b4 <_kill>
 801129e:	1c43      	adds	r3, r0, #1
 80112a0:	d102      	bne.n	80112a8 <_kill_r+0x1c>
 80112a2:	682b      	ldr	r3, [r5, #0]
 80112a4:	b103      	cbz	r3, 80112a8 <_kill_r+0x1c>
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	bd38      	pop	{r3, r4, r5, pc}
 80112aa:	bf00      	nop
 80112ac:	200096c8 	.word	0x200096c8

080112b0 <_getpid_r>:
 80112b0:	f7f3 bf78 	b.w	80051a4 <_getpid>

080112b4 <__swhatbuf_r>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	460c      	mov	r4, r1
 80112b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112bc:	2900      	cmp	r1, #0
 80112be:	b096      	sub	sp, #88	; 0x58
 80112c0:	4615      	mov	r5, r2
 80112c2:	461e      	mov	r6, r3
 80112c4:	da0d      	bge.n	80112e2 <__swhatbuf_r+0x2e>
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80112cc:	f04f 0100 	mov.w	r1, #0
 80112d0:	bf0c      	ite	eq
 80112d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80112d6:	2340      	movne	r3, #64	; 0x40
 80112d8:	2000      	movs	r0, #0
 80112da:	6031      	str	r1, [r6, #0]
 80112dc:	602b      	str	r3, [r5, #0]
 80112de:	b016      	add	sp, #88	; 0x58
 80112e0:	bd70      	pop	{r4, r5, r6, pc}
 80112e2:	466a      	mov	r2, sp
 80112e4:	f000 f848 	bl	8011378 <_fstat_r>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	dbec      	blt.n	80112c6 <__swhatbuf_r+0x12>
 80112ec:	9901      	ldr	r1, [sp, #4]
 80112ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80112f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80112f6:	4259      	negs	r1, r3
 80112f8:	4159      	adcs	r1, r3
 80112fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112fe:	e7eb      	b.n	80112d8 <__swhatbuf_r+0x24>

08011300 <__smakebuf_r>:
 8011300:	898b      	ldrh	r3, [r1, #12]
 8011302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011304:	079d      	lsls	r5, r3, #30
 8011306:	4606      	mov	r6, r0
 8011308:	460c      	mov	r4, r1
 801130a:	d507      	bpl.n	801131c <__smakebuf_r+0x1c>
 801130c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	6123      	str	r3, [r4, #16]
 8011314:	2301      	movs	r3, #1
 8011316:	6163      	str	r3, [r4, #20]
 8011318:	b002      	add	sp, #8
 801131a:	bd70      	pop	{r4, r5, r6, pc}
 801131c:	ab01      	add	r3, sp, #4
 801131e:	466a      	mov	r2, sp
 8011320:	f7ff ffc8 	bl	80112b4 <__swhatbuf_r>
 8011324:	9900      	ldr	r1, [sp, #0]
 8011326:	4605      	mov	r5, r0
 8011328:	4630      	mov	r0, r6
 801132a:	f7ff f873 	bl	8010414 <_malloc_r>
 801132e:	b948      	cbnz	r0, 8011344 <__smakebuf_r+0x44>
 8011330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011334:	059a      	lsls	r2, r3, #22
 8011336:	d4ef      	bmi.n	8011318 <__smakebuf_r+0x18>
 8011338:	f023 0303 	bic.w	r3, r3, #3
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	81a3      	strh	r3, [r4, #12]
 8011342:	e7e3      	b.n	801130c <__smakebuf_r+0xc>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	6020      	str	r0, [r4, #0]
 8011348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801134c:	81a3      	strh	r3, [r4, #12]
 801134e:	9b00      	ldr	r3, [sp, #0]
 8011350:	6163      	str	r3, [r4, #20]
 8011352:	9b01      	ldr	r3, [sp, #4]
 8011354:	6120      	str	r0, [r4, #16]
 8011356:	b15b      	cbz	r3, 8011370 <__smakebuf_r+0x70>
 8011358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801135c:	4630      	mov	r0, r6
 801135e:	f000 f81d 	bl	801139c <_isatty_r>
 8011362:	b128      	cbz	r0, 8011370 <__smakebuf_r+0x70>
 8011364:	89a3      	ldrh	r3, [r4, #12]
 8011366:	f023 0303 	bic.w	r3, r3, #3
 801136a:	f043 0301 	orr.w	r3, r3, #1
 801136e:	81a3      	strh	r3, [r4, #12]
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	431d      	orrs	r5, r3
 8011374:	81a5      	strh	r5, [r4, #12]
 8011376:	e7cf      	b.n	8011318 <__smakebuf_r+0x18>

08011378 <_fstat_r>:
 8011378:	b538      	push	{r3, r4, r5, lr}
 801137a:	4d07      	ldr	r5, [pc, #28]	; (8011398 <_fstat_r+0x20>)
 801137c:	2300      	movs	r3, #0
 801137e:	4604      	mov	r4, r0
 8011380:	4608      	mov	r0, r1
 8011382:	4611      	mov	r1, r2
 8011384:	602b      	str	r3, [r5, #0]
 8011386:	f7f3 ff74 	bl	8005272 <_fstat>
 801138a:	1c43      	adds	r3, r0, #1
 801138c:	d102      	bne.n	8011394 <_fstat_r+0x1c>
 801138e:	682b      	ldr	r3, [r5, #0]
 8011390:	b103      	cbz	r3, 8011394 <_fstat_r+0x1c>
 8011392:	6023      	str	r3, [r4, #0]
 8011394:	bd38      	pop	{r3, r4, r5, pc}
 8011396:	bf00      	nop
 8011398:	200096c8 	.word	0x200096c8

0801139c <_isatty_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	4d06      	ldr	r5, [pc, #24]	; (80113b8 <_isatty_r+0x1c>)
 80113a0:	2300      	movs	r3, #0
 80113a2:	4604      	mov	r4, r0
 80113a4:	4608      	mov	r0, r1
 80113a6:	602b      	str	r3, [r5, #0]
 80113a8:	f7f3 ff73 	bl	8005292 <_isatty>
 80113ac:	1c43      	adds	r3, r0, #1
 80113ae:	d102      	bne.n	80113b6 <_isatty_r+0x1a>
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	b103      	cbz	r3, 80113b6 <_isatty_r+0x1a>
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	bd38      	pop	{r3, r4, r5, pc}
 80113b8:	200096c8 	.word	0x200096c8

080113bc <_init>:
 80113bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113be:	bf00      	nop
 80113c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113c2:	bc08      	pop	{r3}
 80113c4:	469e      	mov	lr, r3
 80113c6:	4770      	bx	lr

080113c8 <_fini>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	bf00      	nop
 80113cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ce:	bc08      	pop	{r3}
 80113d0:	469e      	mov	lr, r3
 80113d2:	4770      	bx	lr
